//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:09:45 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// master_d_AWVALID               O     1
// master_d_AWID                  O     1 reg
// master_d_AWADDR                O    32 reg
// master_d_AWLEN                 O     8 reg
// master_d_AWSIZE                O     3 reg
// master_d_AWBURST               O     2 reg
// master_d_AWLOCK                O     1 reg
// master_d_AWCACHE               O     4 reg
// master_d_AWPROT                O     3 reg
// master_d_AWQOS                 O     4 reg
// master_d_AWREGION              O     4 reg
// master_d_WVALID                O     1
// master_d_WDATA                 O    32 reg
// master_d_WSTRB                 O     4 reg
// master_d_WLAST                 O     1 reg
// master_d_BREADY                O     1
// master_d_ARVALID               O     1
// master_d_ARID                  O     1 reg
// master_d_ARADDR                O    32 reg
// master_d_ARLEN                 O     8 reg
// master_d_ARSIZE                O     3 reg
// master_d_ARBURST               O     2 reg
// master_d_ARLOCK                O     1 reg
// master_d_ARCACHE               O     4 reg
// master_d_ARPROT                O     3 reg
// master_d_ARQOS                 O     4 reg
// master_d_ARREGION              O     4 reg
// master_d_RREADY                O     1
// master_i_AWVALID               O     1
// master_i_AWID                  O     1 reg
// master_i_AWADDR                O    32 reg
// master_i_AWLEN                 O     8 reg
// master_i_AWSIZE                O     3 reg
// master_i_AWBURST               O     2 reg
// master_i_AWLOCK                O     1 reg
// master_i_AWCACHE               O     4 reg
// master_i_AWPROT                O     3 reg
// master_i_AWQOS                 O     4 reg
// master_i_AWREGION              O     4 reg
// master_i_WVALID                O     1
// master_i_WDATA                 O    32 reg
// master_i_WSTRB                 O     4 reg
// master_i_WLAST                 O     1 reg
// master_i_BREADY                O     1
// master_i_ARVALID               O     1
// master_i_ARID                  O     1 reg
// master_i_ARADDR                O    32 reg
// master_i_ARLEN                 O     8 reg
// master_i_ARSIZE                O     3 reg
// master_i_ARBURST               O     2 reg
// master_i_ARLOCK                O     1 reg
// master_i_ARCACHE               O     4 reg
// master_i_ARPROT                O     3 reg
// master_i_ARQOS                 O     4 reg
// master_i_ARREGION              O     4 reg
// master_i_RREADY                O     1
// RDY_sb_clint_msip              O     1 const
// RDY_sb_clint_mtip              O     1 const
// RDY_sb_clint_mtime             O     1 const
// RDY_sb_plic_meip               O     1 const
// io_dump_get                    O   104 reg
// RDY_io_dump_get                O     1 reg
// resetpc                        I    32
// CLK                            I     1 clock
// RST_N                          I     1 reset
// master_d_AWREADY               I     1
// master_d_WREADY                I     1
// master_d_BVALID                I     1
// master_d_BID                   I     1 reg
// master_d_BRESP                 I     2 reg
// master_d_ARREADY               I     1
// master_d_RVALID                I     1
// master_d_RID                   I     1 reg
// master_d_RDATA                 I    32 reg
// master_d_RRESP                 I     2 reg
// master_d_RLAST                 I     1 reg
// master_i_AWREADY               I     1
// master_i_WREADY                I     1
// master_i_BVALID                I     1
// master_i_BID                   I     1 reg
// master_i_BRESP                 I     2 reg
// master_i_ARREADY               I     1
// master_i_RVALID                I     1
// master_i_RID                   I     1 reg
// master_i_RDATA                 I    32 reg
// master_i_RRESP                 I     2 reg
// master_i_RLAST                 I     1 reg
// sb_clint_msip_m                I     1 reg
// sb_clint_mtip_m                I     1 reg
// sb_clint_mtime_m               I    64 reg
// sb_plic_meip_ex_i              I     1 reg
// EN_sb_clint_msip               I     1
// EN_sb_clint_mtip               I     1
// EN_sb_clint_mtime              I     1
// EN_sb_plic_meip                I     1
// EN_io_dump_get                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkccore_axi4(resetpc,
		    CLK,
		    RST_N,

		    master_d_AWVALID,

		    master_d_AWID,

		    master_d_AWADDR,

		    master_d_AWLEN,

		    master_d_AWSIZE,

		    master_d_AWBURST,

		    master_d_AWLOCK,

		    master_d_AWCACHE,

		    master_d_AWPROT,

		    master_d_AWQOS,

		    master_d_AWREGION,

		    master_d_AWREADY,

		    master_d_WVALID,

		    master_d_WDATA,

		    master_d_WSTRB,

		    master_d_WLAST,

		    master_d_WREADY,

		    master_d_BVALID,
		    master_d_BID,
		    master_d_BRESP,

		    master_d_BREADY,

		    master_d_ARVALID,

		    master_d_ARID,

		    master_d_ARADDR,

		    master_d_ARLEN,

		    master_d_ARSIZE,

		    master_d_ARBURST,

		    master_d_ARLOCK,

		    master_d_ARCACHE,

		    master_d_ARPROT,

		    master_d_ARQOS,

		    master_d_ARREGION,

		    master_d_ARREADY,

		    master_d_RVALID,
		    master_d_RID,
		    master_d_RDATA,
		    master_d_RRESP,
		    master_d_RLAST,

		    master_d_RREADY,

		    master_i_AWVALID,

		    master_i_AWID,

		    master_i_AWADDR,

		    master_i_AWLEN,

		    master_i_AWSIZE,

		    master_i_AWBURST,

		    master_i_AWLOCK,

		    master_i_AWCACHE,

		    master_i_AWPROT,

		    master_i_AWQOS,

		    master_i_AWREGION,

		    master_i_AWREADY,

		    master_i_WVALID,

		    master_i_WDATA,

		    master_i_WSTRB,

		    master_i_WLAST,

		    master_i_WREADY,

		    master_i_BVALID,
		    master_i_BID,
		    master_i_BRESP,

		    master_i_BREADY,

		    master_i_ARVALID,

		    master_i_ARID,

		    master_i_ARADDR,

		    master_i_ARLEN,

		    master_i_ARSIZE,

		    master_i_ARBURST,

		    master_i_ARLOCK,

		    master_i_ARCACHE,

		    master_i_ARPROT,

		    master_i_ARQOS,

		    master_i_ARREGION,

		    master_i_ARREADY,

		    master_i_RVALID,
		    master_i_RID,
		    master_i_RDATA,
		    master_i_RRESP,
		    master_i_RLAST,

		    master_i_RREADY,

		    sb_clint_msip_m,
		    EN_sb_clint_msip,
		    RDY_sb_clint_msip,

		    sb_clint_mtip_m,
		    EN_sb_clint_mtip,
		    RDY_sb_clint_mtip,

		    sb_clint_mtime_m,
		    EN_sb_clint_mtime,
		    RDY_sb_clint_mtime,

		    sb_plic_meip_ex_i,
		    EN_sb_plic_meip,
		    RDY_sb_plic_meip,

		    EN_io_dump_get,
		    io_dump_get,
		    RDY_io_dump_get);
  parameter [31 : 0] hartid = 32'b0;
  input  [31 : 0] resetpc;
  input  CLK;
  input  RST_N;

  // value method master_d_m_awvalid
  output master_d_AWVALID;

  // value method master_d_m_awid
  output master_d_AWID;

  // value method master_d_m_awaddr
  output [31 : 0] master_d_AWADDR;

  // value method master_d_m_awlen
  output [7 : 0] master_d_AWLEN;

  // value method master_d_m_awsize
  output [2 : 0] master_d_AWSIZE;

  // value method master_d_m_awburst
  output [1 : 0] master_d_AWBURST;

  // value method master_d_m_awlock
  output master_d_AWLOCK;

  // value method master_d_m_awcache
  output [3 : 0] master_d_AWCACHE;

  // value method master_d_m_awprot
  output [2 : 0] master_d_AWPROT;

  // value method master_d_m_awqos
  output [3 : 0] master_d_AWQOS;

  // value method master_d_m_awregion
  output [3 : 0] master_d_AWREGION;

  // value method master_d_m_awuser

  // action method master_d_m_awready
  input  master_d_AWREADY;

  // value method master_d_m_wvalid
  output master_d_WVALID;

  // value method master_d_m_wdata
  output [31 : 0] master_d_WDATA;

  // value method master_d_m_wstrb
  output [3 : 0] master_d_WSTRB;

  // value method master_d_m_wlast
  output master_d_WLAST;

  // value method master_d_m_wuser

  // action method master_d_m_wready
  input  master_d_WREADY;

  // action method master_d_m_bvalid
  input  master_d_BVALID;
  input  master_d_BID;
  input  [1 : 0] master_d_BRESP;

  // value method master_d_m_bready
  output master_d_BREADY;

  // value method master_d_m_arvalid
  output master_d_ARVALID;

  // value method master_d_m_arid
  output master_d_ARID;

  // value method master_d_m_araddr
  output [31 : 0] master_d_ARADDR;

  // value method master_d_m_arlen
  output [7 : 0] master_d_ARLEN;

  // value method master_d_m_arsize
  output [2 : 0] master_d_ARSIZE;

  // value method master_d_m_arburst
  output [1 : 0] master_d_ARBURST;

  // value method master_d_m_arlock
  output master_d_ARLOCK;

  // value method master_d_m_arcache
  output [3 : 0] master_d_ARCACHE;

  // value method master_d_m_arprot
  output [2 : 0] master_d_ARPROT;

  // value method master_d_m_arqos
  output [3 : 0] master_d_ARQOS;

  // value method master_d_m_arregion
  output [3 : 0] master_d_ARREGION;

  // value method master_d_m_aruser

  // action method master_d_m_arready
  input  master_d_ARREADY;

  // action method master_d_m_rvalid
  input  master_d_RVALID;
  input  master_d_RID;
  input  [31 : 0] master_d_RDATA;
  input  [1 : 0] master_d_RRESP;
  input  master_d_RLAST;

  // value method master_d_m_rready
  output master_d_RREADY;

  // value method master_i_m_awvalid
  output master_i_AWVALID;

  // value method master_i_m_awid
  output master_i_AWID;

  // value method master_i_m_awaddr
  output [31 : 0] master_i_AWADDR;

  // value method master_i_m_awlen
  output [7 : 0] master_i_AWLEN;

  // value method master_i_m_awsize
  output [2 : 0] master_i_AWSIZE;

  // value method master_i_m_awburst
  output [1 : 0] master_i_AWBURST;

  // value method master_i_m_awlock
  output master_i_AWLOCK;

  // value method master_i_m_awcache
  output [3 : 0] master_i_AWCACHE;

  // value method master_i_m_awprot
  output [2 : 0] master_i_AWPROT;

  // value method master_i_m_awqos
  output [3 : 0] master_i_AWQOS;

  // value method master_i_m_awregion
  output [3 : 0] master_i_AWREGION;

  // value method master_i_m_awuser

  // action method master_i_m_awready
  input  master_i_AWREADY;

  // value method master_i_m_wvalid
  output master_i_WVALID;

  // value method master_i_m_wdata
  output [31 : 0] master_i_WDATA;

  // value method master_i_m_wstrb
  output [3 : 0] master_i_WSTRB;

  // value method master_i_m_wlast
  output master_i_WLAST;

  // value method master_i_m_wuser

  // action method master_i_m_wready
  input  master_i_WREADY;

  // action method master_i_m_bvalid
  input  master_i_BVALID;
  input  master_i_BID;
  input  [1 : 0] master_i_BRESP;

  // value method master_i_m_bready
  output master_i_BREADY;

  // value method master_i_m_arvalid
  output master_i_ARVALID;

  // value method master_i_m_arid
  output master_i_ARID;

  // value method master_i_m_araddr
  output [31 : 0] master_i_ARADDR;

  // value method master_i_m_arlen
  output [7 : 0] master_i_ARLEN;

  // value method master_i_m_arsize
  output [2 : 0] master_i_ARSIZE;

  // value method master_i_m_arburst
  output [1 : 0] master_i_ARBURST;

  // value method master_i_m_arlock
  output master_i_ARLOCK;

  // value method master_i_m_arcache
  output [3 : 0] master_i_ARCACHE;

  // value method master_i_m_arprot
  output [2 : 0] master_i_ARPROT;

  // value method master_i_m_arqos
  output [3 : 0] master_i_ARQOS;

  // value method master_i_m_arregion
  output [3 : 0] master_i_ARREGION;

  // value method master_i_m_aruser

  // action method master_i_m_arready
  input  master_i_ARREADY;

  // action method master_i_m_rvalid
  input  master_i_RVALID;
  input  master_i_RID;
  input  [31 : 0] master_i_RDATA;
  input  [1 : 0] master_i_RRESP;
  input  master_i_RLAST;

  // value method master_i_m_rready
  output master_i_RREADY;

  // action method sb_clint_msip
  input  sb_clint_msip_m;
  input  EN_sb_clint_msip;
  output RDY_sb_clint_msip;

  // action method sb_clint_mtip
  input  sb_clint_mtip_m;
  input  EN_sb_clint_mtip;
  output RDY_sb_clint_mtip;

  // action method sb_clint_mtime
  input  [63 : 0] sb_clint_mtime_m;
  input  EN_sb_clint_mtime;
  output RDY_sb_clint_mtime;

  // action method sb_plic_meip
  input  sb_plic_meip_ex_i;
  input  EN_sb_plic_meip;
  output RDY_sb_plic_meip;

  // actionvalue method io_dump_get
  input  EN_io_dump_get;
  output [103 : 0] io_dump_get;
  output RDY_io_dump_get;

  // signals for module outputs
  wire [103 : 0] io_dump_get;
  wire [31 : 0] master_d_ARADDR,
		master_d_AWADDR,
		master_d_WDATA,
		master_i_ARADDR,
		master_i_AWADDR,
		master_i_WDATA;
  wire [7 : 0] master_d_ARLEN, master_d_AWLEN, master_i_ARLEN, master_i_AWLEN;
  wire [3 : 0] master_d_ARCACHE,
	       master_d_ARQOS,
	       master_d_ARREGION,
	       master_d_AWCACHE,
	       master_d_AWQOS,
	       master_d_AWREGION,
	       master_d_WSTRB,
	       master_i_ARCACHE,
	       master_i_ARQOS,
	       master_i_ARREGION,
	       master_i_AWCACHE,
	       master_i_AWQOS,
	       master_i_AWREGION,
	       master_i_WSTRB;
  wire [2 : 0] master_d_ARPROT,
	       master_d_ARSIZE,
	       master_d_AWPROT,
	       master_d_AWSIZE,
	       master_i_ARPROT,
	       master_i_ARSIZE,
	       master_i_AWPROT,
	       master_i_AWSIZE;
  wire [1 : 0] master_d_ARBURST,
	       master_d_AWBURST,
	       master_i_ARBURST,
	       master_i_AWBURST;
  wire RDY_io_dump_get,
       RDY_sb_clint_msip,
       RDY_sb_clint_mtime,
       RDY_sb_clint_mtip,
       RDY_sb_plic_meip,
       master_d_ARID,
       master_d_ARLOCK,
       master_d_ARVALID,
       master_d_AWID,
       master_d_AWLOCK,
       master_d_AWVALID,
       master_d_BREADY,
       master_d_RREADY,
       master_d_WLAST,
       master_d_WVALID,
       master_i_ARID,
       master_i_ARLOCK,
       master_i_ARVALID,
       master_i_AWID,
       master_i_AWLOCK,
       master_i_AWVALID,
       master_i_BREADY,
       master_i_RREADY,
       master_i_WLAST,
       master_i_WVALID;

  // inlined wires
  wire fetch_xactor_crg_rd_addr_full_EN_port1__write,
       fetch_xactor_crg_rd_addr_full_port2__read,
       fetch_xactor_crg_rd_addr_full_port3__read,
       fetch_xactor_crg_rd_data_full_EN_port2__write,
       fetch_xactor_crg_rd_data_full_port2__read,
       fetch_xactor_crg_rd_data_full_port3__read,
       fetch_xactor_crg_wr_addr_full_EN_port1__write,
       fetch_xactor_crg_wr_addr_full_port2__read,
       fetch_xactor_crg_wr_data_full_EN_port1__write,
       fetch_xactor_crg_wr_data_full_port2__read,
       fetch_xactor_crg_wr_resp_full_EN_port2__write,
       fetch_xactor_crg_wr_resp_full_port3__read,
       memory_xactor_crg_rd_addr_full_EN_port1__write,
       memory_xactor_crg_rd_addr_full_EN_port2__write,
       memory_xactor_crg_rd_addr_full_port2__read,
       memory_xactor_crg_rd_addr_full_port3__read,
       memory_xactor_crg_rd_data_full_EN_port2__write,
       memory_xactor_crg_rd_data_full_port2__read,
       memory_xactor_crg_rd_data_full_port3__read,
       memory_xactor_crg_wr_addr_full_EN_port1__write,
       memory_xactor_crg_wr_addr_full_port2__read,
       memory_xactor_crg_wr_addr_full_port3__read,
       memory_xactor_crg_wr_data_full_EN_port1__write,
       memory_xactor_crg_wr_data_full_EN_port2__write,
       memory_xactor_crg_wr_data_full_port2__read,
       memory_xactor_crg_wr_data_full_port3__read,
       memory_xactor_crg_wr_resp_full_EN_port2__write,
       memory_xactor_crg_wr_resp_full_port2__read,
       memory_xactor_crg_wr_resp_full_port3__read;

  // register fetch_xactor_crg_rd_addr_full
  reg fetch_xactor_crg_rd_addr_full;
  wire fetch_xactor_crg_rd_addr_full_D_IN, fetch_xactor_crg_rd_addr_full_EN;

  // register fetch_xactor_crg_rd_data_full
  reg fetch_xactor_crg_rd_data_full;
  wire fetch_xactor_crg_rd_data_full_D_IN, fetch_xactor_crg_rd_data_full_EN;

  // register fetch_xactor_crg_wr_addr_full
  reg fetch_xactor_crg_wr_addr_full;
  wire fetch_xactor_crg_wr_addr_full_D_IN, fetch_xactor_crg_wr_addr_full_EN;

  // register fetch_xactor_crg_wr_data_full
  reg fetch_xactor_crg_wr_data_full;
  wire fetch_xactor_crg_wr_data_full_D_IN, fetch_xactor_crg_wr_data_full_EN;

  // register fetch_xactor_crg_wr_resp_full
  reg fetch_xactor_crg_wr_resp_full;
  wire fetch_xactor_crg_wr_resp_full_D_IN, fetch_xactor_crg_wr_resp_full_EN;

  // register fetch_xactor_rg_rd_addr
  reg [61 : 0] fetch_xactor_rg_rd_addr;
  wire [61 : 0] fetch_xactor_rg_rd_addr_D_IN;
  wire fetch_xactor_rg_rd_addr_EN;

  // register fetch_xactor_rg_rd_data
  reg [35 : 0] fetch_xactor_rg_rd_data;
  wire [35 : 0] fetch_xactor_rg_rd_data_D_IN;
  wire fetch_xactor_rg_rd_data_EN;

  // register fetch_xactor_rg_wr_addr
  reg [61 : 0] fetch_xactor_rg_wr_addr;
  wire [61 : 0] fetch_xactor_rg_wr_addr_D_IN;
  wire fetch_xactor_rg_wr_addr_EN;

  // register fetch_xactor_rg_wr_data
  reg [36 : 0] fetch_xactor_rg_wr_data;
  wire [36 : 0] fetch_xactor_rg_wr_data_D_IN;
  wire fetch_xactor_rg_wr_data_EN;

  // register fetch_xactor_rg_wr_resp
  reg [2 : 0] fetch_xactor_rg_wr_resp;
  wire [2 : 0] fetch_xactor_rg_wr_resp_D_IN;
  wire fetch_xactor_rg_wr_resp_EN;

  // register memory_xactor_crg_rd_addr_full
  reg memory_xactor_crg_rd_addr_full;
  wire memory_xactor_crg_rd_addr_full_D_IN, memory_xactor_crg_rd_addr_full_EN;

  // register memory_xactor_crg_rd_data_full
  reg memory_xactor_crg_rd_data_full;
  wire memory_xactor_crg_rd_data_full_D_IN, memory_xactor_crg_rd_data_full_EN;

  // register memory_xactor_crg_wr_addr_full
  reg memory_xactor_crg_wr_addr_full;
  wire memory_xactor_crg_wr_addr_full_D_IN, memory_xactor_crg_wr_addr_full_EN;

  // register memory_xactor_crg_wr_data_full
  reg memory_xactor_crg_wr_data_full;
  wire memory_xactor_crg_wr_data_full_D_IN, memory_xactor_crg_wr_data_full_EN;

  // register memory_xactor_crg_wr_resp_full
  reg memory_xactor_crg_wr_resp_full;
  wire memory_xactor_crg_wr_resp_full_D_IN, memory_xactor_crg_wr_resp_full_EN;

  // register memory_xactor_rg_rd_addr
  reg [61 : 0] memory_xactor_rg_rd_addr;
  wire [61 : 0] memory_xactor_rg_rd_addr_D_IN;
  wire memory_xactor_rg_rd_addr_EN;

  // register memory_xactor_rg_rd_data
  reg [35 : 0] memory_xactor_rg_rd_data;
  wire [35 : 0] memory_xactor_rg_rd_data_D_IN;
  wire memory_xactor_rg_rd_data_EN;

  // register memory_xactor_rg_wr_addr
  reg [61 : 0] memory_xactor_rg_wr_addr;
  wire [61 : 0] memory_xactor_rg_wr_addr_D_IN;
  wire memory_xactor_rg_wr_addr_EN;

  // register memory_xactor_rg_wr_data
  reg [36 : 0] memory_xactor_rg_wr_data;
  wire [36 : 0] memory_xactor_rg_wr_data_D_IN;
  wire memory_xactor_rg_wr_data_EN;

  // register memory_xactor_rg_wr_resp
  reg [2 : 0] memory_xactor_rg_wr_resp;
  wire [2 : 0] memory_xactor_rg_wr_resp_D_IN;
  wire memory_xactor_rg_wr_resp_EN;

  // register rg_burst_count
  reg [7 : 0] rg_burst_count;
  wire [7 : 0] rg_burst_count_D_IN;
  wire rg_burst_count_EN;

  // register rg_read_line_req
  reg [62 : 0] rg_read_line_req;
  wire [62 : 0] rg_read_line_req_D_IN;
  wire rg_read_line_req_EN;

  // register rg_shift_amount
  reg [8 : 0] rg_shift_amount;
  wire [8 : 0] rg_shift_amount_D_IN;
  wire rg_shift_amount_EN;

  // register wr_write_req
  reg [32 : 0] wr_write_req;
  wire [32 : 0] wr_write_req_D_IN;
  wire wr_write_req_EN;

  // ports of submodule dmem
  wire [555 : 0] dmem_mv_write_mem_req_rd;
  wire [70 : 0] dmem_put_core_req_put;
  wire [43 : 0] dmem_get_read_mem_req_get;
  wire [39 : 0] dmem_get_core_resp_get;
  wire [33 : 0] dmem_put_read_mem_resp_put;
  wire [12 : 0] dmem_mv_dcache_perf_counters;
  wire [1 : 0] dmem_ma_curr_priv_c;
  wire dmem_EN_get_core_resp_get,
       dmem_EN_get_read_mem_req_get,
       dmem_EN_ma_cache_enable,
       dmem_EN_ma_perform_store,
       dmem_EN_ma_write_mem_req_deq,
       dmem_EN_put_core_req_put,
       dmem_EN_put_read_mem_resp_put,
       dmem_EN_put_write_mem_resp_put,
       dmem_RDY_get_core_resp_get,
       dmem_RDY_get_read_mem_req_get,
       dmem_RDY_ma_perform_store,
       dmem_RDY_ma_write_mem_req_deq,
       dmem_RDY_mv_write_mem_req_rd,
       dmem_RDY_put_core_req_put,
       dmem_RDY_put_read_mem_resp_put,
       dmem_RDY_put_write_mem_resp_put,
       dmem_ma_cache_enable_c,
       dmem_ma_perform_store_currepoch,
       dmem_mv_cache_available,
       dmem_mv_cacheable_store,
       dmem_mv_commit_store_ready,
       dmem_mv_storebuffer_empty,
       dmem_put_write_mem_resp_put;

  // ports of submodule imem
  wire [43 : 0] imem_get_read_mem_req_get;
  wire [40 : 0] imem_get_core_resp_get;
  wire [34 : 0] imem_put_core_req_put;
  wire [33 : 0] imem_put_read_mem_resp_put;
  wire [4 : 0] imem_mv_icache_perf_counters;
  wire [1 : 0] imem_ma_curr_priv_c;
  wire imem_EN_get_core_resp_get,
       imem_EN_get_read_mem_req_get,
       imem_EN_ma_cache_enable,
       imem_EN_ma_curr_priv,
       imem_EN_put_core_req_put,
       imem_EN_put_read_mem_resp_put,
       imem_RDY_get_core_resp_get,
       imem_RDY_get_read_mem_req_get,
       imem_RDY_put_core_req_put,
       imem_RDY_put_read_mem_resp_put,
       imem_ma_cache_enable_c;

  // ports of submodule riscv
  wire [115 : 0] riscv_mv_pmp_addr;
  wire [103 : 0] riscv_dump_get;
  wire [70 : 0] riscv_memory_request_get;
  wire [63 : 0] riscv_ma_clint_mtime_c_mtime;
  wire [40 : 0] riscv_inst_response_put;
  wire [39 : 0] riscv_memory_response_put;
  wire [34 : 0] riscv_instr_req_get;
  wire [33 : 0] riscv_write_resp_r;
  wire [31 : 0] riscv_mv_pmp_cfg;
  wire [12 : 0] riscv_ma_dcache_counters_i;
  wire [4 : 0] riscv_ma_icache_counters_i;
  wire [2 : 0] riscv_mv_cacheenable;
  wire [1 : 0] riscv_mv_curr_priv;
  wire riscv_EN_dump_get,
       riscv_EN_inst_response_put,
       riscv_EN_instr_req_get,
       riscv_EN_ma_cache_ready,
       riscv_EN_ma_clint_msip,
       riscv_EN_ma_clint_mtime,
       riscv_EN_ma_clint_mtip,
       riscv_EN_ma_dcache_counters,
       riscv_EN_ma_icache_counters,
       riscv_EN_ma_set_meip,
       riscv_EN_memory_request_get,
       riscv_EN_memory_response_put,
       riscv_EN_write_resp,
       riscv_RDY_dump_get,
       riscv_RDY_inst_response_put,
       riscv_RDY_instr_req_get,
       riscv_RDY_memory_request_get,
       riscv_RDY_memory_response_put,
       riscv_cache_is_available_avail,
       riscv_initiate_store_fst,
       riscv_initiate_store_snd,
       riscv_ma_cache_ready_r,
       riscv_ma_clint_msip_intrpt,
       riscv_ma_clint_mtip_intrpt,
       riscv_ma_set_meip_ex_i,
       riscv_store_is_cached_c,
       riscv_storebuffer_empty_e;

  // rule scheduling signals
  wire CAN_FIRE_RL_core_req_mkConnectionGetPut,
       CAN_FIRE_RL_handle_dmem_line_write_resp,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionVtoAf,
       CAN_FIRE_RL_mkConnectionVtoAf_1,
       CAN_FIRE_RL_mkConnectionVtoAf_2,
       CAN_FIRE_RL_mkConnectionVtoAf_3,
       CAN_FIRE_RL_mkConnectionVtoAf_4,
       CAN_FIRE_RL_mkConnectionVtoAf_5,
       CAN_FIRE_RL_mkConnectionVtoAf_6,
       CAN_FIRE_RL_mkConnectionVtoAf_7,
       CAN_FIRE_RL_rl_dmem_burst_write_data,
       CAN_FIRE_RL_rl_handle_delayed_read,
       CAN_FIRE_RL_rl_handle_dmem_line_read_request,
       CAN_FIRE_RL_rl_handle_dmem_line_resp,
       CAN_FIRE_RL_rl_handle_dmem_write_request,
       CAN_FIRE_RL_rl_handle_imem_line_request,
       CAN_FIRE_RL_rl_handle_imem_line_resp,
       CAN_FIRE_RL_rl_initiate_store,
       CAN_FIRE_RL_rl_map_dmem_enable,
       CAN_FIRE_RL_rl_map_imem_enable,
       CAN_FIRE_io_dump_get,
       CAN_FIRE_master_d_m_arready,
       CAN_FIRE_master_d_m_awready,
       CAN_FIRE_master_d_m_bvalid,
       CAN_FIRE_master_d_m_rvalid,
       CAN_FIRE_master_d_m_wready,
       CAN_FIRE_master_i_m_arready,
       CAN_FIRE_master_i_m_awready,
       CAN_FIRE_master_i_m_bvalid,
       CAN_FIRE_master_i_m_rvalid,
       CAN_FIRE_master_i_m_wready,
       CAN_FIRE_sb_clint_msip,
       CAN_FIRE_sb_clint_mtime,
       CAN_FIRE_sb_clint_mtip,
       CAN_FIRE_sb_plic_meip,
       WILL_FIRE_RL_core_req_mkConnectionGetPut,
       WILL_FIRE_RL_handle_dmem_line_write_resp,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionVtoAf,
       WILL_FIRE_RL_mkConnectionVtoAf_1,
       WILL_FIRE_RL_mkConnectionVtoAf_2,
       WILL_FIRE_RL_mkConnectionVtoAf_3,
       WILL_FIRE_RL_mkConnectionVtoAf_4,
       WILL_FIRE_RL_mkConnectionVtoAf_5,
       WILL_FIRE_RL_mkConnectionVtoAf_6,
       WILL_FIRE_RL_mkConnectionVtoAf_7,
       WILL_FIRE_RL_rl_dmem_burst_write_data,
       WILL_FIRE_RL_rl_handle_delayed_read,
       WILL_FIRE_RL_rl_handle_dmem_line_read_request,
       WILL_FIRE_RL_rl_handle_dmem_line_resp,
       WILL_FIRE_RL_rl_handle_dmem_write_request,
       WILL_FIRE_RL_rl_handle_imem_line_request,
       WILL_FIRE_RL_rl_handle_imem_line_resp,
       WILL_FIRE_RL_rl_initiate_store,
       WILL_FIRE_RL_rl_map_dmem_enable,
       WILL_FIRE_RL_rl_map_imem_enable,
       WILL_FIRE_io_dump_get,
       WILL_FIRE_master_d_m_arready,
       WILL_FIRE_master_d_m_awready,
       WILL_FIRE_master_d_m_bvalid,
       WILL_FIRE_master_d_m_rvalid,
       WILL_FIRE_master_d_m_wready,
       WILL_FIRE_master_i_m_arready,
       WILL_FIRE_master_i_m_awready,
       WILL_FIRE_master_i_m_bvalid,
       WILL_FIRE_master_i_m_rvalid,
       WILL_FIRE_master_i_m_wready,
       WILL_FIRE_sb_clint_msip,
       WILL_FIRE_sb_clint_mtime,
       WILL_FIRE_sb_clint_mtip,
       WILL_FIRE_sb_plic_meip;

  // inputs to muxes for submodule ports
  wire [62 : 0] MUX_rg_read_line_req_write_1__VAL_1,
		MUX_rg_read_line_req_write_1__VAL_2;
  wire [61 : 0] MUX_memory_xactor_rg_rd_addr_write_1__VAL_1;
  wire [36 : 0] MUX_memory_xactor_rg_wr_data_write_1__VAL_1,
		MUX_memory_xactor_rg_wr_data_write_1__VAL_2;
  wire [32 : 0] MUX_wr_write_req_write_1__VAL_1,
		MUX_wr_write_req_write_1__VAL_2;
  wire [7 : 0] MUX_rg_burst_count_write_1__VAL_2;
  wire MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_1,
       MUX_rg_burst_count_write_1__SEL_1,
       MUX_rg_read_line_req_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d34;
  reg TASK_testplusargs___d35;
  reg TASK_testplusargs___d36;
  reg [63 : 0] v__h4038;
  reg TASK_testplusargs___d53;
  reg TASK_testplusargs___d54;
  reg TASK_testplusargs___d55;
  reg [63 : 0] v__h4269;
  reg TASK_testplusargs___d94;
  reg TASK_testplusargs___d95;
  reg TASK_testplusargs___d96;
  reg [63 : 0] v__h4890;
  reg TASK_testplusargs___d115;
  reg TASK_testplusargs___d116;
  reg TASK_testplusargs___d117;
  reg [63 : 0] v__h5177;
  reg TASK_testplusargs___d125;
  reg TASK_testplusargs___d126;
  reg TASK_testplusargs___d127;
  reg [63 : 0] v__h5409;
  reg TASK_testplusargs___d152;
  reg TASK_testplusargs___d153;
  reg TASK_testplusargs___d154;
  reg [63 : 0] v__h5695;
  reg TASK_testplusargs___d263;
  reg TASK_testplusargs___d264;
  reg TASK_testplusargs___d265;
  reg [63 : 0] v__h19880;
  reg TASK_testplusargs___d281;
  reg TASK_testplusargs___d282;
  reg TASK_testplusargs___d283;
  reg [63 : 0] v__h20057;
  reg TASK_testplusargs___d301;
  reg TASK_testplusargs___d302;
  reg TASK_testplusargs___d303;
  reg [63 : 0] v__h20576;
  reg TASK_testplusargs___d317;
  reg TASK_testplusargs___d318;
  reg TASK_testplusargs___d319;
  reg [63 : 0] v__h20832;
  reg IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d105;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d109;
  reg TASK_testplusargs_3_OR_TASK_testplusargs_4_AND_ETC___d60;
  reg TASK_testplusargs_3_OR_TASK_testplusargs_4_AND_ETC___d62;
  reg NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d159;
  reg TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d161;
  reg TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d270;
  reg TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d272;
  reg TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d274;
  reg TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d280;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d287;
  reg TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d288;
  // synopsys translate_on

  // remaining internal signals
  reg [511 : 0] _theResult___data__h6007;
  reg [3 : 0] write_strobe___2__h5992;
  wire [511 : 0] x__h20483, x__h6191;
  wire [31 : 0] wr_write_req_BITS_31_TO_0__q1;
  wire [8 : 0] x__h20357;
  wire [7 : 0] x__h20394;
  wire [3 : 0] _theResult___snd__h5994,
	       w_wstrb__h6186,
	       write_strobe___1__h19750;
  wire [2 : 0] value__h4082, x__h6031, x__h6071;
  wire IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85;

  // value method master_d_m_awvalid
  assign master_d_AWVALID = memory_xactor_crg_wr_addr_full ;

  // value method master_d_m_awid
  assign master_d_AWID = memory_xactor_rg_wr_addr[61] ;

  // value method master_d_m_awaddr
  assign master_d_AWADDR = memory_xactor_rg_wr_addr[60:29] ;

  // value method master_d_m_awlen
  assign master_d_AWLEN = memory_xactor_rg_wr_addr[28:21] ;

  // value method master_d_m_awsize
  assign master_d_AWSIZE = memory_xactor_rg_wr_addr[20:18] ;

  // value method master_d_m_awburst
  assign master_d_AWBURST = memory_xactor_rg_wr_addr[17:16] ;

  // value method master_d_m_awlock
  assign master_d_AWLOCK = memory_xactor_rg_wr_addr[15] ;

  // value method master_d_m_awcache
  assign master_d_AWCACHE = memory_xactor_rg_wr_addr[14:11] ;

  // value method master_d_m_awprot
  assign master_d_AWPROT = memory_xactor_rg_wr_addr[10:8] ;

  // value method master_d_m_awqos
  assign master_d_AWQOS = memory_xactor_rg_wr_addr[7:4] ;

  // value method master_d_m_awregion
  assign master_d_AWREGION = memory_xactor_rg_wr_addr[3:0] ;

  // action method master_d_m_awready
  assign CAN_FIRE_master_d_m_awready = 1'd1 ;
  assign WILL_FIRE_master_d_m_awready = 1'd1 ;

  // value method master_d_m_wvalid
  assign master_d_WVALID = memory_xactor_crg_wr_data_full ;

  // value method master_d_m_wdata
  assign master_d_WDATA = memory_xactor_rg_wr_data[36:5] ;

  // value method master_d_m_wstrb
  assign master_d_WSTRB = memory_xactor_rg_wr_data[4:1] ;

  // value method master_d_m_wlast
  assign master_d_WLAST = memory_xactor_rg_wr_data[0] ;

  // action method master_d_m_wready
  assign CAN_FIRE_master_d_m_wready = 1'd1 ;
  assign WILL_FIRE_master_d_m_wready = 1'd1 ;

  // action method master_d_m_bvalid
  assign CAN_FIRE_master_d_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_bvalid = 1'd1 ;

  // value method master_d_m_bready
  assign master_d_BREADY = !memory_xactor_crg_wr_resp_full_port2__read ;

  // value method master_d_m_arvalid
  assign master_d_ARVALID = memory_xactor_crg_rd_addr_full ;

  // value method master_d_m_arid
  assign master_d_ARID = memory_xactor_rg_rd_addr[61] ;

  // value method master_d_m_araddr
  assign master_d_ARADDR = memory_xactor_rg_rd_addr[60:29] ;

  // value method master_d_m_arlen
  assign master_d_ARLEN = memory_xactor_rg_rd_addr[28:21] ;

  // value method master_d_m_arsize
  assign master_d_ARSIZE = memory_xactor_rg_rd_addr[20:18] ;

  // value method master_d_m_arburst
  assign master_d_ARBURST = memory_xactor_rg_rd_addr[17:16] ;

  // value method master_d_m_arlock
  assign master_d_ARLOCK = memory_xactor_rg_rd_addr[15] ;

  // value method master_d_m_arcache
  assign master_d_ARCACHE = memory_xactor_rg_rd_addr[14:11] ;

  // value method master_d_m_arprot
  assign master_d_ARPROT = memory_xactor_rg_rd_addr[10:8] ;

  // value method master_d_m_arqos
  assign master_d_ARQOS = memory_xactor_rg_rd_addr[7:4] ;

  // value method master_d_m_arregion
  assign master_d_ARREGION = memory_xactor_rg_rd_addr[3:0] ;

  // action method master_d_m_arready
  assign CAN_FIRE_master_d_m_arready = 1'd1 ;
  assign WILL_FIRE_master_d_m_arready = 1'd1 ;

  // action method master_d_m_rvalid
  assign CAN_FIRE_master_d_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_d_m_rvalid = 1'd1 ;

  // value method master_d_m_rready
  assign master_d_RREADY = !memory_xactor_crg_rd_data_full_port2__read ;

  // value method master_i_m_awvalid
  assign master_i_AWVALID = fetch_xactor_crg_wr_addr_full ;

  // value method master_i_m_awid
  assign master_i_AWID = fetch_xactor_rg_wr_addr[61] ;

  // value method master_i_m_awaddr
  assign master_i_AWADDR = fetch_xactor_rg_wr_addr[60:29] ;

  // value method master_i_m_awlen
  assign master_i_AWLEN = fetch_xactor_rg_wr_addr[28:21] ;

  // value method master_i_m_awsize
  assign master_i_AWSIZE = fetch_xactor_rg_wr_addr[20:18] ;

  // value method master_i_m_awburst
  assign master_i_AWBURST = fetch_xactor_rg_wr_addr[17:16] ;

  // value method master_i_m_awlock
  assign master_i_AWLOCK = fetch_xactor_rg_wr_addr[15] ;

  // value method master_i_m_awcache
  assign master_i_AWCACHE = fetch_xactor_rg_wr_addr[14:11] ;

  // value method master_i_m_awprot
  assign master_i_AWPROT = fetch_xactor_rg_wr_addr[10:8] ;

  // value method master_i_m_awqos
  assign master_i_AWQOS = fetch_xactor_rg_wr_addr[7:4] ;

  // value method master_i_m_awregion
  assign master_i_AWREGION = fetch_xactor_rg_wr_addr[3:0] ;

  // action method master_i_m_awready
  assign CAN_FIRE_master_i_m_awready = 1'd1 ;
  assign WILL_FIRE_master_i_m_awready = 1'd1 ;

  // value method master_i_m_wvalid
  assign master_i_WVALID = fetch_xactor_crg_wr_data_full ;

  // value method master_i_m_wdata
  assign master_i_WDATA = fetch_xactor_rg_wr_data[36:5] ;

  // value method master_i_m_wstrb
  assign master_i_WSTRB = fetch_xactor_rg_wr_data[4:1] ;

  // value method master_i_m_wlast
  assign master_i_WLAST = fetch_xactor_rg_wr_data[0] ;

  // action method master_i_m_wready
  assign CAN_FIRE_master_i_m_wready = 1'd1 ;
  assign WILL_FIRE_master_i_m_wready = 1'd1 ;

  // action method master_i_m_bvalid
  assign CAN_FIRE_master_i_m_bvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_bvalid = 1'd1 ;

  // value method master_i_m_bready
  assign master_i_BREADY = !fetch_xactor_crg_wr_resp_full ;

  // value method master_i_m_arvalid
  assign master_i_ARVALID = fetch_xactor_crg_rd_addr_full ;

  // value method master_i_m_arid
  assign master_i_ARID = fetch_xactor_rg_rd_addr[61] ;

  // value method master_i_m_araddr
  assign master_i_ARADDR = fetch_xactor_rg_rd_addr[60:29] ;

  // value method master_i_m_arlen
  assign master_i_ARLEN = fetch_xactor_rg_rd_addr[28:21] ;

  // value method master_i_m_arsize
  assign master_i_ARSIZE = fetch_xactor_rg_rd_addr[20:18] ;

  // value method master_i_m_arburst
  assign master_i_ARBURST = fetch_xactor_rg_rd_addr[17:16] ;

  // value method master_i_m_arlock
  assign master_i_ARLOCK = fetch_xactor_rg_rd_addr[15] ;

  // value method master_i_m_arcache
  assign master_i_ARCACHE = fetch_xactor_rg_rd_addr[14:11] ;

  // value method master_i_m_arprot
  assign master_i_ARPROT = fetch_xactor_rg_rd_addr[10:8] ;

  // value method master_i_m_arqos
  assign master_i_ARQOS = fetch_xactor_rg_rd_addr[7:4] ;

  // value method master_i_m_arregion
  assign master_i_ARREGION = fetch_xactor_rg_rd_addr[3:0] ;

  // action method master_i_m_arready
  assign CAN_FIRE_master_i_m_arready = 1'd1 ;
  assign WILL_FIRE_master_i_m_arready = 1'd1 ;

  // action method master_i_m_rvalid
  assign CAN_FIRE_master_i_m_rvalid = 1'd1 ;
  assign WILL_FIRE_master_i_m_rvalid = 1'd1 ;

  // value method master_i_m_rready
  assign master_i_RREADY = !fetch_xactor_crg_rd_data_full_port2__read ;

  // action method sb_clint_msip
  assign RDY_sb_clint_msip = 1'd1 ;
  assign CAN_FIRE_sb_clint_msip = 1'd1 ;
  assign WILL_FIRE_sb_clint_msip = EN_sb_clint_msip ;

  // action method sb_clint_mtip
  assign RDY_sb_clint_mtip = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtip = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtip = EN_sb_clint_mtip ;

  // action method sb_clint_mtime
  assign RDY_sb_clint_mtime = 1'd1 ;
  assign CAN_FIRE_sb_clint_mtime = 1'd1 ;
  assign WILL_FIRE_sb_clint_mtime = EN_sb_clint_mtime ;

  // action method sb_plic_meip
  assign RDY_sb_plic_meip = 1'd1 ;
  assign CAN_FIRE_sb_plic_meip = 1'd1 ;
  assign WILL_FIRE_sb_plic_meip = EN_sb_plic_meip ;

  // actionvalue method io_dump_get
  assign io_dump_get = riscv_dump_get ;
  assign RDY_io_dump_get = riscv_RDY_dump_get ;
  assign CAN_FIRE_io_dump_get = riscv_RDY_dump_get ;
  assign WILL_FIRE_io_dump_get = EN_io_dump_get ;

  // submodule dmem
  mkdmem #(.id(hartid)) dmem(.pmp_cfg_0(riscv_mv_pmp_cfg[7:0]),
			     .pmp_cfg_1(riscv_mv_pmp_cfg[15:8]),
			     .pmp_cfg_2(riscv_mv_pmp_cfg[23:16]),
			     .pmp_cfg_3(riscv_mv_pmp_cfg[31:24]),
			     .pmp_addr_0(riscv_mv_pmp_addr[28:0]),
			     .pmp_addr_1(riscv_mv_pmp_addr[57:29]),
			     .pmp_addr_2(riscv_mv_pmp_addr[86:58]),
			     .pmp_addr_3(riscv_mv_pmp_addr[115:87]),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .ma_cache_enable_c(dmem_ma_cache_enable_c),
			     .ma_curr_priv_c(dmem_ma_curr_priv_c),
			     .ma_perform_store_currepoch(dmem_ma_perform_store_currepoch),
			     .put_core_req_put(dmem_put_core_req_put),
			     .put_read_mem_resp_put(dmem_put_read_mem_resp_put),
			     .put_write_mem_resp_put(dmem_put_write_mem_resp_put),
			     .EN_put_core_req_put(dmem_EN_put_core_req_put),
			     .EN_get_core_resp_get(dmem_EN_get_core_resp_get),
			     .EN_ma_perform_store(dmem_EN_ma_perform_store),
			     .EN_put_write_mem_resp_put(dmem_EN_put_write_mem_resp_put),
			     .EN_ma_write_mem_req_deq(dmem_EN_ma_write_mem_req_deq),
			     .EN_ma_cache_enable(dmem_EN_ma_cache_enable),
			     .EN_get_read_mem_req_get(dmem_EN_get_read_mem_req_get),
			     .EN_put_read_mem_resp_put(dmem_EN_put_read_mem_resp_put),
			     .RDY_put_core_req_put(dmem_RDY_put_core_req_put),
			     .get_core_resp_get(dmem_get_core_resp_get),
			     .RDY_get_core_resp_get(dmem_RDY_get_core_resp_get),
			     .mv_storebuffer_empty(dmem_mv_storebuffer_empty),
			     .RDY_mv_storebuffer_empty(),
			     .RDY_ma_perform_store(dmem_RDY_ma_perform_store),
			     .mv_write_mem_req_rd(dmem_mv_write_mem_req_rd),
			     .RDY_mv_write_mem_req_rd(dmem_RDY_mv_write_mem_req_rd),
			     .RDY_put_write_mem_resp_put(dmem_RDY_put_write_mem_resp_put),
			     .RDY_ma_write_mem_req_deq(dmem_RDY_ma_write_mem_req_deq),
			     .RDY_ma_cache_enable(),
			     .get_read_mem_req_get(dmem_get_read_mem_req_get),
			     .RDY_get_read_mem_req_get(dmem_RDY_get_read_mem_req_get),
			     .RDY_put_read_mem_resp_put(dmem_RDY_put_read_mem_resp_put),
			     .mv_cacheable_store(dmem_mv_cacheable_store),
			     .RDY_mv_cacheable_store(),
			     .mv_cache_available(dmem_mv_cache_available),
			     .RDY_mv_cache_available(),
			     .mv_commit_store_ready(dmem_mv_commit_store_ready),
			     .RDY_mv_commit_store_ready(),
			     .mv_dcache_perf_counters(dmem_mv_dcache_perf_counters),
			     .RDY_mv_dcache_perf_counters());

  // submodule imem
  mkimem #(.id(hartid)) imem(.pmp_cfg_0(riscv_mv_pmp_cfg[7:0]),
			     .pmp_cfg_1(riscv_mv_pmp_cfg[15:8]),
			     .pmp_cfg_2(riscv_mv_pmp_cfg[23:16]),
			     .pmp_cfg_3(riscv_mv_pmp_cfg[31:24]),
			     .pmp_addr_0(riscv_mv_pmp_addr[28:0]),
			     .pmp_addr_1(riscv_mv_pmp_addr[57:29]),
			     .pmp_addr_2(riscv_mv_pmp_addr[86:58]),
			     .pmp_addr_3(riscv_mv_pmp_addr[115:87]),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .ma_cache_enable_c(imem_ma_cache_enable_c),
			     .ma_curr_priv_c(imem_ma_curr_priv_c),
			     .put_core_req_put(imem_put_core_req_put),
			     .put_read_mem_resp_put(imem_put_read_mem_resp_put),
			     .EN_put_core_req_put(imem_EN_put_core_req_put),
			     .EN_get_core_resp_get(imem_EN_get_core_resp_get),
			     .EN_ma_cache_enable(imem_EN_ma_cache_enable),
			     .EN_get_read_mem_req_get(imem_EN_get_read_mem_req_get),
			     .EN_put_read_mem_resp_put(imem_EN_put_read_mem_resp_put),
			     .EN_ma_curr_priv(imem_EN_ma_curr_priv),
			     .RDY_put_core_req_put(imem_RDY_put_core_req_put),
			     .get_core_resp_get(imem_get_core_resp_get),
			     .RDY_get_core_resp_get(imem_RDY_get_core_resp_get),
			     .RDY_ma_cache_enable(),
			     .get_read_mem_req_get(imem_get_read_mem_req_get),
			     .RDY_get_read_mem_req_get(imem_RDY_get_read_mem_req_get),
			     .RDY_put_read_mem_resp_put(imem_RDY_put_read_mem_resp_put),
			     .mv_cache_available(),
			     .RDY_mv_cache_available(),
			     .RDY_ma_curr_priv(),
			     .mv_icache_perf_counters(imem_mv_icache_perf_counters),
			     .RDY_mv_icache_perf_counters());

  // submodule riscv
  mkriscv #(.hartid(hartid)) riscv(.resetpc(resetpc),
				   .CLK(CLK),
				   .RST_N(RST_N),
				   .cache_is_available_avail(riscv_cache_is_available_avail),
				   .inst_response_put(riscv_inst_response_put),
				   .ma_cache_ready_r(riscv_ma_cache_ready_r),
				   .ma_clint_msip_intrpt(riscv_ma_clint_msip_intrpt),
				   .ma_clint_mtime_c_mtime(riscv_ma_clint_mtime_c_mtime),
				   .ma_clint_mtip_intrpt(riscv_ma_clint_mtip_intrpt),
				   .ma_dcache_counters_i(riscv_ma_dcache_counters_i),
				   .ma_icache_counters_i(riscv_ma_icache_counters_i),
				   .ma_set_meip_ex_i(riscv_ma_set_meip_ex_i),
				   .memory_response_put(riscv_memory_response_put),
				   .store_is_cached_c(riscv_store_is_cached_c),
				   .storebuffer_empty_e(riscv_storebuffer_empty_e),
				   .write_resp_r(riscv_write_resp_r),
				   .EN_instr_req_get(riscv_EN_instr_req_get),
				   .EN_inst_response_put(riscv_EN_inst_response_put),
				   .EN_memory_request_get(riscv_EN_memory_request_get),
				   .EN_memory_response_put(riscv_EN_memory_response_put),
				   .EN_write_resp(riscv_EN_write_resp),
				   .EN_ma_cache_ready(riscv_EN_ma_cache_ready),
				   .EN_ma_clint_msip(riscv_EN_ma_clint_msip),
				   .EN_ma_clint_mtip(riscv_EN_ma_clint_mtip),
				   .EN_ma_clint_mtime(riscv_EN_ma_clint_mtime),
				   .EN_ma_set_meip(riscv_EN_ma_set_meip),
				   .EN_dump_get(riscv_EN_dump_get),
				   .EN_ma_icache_counters(riscv_EN_ma_icache_counters),
				   .EN_ma_dcache_counters(riscv_EN_ma_dcache_counters),
				   .instr_req_get(riscv_instr_req_get),
				   .RDY_instr_req_get(riscv_RDY_instr_req_get),
				   .RDY_inst_response_put(riscv_RDY_inst_response_put),
				   .memory_request_get(riscv_memory_request_get),
				   .RDY_memory_request_get(riscv_RDY_memory_request_get),
				   .RDY_memory_response_put(riscv_RDY_memory_response_put),
				   .initiate_store_fst(riscv_initiate_store_fst),
				   .RDY_initiate_store_fst(),
				   .initiate_store_snd(riscv_initiate_store_snd),
				   .RDY_initiate_store_snd(),
				   .RDY_write_resp(),
				   .RDY_ma_cache_ready(),
				   .RDY_ma_clint_msip(),
				   .RDY_ma_clint_mtip(),
				   .RDY_ma_clint_mtime(),
				   .RDY_ma_set_meip(),
				   .dump_get(riscv_dump_get),
				   .RDY_dump_get(riscv_RDY_dump_get),
				   .mv_csr_mstatus(),
				   .RDY_mv_csr_mstatus(),
				   .mv_cacheenable(riscv_mv_cacheenable),
				   .RDY_mv_cacheenable(),
				   .mv_curr_priv(riscv_mv_curr_priv),
				   .RDY_mv_curr_priv(),
				   .mv_pmp_cfg(riscv_mv_pmp_cfg),
				   .RDY_mv_pmp_cfg(),
				   .mv_pmp_addr(riscv_mv_pmp_addr),
				   .RDY_mv_pmp_addr(),
				   .RDY_ma_icache_counters(),
				   .RDY_ma_dcache_counters());

  // rule RL_mkConnectionVtoAf
  assign CAN_FIRE_RL_mkConnectionVtoAf = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf = 1'd1 ;

  // rule RL_mkConnectionVtoAf_1
  assign CAN_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_1 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_2
  assign CAN_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_2 = 1'd1 ;

  // rule RL_mkConnectionVtoAf_3
  assign CAN_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_3 = 1'd1 ;

  // rule RL_rl_handle_imem_line_request
  assign CAN_FIRE_RL_rl_handle_imem_line_request =
	     !fetch_xactor_crg_rd_addr_full_port2__read &&
	     imem_RDY_get_read_mem_req_get ;
  assign WILL_FIRE_RL_rl_handle_imem_line_request =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;

  // rule RL_rl_handle_imem_line_resp
  assign CAN_FIRE_RL_rl_handle_imem_line_resp =
	     imem_RDY_put_read_mem_resp_put && fetch_xactor_crg_rd_data_full ;
  assign WILL_FIRE_RL_rl_handle_imem_line_resp =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;

  // rule RL_rl_map_imem_enable
  assign CAN_FIRE_RL_rl_map_imem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_map_imem_enable = 1'd1 ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     riscv_RDY_instr_req_get && imem_RDY_put_core_req_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_rl_map_dmem_enable
  assign CAN_FIRE_RL_rl_map_dmem_enable = 1'd1 ;
  assign WILL_FIRE_RL_rl_map_dmem_enable = 1'd1 ;

  // rule RL_rl_handle_dmem_line_read_request
  assign CAN_FIRE_RL_rl_handle_dmem_line_read_request =
	     dmem_RDY_get_read_mem_req_get &&
	     !memory_xactor_crg_rd_addr_full_port2__read &&
	     !rg_read_line_req[62] ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_read_request =
	     CAN_FIRE_RL_rl_handle_dmem_line_read_request ;

  // rule RL_rl_handle_delayed_read
  assign CAN_FIRE_RL_rl_handle_delayed_read =
	     !memory_xactor_crg_rd_addr_full_port2__read &&
	     rg_read_line_req[62] &&
	     !wr_write_req[32] ;
  assign WILL_FIRE_RL_rl_handle_delayed_read =
	     CAN_FIRE_RL_rl_handle_delayed_read ;

  // rule RL_rl_handle_dmem_line_resp
  assign CAN_FIRE_RL_rl_handle_dmem_line_resp =
	     dmem_RDY_put_read_mem_resp_put &&
	     memory_xactor_crg_rd_data_full ;
  assign WILL_FIRE_RL_rl_handle_dmem_line_resp =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;

  // rule RL_rl_handle_dmem_write_request
  assign CAN_FIRE_RL_rl_handle_dmem_write_request =
	     !memory_xactor_crg_wr_addr_full_port2__read &&
	     !memory_xactor_crg_wr_data_full_port2__read &&
	     dmem_RDY_mv_write_mem_req_rd &&
	     dmem_RDY_ma_write_mem_req_deq &&
	     rg_burst_count == 8'd0 ;
  assign WILL_FIRE_RL_rl_handle_dmem_write_request =
	     CAN_FIRE_RL_rl_handle_dmem_write_request ;

  // rule RL_rl_dmem_burst_write_data
  assign CAN_FIRE_RL_rl_dmem_burst_write_data =
	     !memory_xactor_crg_wr_data_full_port2__read &&
	     dmem_RDY_mv_write_mem_req_rd &&
	     dmem_RDY_ma_write_mem_req_deq &&
	     rg_burst_count != 8'd0 ;
  assign WILL_FIRE_RL_rl_dmem_burst_write_data =
	     CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // rule RL_handle_dmem_line_write_resp
  assign CAN_FIRE_RL_handle_dmem_line_write_resp =
	     memory_xactor_crg_wr_resp_full &&
	     dmem_RDY_put_write_mem_resp_put ;
  assign WILL_FIRE_RL_handle_dmem_line_write_resp =
	     CAN_FIRE_RL_handle_dmem_line_write_resp ;

  // rule RL_mkConnectionVtoAf_4
  assign CAN_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_4 = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     riscv_RDY_inst_response_put && imem_RDY_get_core_resp_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionVtoAf_5
  assign CAN_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_5 = 1'd1 ;

  // rule RL_rl_initiate_store
  assign CAN_FIRE_RL_rl_initiate_store =
	     dmem_RDY_ma_perform_store && riscv_initiate_store_snd ;
  assign WILL_FIRE_RL_rl_initiate_store = CAN_FIRE_RL_rl_initiate_store ;

  // rule RL_mkConnectionVtoAf_6
  assign CAN_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_6 = 1'd1 ;

  // rule RL_core_req_mkConnectionGetPut
  assign CAN_FIRE_RL_core_req_mkConnectionGetPut =
	     riscv_RDY_memory_request_get && dmem_RDY_put_core_req_put ;
  assign WILL_FIRE_RL_core_req_mkConnectionGetPut =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     riscv_RDY_memory_response_put && dmem_RDY_get_core_resp_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionVtoAf_7
  assign CAN_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;
  assign WILL_FIRE_RL_mkConnectionVtoAf_7 = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85) ;
  assign MUX_rg_burst_count_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] != 8'd0 ;
  assign MUX_rg_read_line_req_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85 ;
  assign MUX_memory_xactor_rg_rd_addr_write_1__VAL_1 =
	     { dmem_get_read_mem_req_get[0],
	       dmem_get_read_mem_req_get[43:1],
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       x__h6071,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign MUX_memory_xactor_rg_wr_data_write_1__VAL_1 =
	     { x__h6191[31:0],
	       w_wstrb__h6186,
	       dmem_mv_write_mem_req_rd[11:4] == 8'd0 } ;
  assign MUX_memory_xactor_rg_wr_data_write_1__VAL_2 =
	     { x__h20483[31:0], 4'd15, rg_burst_count == 8'd15 } ;
  assign MUX_rg_burst_count_write_1__VAL_2 =
	     (rg_burst_count == 8'd15) ? 8'd0 : x__h20394 ;
  assign MUX_rg_read_line_req_write_1__VAL_1 =
	     { 1'd1,
	       dmem_get_read_mem_req_get[0],
	       dmem_get_read_mem_req_get[43:1],
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       x__h6071,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign MUX_rg_read_line_req_write_1__VAL_2 =
	     { 1'd0,
	       62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_wr_write_req_write_1__VAL_1 =
	     { 1'd1, dmem_mv_write_mem_req_rd[555:524] } ;
  assign MUX_wr_write_req_write_1__VAL_2 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;

  // inlined wires
  assign fetch_xactor_crg_wr_addr_full_EN_port1__write =
	     fetch_xactor_crg_wr_addr_full && master_i_AWREADY ;
  assign fetch_xactor_crg_wr_addr_full_port2__read =
	     !fetch_xactor_crg_wr_addr_full_EN_port1__write &&
	     fetch_xactor_crg_wr_addr_full ;
  assign fetch_xactor_crg_wr_data_full_EN_port1__write =
	     fetch_xactor_crg_wr_data_full && master_i_WREADY ;
  assign fetch_xactor_crg_wr_data_full_port2__read =
	     !fetch_xactor_crg_wr_data_full_EN_port1__write &&
	     fetch_xactor_crg_wr_data_full ;
  assign fetch_xactor_crg_wr_resp_full_EN_port2__write =
	     master_i_BVALID && !fetch_xactor_crg_wr_resp_full ;
  assign fetch_xactor_crg_wr_resp_full_port3__read =
	     fetch_xactor_crg_wr_resp_full_EN_port2__write ||
	     fetch_xactor_crg_wr_resp_full ;
  assign fetch_xactor_crg_rd_addr_full_EN_port1__write =
	     fetch_xactor_crg_rd_addr_full && master_i_ARREADY ;
  assign fetch_xactor_crg_rd_addr_full_port2__read =
	     !fetch_xactor_crg_rd_addr_full_EN_port1__write &&
	     fetch_xactor_crg_rd_addr_full ;
  assign fetch_xactor_crg_rd_addr_full_port3__read =
	     CAN_FIRE_RL_rl_handle_imem_line_request ||
	     fetch_xactor_crg_rd_addr_full_port2__read ;
  assign fetch_xactor_crg_rd_data_full_port2__read =
	     !CAN_FIRE_RL_rl_handle_imem_line_resp &&
	     fetch_xactor_crg_rd_data_full ;
  assign fetch_xactor_crg_rd_data_full_EN_port2__write =
	     master_i_RVALID && !fetch_xactor_crg_rd_data_full_port2__read ;
  assign fetch_xactor_crg_rd_data_full_port3__read =
	     fetch_xactor_crg_rd_data_full_EN_port2__write ||
	     fetch_xactor_crg_rd_data_full_port2__read ;
  assign memory_xactor_crg_wr_addr_full_EN_port1__write =
	     memory_xactor_crg_wr_addr_full && master_d_AWREADY ;
  assign memory_xactor_crg_wr_addr_full_port2__read =
	     !memory_xactor_crg_wr_addr_full_EN_port1__write &&
	     memory_xactor_crg_wr_addr_full ;
  assign memory_xactor_crg_wr_addr_full_port3__read =
	     CAN_FIRE_RL_rl_handle_dmem_write_request ||
	     memory_xactor_crg_wr_addr_full_port2__read ;
  assign memory_xactor_crg_wr_data_full_EN_port1__write =
	     memory_xactor_crg_wr_data_full && master_d_WREADY ;
  assign memory_xactor_crg_wr_data_full_port2__read =
	     !memory_xactor_crg_wr_data_full_EN_port1__write &&
	     memory_xactor_crg_wr_data_full ;
  assign memory_xactor_crg_wr_data_full_EN_port2__write =
	     WILL_FIRE_RL_rl_dmem_burst_write_data ||
	     WILL_FIRE_RL_rl_handle_dmem_write_request ;
  assign memory_xactor_crg_wr_data_full_port3__read =
	     memory_xactor_crg_wr_data_full_EN_port2__write ||
	     memory_xactor_crg_wr_data_full_port2__read ;
  assign memory_xactor_crg_wr_resp_full_port2__read =
	     !CAN_FIRE_RL_handle_dmem_line_write_resp &&
	     memory_xactor_crg_wr_resp_full ;
  assign memory_xactor_crg_wr_resp_full_EN_port2__write =
	     master_d_BVALID && !memory_xactor_crg_wr_resp_full_port2__read ;
  assign memory_xactor_crg_wr_resp_full_port3__read =
	     memory_xactor_crg_wr_resp_full_EN_port2__write ||
	     memory_xactor_crg_wr_resp_full_port2__read ;
  assign memory_xactor_crg_rd_addr_full_EN_port1__write =
	     memory_xactor_crg_rd_addr_full && master_d_ARREADY ;
  assign memory_xactor_crg_rd_addr_full_port2__read =
	     !memory_xactor_crg_rd_addr_full_EN_port1__write &&
	     memory_xactor_crg_rd_addr_full ;
  assign memory_xactor_crg_rd_addr_full_EN_port2__write =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85) ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;
  assign memory_xactor_crg_rd_addr_full_port3__read =
	     memory_xactor_crg_rd_addr_full_EN_port2__write ?
	       1'd1 :
	       memory_xactor_crg_rd_addr_full_port2__read ;
  assign memory_xactor_crg_rd_data_full_port2__read =
	     !CAN_FIRE_RL_rl_handle_dmem_line_resp &&
	     memory_xactor_crg_rd_data_full ;
  assign memory_xactor_crg_rd_data_full_EN_port2__write =
	     master_d_RVALID && !memory_xactor_crg_rd_data_full_port2__read ;
  assign memory_xactor_crg_rd_data_full_port3__read =
	     memory_xactor_crg_rd_data_full_EN_port2__write ||
	     memory_xactor_crg_rd_data_full_port2__read ;

  // register fetch_xactor_crg_rd_addr_full
  assign fetch_xactor_crg_rd_addr_full_D_IN =
	     fetch_xactor_crg_rd_addr_full_port3__read ;
  assign fetch_xactor_crg_rd_addr_full_EN = 1'b1 ;

  // register fetch_xactor_crg_rd_data_full
  assign fetch_xactor_crg_rd_data_full_D_IN =
	     fetch_xactor_crg_rd_data_full_port3__read ;
  assign fetch_xactor_crg_rd_data_full_EN = 1'b1 ;

  // register fetch_xactor_crg_wr_addr_full
  assign fetch_xactor_crg_wr_addr_full_D_IN =
	     fetch_xactor_crg_wr_addr_full_port2__read ;
  assign fetch_xactor_crg_wr_addr_full_EN = 1'b1 ;

  // register fetch_xactor_crg_wr_data_full
  assign fetch_xactor_crg_wr_data_full_D_IN =
	     fetch_xactor_crg_wr_data_full_port2__read ;
  assign fetch_xactor_crg_wr_data_full_EN = 1'b1 ;

  // register fetch_xactor_crg_wr_resp_full
  assign fetch_xactor_crg_wr_resp_full_D_IN =
	     fetch_xactor_crg_wr_resp_full_port3__read ;
  assign fetch_xactor_crg_wr_resp_full_EN = 1'b1 ;

  // register fetch_xactor_rg_rd_addr
  assign fetch_xactor_rg_rd_addr_D_IN =
	     { imem_get_read_mem_req_get[0],
	       imem_get_read_mem_req_get[43:1],
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       value__h4082,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign fetch_xactor_rg_rd_addr_EN =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;

  // register fetch_xactor_rg_rd_data
  assign fetch_xactor_rg_rd_data_D_IN =
	     { master_i_RID,
	       master_i_RDATA,
	       master_i_RRESP,
	       master_i_RLAST } ;
  assign fetch_xactor_rg_rd_data_EN =
	     master_i_RVALID && !fetch_xactor_crg_rd_data_full_port2__read ;

  // register fetch_xactor_rg_wr_addr
  assign fetch_xactor_rg_wr_addr_D_IN = 62'h0 ;
  assign fetch_xactor_rg_wr_addr_EN = 1'b0 ;

  // register fetch_xactor_rg_wr_data
  assign fetch_xactor_rg_wr_data_D_IN = 37'h0 ;
  assign fetch_xactor_rg_wr_data_EN = 1'b0 ;

  // register fetch_xactor_rg_wr_resp
  assign fetch_xactor_rg_wr_resp_D_IN = { master_i_BID, master_i_BRESP } ;
  assign fetch_xactor_rg_wr_resp_EN =
	     master_i_BVALID && !fetch_xactor_crg_wr_resp_full ;

  // register memory_xactor_crg_rd_addr_full
  assign memory_xactor_crg_rd_addr_full_D_IN =
	     memory_xactor_crg_rd_addr_full_port3__read ;
  assign memory_xactor_crg_rd_addr_full_EN = 1'b1 ;

  // register memory_xactor_crg_rd_data_full
  assign memory_xactor_crg_rd_data_full_D_IN =
	     memory_xactor_crg_rd_data_full_port3__read ;
  assign memory_xactor_crg_rd_data_full_EN = 1'b1 ;

  // register memory_xactor_crg_wr_addr_full
  assign memory_xactor_crg_wr_addr_full_D_IN =
	     memory_xactor_crg_wr_addr_full_port3__read ;
  assign memory_xactor_crg_wr_addr_full_EN = 1'b1 ;

  // register memory_xactor_crg_wr_data_full
  assign memory_xactor_crg_wr_data_full_D_IN =
	     memory_xactor_crg_wr_data_full_port3__read ;
  assign memory_xactor_crg_wr_data_full_EN = 1'b1 ;

  // register memory_xactor_crg_wr_resp_full
  assign memory_xactor_crg_wr_resp_full_D_IN =
	     memory_xactor_crg_wr_resp_full_port3__read ;
  assign memory_xactor_crg_wr_resp_full_EN = 1'b1 ;

  // register memory_xactor_rg_rd_addr
  assign memory_xactor_rg_rd_addr_D_IN =
	     MUX_memory_xactor_crg_rd_addr_full_port2__write_1__SEL_1 ?
	       MUX_memory_xactor_rg_rd_addr_write_1__VAL_1 :
	       rg_read_line_req[61:0] ;
  assign memory_xactor_rg_rd_addr_EN =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     (!wr_write_req[32] ||
	      !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85) ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;

  // register memory_xactor_rg_rd_data
  assign memory_xactor_rg_rd_data_D_IN =
	     { master_d_RID,
	       master_d_RDATA,
	       master_d_RRESP,
	       master_d_RLAST } ;
  assign memory_xactor_rg_rd_data_EN =
	     master_d_RVALID && !memory_xactor_crg_rd_data_full_port2__read ;

  // register memory_xactor_rg_wr_addr
  assign memory_xactor_rg_wr_addr_D_IN =
	     { dmem_mv_write_mem_req_rd[0],
	       dmem_mv_write_mem_req_rd[555:524],
	       dmem_mv_write_mem_req_rd[11:4],
	       x__h6031,
	       2'b10,
	       1'bx /* unspecified value */ ,
	       4'bxxxx /* unspecified value */ ,
	       x__h6071,
	       8'bxxxxxxxx /* unspecified value */  } ;
  assign memory_xactor_rg_wr_addr_EN =
	     CAN_FIRE_RL_rl_handle_dmem_write_request ;

  // register memory_xactor_rg_wr_data
  assign memory_xactor_rg_wr_data_D_IN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ?
	       MUX_memory_xactor_rg_wr_data_write_1__VAL_1 :
	       MUX_memory_xactor_rg_wr_data_write_1__VAL_2 ;
  assign memory_xactor_rg_wr_data_EN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;

  // register memory_xactor_rg_wr_resp
  assign memory_xactor_rg_wr_resp_D_IN = { master_d_BID, master_d_BRESP } ;
  assign memory_xactor_rg_wr_resp_EN =
	     master_d_BVALID && !memory_xactor_crg_wr_resp_full_port2__read ;

  // register rg_burst_count
  assign rg_burst_count_D_IN =
	     MUX_rg_burst_count_write_1__SEL_1 ?
	       x__h20394 :
	       MUX_rg_burst_count_write_1__VAL_2 ;
  assign rg_burst_count_EN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] != 8'd0 ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data ;

  // register rg_read_line_req
  assign rg_read_line_req_D_IN =
	     MUX_rg_read_line_req_write_1__SEL_1 ?
	       MUX_rg_read_line_req_write_1__VAL_1 :
	       MUX_rg_read_line_req_write_1__VAL_2 ;
  assign rg_read_line_req_EN =
	     WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	     wr_write_req[32] &&
	     IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85 ||
	     WILL_FIRE_RL_rl_handle_delayed_read ;

  // register rg_shift_amount
  assign rg_shift_amount_D_IN =
	     (rg_burst_count == 8'd15) ? 9'd32 : x__h20357 ;
  assign rg_shift_amount_EN = CAN_FIRE_RL_rl_dmem_burst_write_data ;

  // register wr_write_req
  assign wr_write_req_D_IN =
	     MUX_rg_burst_count_write_1__SEL_1 ?
	       MUX_wr_write_req_write_1__VAL_1 :
	       MUX_wr_write_req_write_1__VAL_2 ;
  assign wr_write_req_EN =
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] != 8'd0 ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data &&
	     rg_burst_count == 8'd15 ;

  // submodule dmem
  assign dmem_ma_cache_enable_c = riscv_mv_cacheenable[1] ;
  assign dmem_ma_curr_priv_c = riscv_mv_curr_priv ;
  assign dmem_ma_perform_store_currepoch = riscv_initiate_store_fst ;
  assign dmem_put_core_req_put = riscv_memory_request_get ;
  assign dmem_put_read_mem_resp_put =
	     { memory_xactor_rg_rd_data[34:3],
	       memory_xactor_rg_rd_data[0],
	       memory_xactor_rg_rd_data[2:1] != 2'b0 } ;
  assign dmem_put_write_mem_resp_put = memory_xactor_rg_wr_resp[1:0] != 2'b0 ;
  assign dmem_EN_put_core_req_put = CAN_FIRE_RL_core_req_mkConnectionGetPut ;
  assign dmem_EN_get_core_resp_get = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign dmem_EN_ma_perform_store = CAN_FIRE_RL_rl_initiate_store ;
  assign dmem_EN_put_write_mem_resp_put =
	     WILL_FIRE_RL_handle_dmem_line_write_resp &&
	     !memory_xactor_rg_wr_resp[2] ;
  assign dmem_EN_ma_write_mem_req_deq =
	     WILL_FIRE_RL_rl_handle_dmem_write_request &&
	     dmem_mv_write_mem_req_rd[11:4] == 8'd0 ||
	     WILL_FIRE_RL_rl_dmem_burst_write_data &&
	     rg_burst_count == 8'd15 ;
  assign dmem_EN_ma_cache_enable = 1'd1 ;
  assign dmem_EN_get_read_mem_req_get =
	     CAN_FIRE_RL_rl_handle_dmem_line_read_request ;
  assign dmem_EN_put_read_mem_resp_put =
	     CAN_FIRE_RL_rl_handle_dmem_line_resp ;

  // submodule imem
  assign imem_ma_cache_enable_c = riscv_mv_cacheenable[0] ;
  assign imem_ma_curr_priv_c = riscv_mv_curr_priv ;
  assign imem_put_core_req_put = riscv_instr_req_get ;
  assign imem_put_read_mem_resp_put =
	     { fetch_xactor_rg_rd_data[34:3],
	       fetch_xactor_rg_rd_data[0],
	       fetch_xactor_rg_rd_data[2:1] != 2'b0 } ;
  assign imem_EN_put_core_req_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign imem_EN_get_core_resp_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign imem_EN_ma_cache_enable = 1'd1 ;
  assign imem_EN_get_read_mem_req_get =
	     CAN_FIRE_RL_rl_handle_imem_line_request ;
  assign imem_EN_put_read_mem_resp_put =
	     CAN_FIRE_RL_rl_handle_imem_line_resp ;
  assign imem_EN_ma_curr_priv = 1'd1 ;

  // submodule riscv
  assign riscv_cache_is_available_avail = dmem_mv_cache_available ;
  assign riscv_inst_response_put = imem_get_core_resp_get ;
  assign riscv_ma_cache_ready_r = dmem_mv_commit_store_ready ;
  assign riscv_ma_clint_msip_intrpt = sb_clint_msip_m ;
  assign riscv_ma_clint_mtime_c_mtime = sb_clint_mtime_m ;
  assign riscv_ma_clint_mtip_intrpt = sb_clint_mtip_m ;
  assign riscv_ma_dcache_counters_i = dmem_mv_dcache_perf_counters ;
  assign riscv_ma_icache_counters_i = imem_mv_icache_perf_counters ;
  assign riscv_ma_set_meip_ex_i = sb_plic_meip_ex_i ;
  assign riscv_memory_response_put = dmem_get_core_resp_get ;
  assign riscv_store_is_cached_c = dmem_mv_cacheable_store ;
  assign riscv_storebuffer_empty_e = dmem_mv_storebuffer_empty ;
  assign riscv_write_resp_r =
	     { 1'd1,
	       memory_xactor_rg_wr_resp[1:0] != 2'b0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign riscv_EN_instr_req_get = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign riscv_EN_inst_response_put = CAN_FIRE_RL_mkConnectionGetPut ;
  assign riscv_EN_memory_request_get =
	     CAN_FIRE_RL_core_req_mkConnectionGetPut ;
  assign riscv_EN_memory_response_put = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign riscv_EN_write_resp =
	     WILL_FIRE_RL_handle_dmem_line_write_resp &&
	     memory_xactor_rg_wr_resp[2] ;
  assign riscv_EN_ma_cache_ready = 1'd1 ;
  assign riscv_EN_ma_clint_msip = EN_sb_clint_msip ;
  assign riscv_EN_ma_clint_mtip = EN_sb_clint_mtip ;
  assign riscv_EN_ma_clint_mtime = EN_sb_clint_mtime ;
  assign riscv_EN_ma_set_meip = EN_sb_plic_meip ;
  assign riscv_EN_dump_get = EN_io_dump_get ;
  assign riscv_EN_ma_icache_counters = 1'd1 ;
  assign riscv_EN_ma_dcache_counters = 1'd1 ;

  // remaining internal signals
  assign IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85 =
	     wr_write_req_BITS_31_TO_0__q1[31:20] ==
	     dmem_get_read_mem_req_get[43:32] ;
  assign _theResult___snd__h5994 =
	     (dmem_mv_write_mem_req_rd[3:1] == 3'd3) ?
	       write_strobe___2__h5992 :
	       write_strobe___1__h19750 ;
  assign value__h4082 = { 2'd2, riscv_mv_curr_priv[1] } ;
  assign w_wstrb__h6186 =
	     dmem_mv_write_mem_req_rd[0] ? _theResult___snd__h5994 : 4'd15 ;
  assign wr_write_req_BITS_31_TO_0__q1 = wr_write_req[31:0] ;
  assign write_strobe___1__h19750 =
	     write_strobe___2__h5992 << dmem_mv_write_mem_req_rd[525:524] ;
  assign x__h20357 = rg_shift_amount + 9'd32 ;
  assign x__h20394 = rg_burst_count + 8'd1 ;
  assign x__h20483 = dmem_mv_write_mem_req_rd[523:12] >> rg_shift_amount ;
  assign x__h6031 = { 1'd0, dmem_mv_write_mem_req_rd[2:1] } ;
  assign x__h6071 = { 2'd0, riscv_mv_curr_priv[1] } ;
  assign x__h6191 =
	     dmem_mv_write_mem_req_rd[0] ?
	       _theResult___data__h6007 :
	       dmem_mv_write_mem_req_rd[523:12] ;
  always@(dmem_mv_write_mem_req_rd)
  begin
    case (dmem_mv_write_mem_req_rd[3:1])
      3'd0: write_strobe___2__h5992 = 4'b0001;
      3'd1: write_strobe___2__h5992 = 4'b0011;
      default: write_strobe___2__h5992 = 4'hF;
    endcase
  end
  always@(dmem_mv_write_mem_req_rd)
  begin
    case (dmem_mv_write_mem_req_rd[3:1])
      3'd0: _theResult___data__h6007 = {64{dmem_mv_write_mem_req_rd[19:12]}};
      3'd1: _theResult___data__h6007 = {32{dmem_mv_write_mem_req_rd[27:12]}};
      3'd2: _theResult___data__h6007 = {16{dmem_mv_write_mem_req_rd[43:12]}};
      default: _theResult___data__h6007 = dmem_mv_write_mem_req_rd[523:12];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fetch_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	memory_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_burst_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_read_line_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      62'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	rg_shift_amount <= `BSV_ASSIGNMENT_DELAY 9'd32;
	wr_write_req <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (fetch_xactor_crg_rd_addr_full_EN)
	  fetch_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_rd_addr_full_D_IN;
	if (fetch_xactor_crg_rd_data_full_EN)
	  fetch_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_rd_data_full_D_IN;
	if (fetch_xactor_crg_wr_addr_full_EN)
	  fetch_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_wr_addr_full_D_IN;
	if (fetch_xactor_crg_wr_data_full_EN)
	  fetch_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_wr_data_full_D_IN;
	if (fetch_xactor_crg_wr_resp_full_EN)
	  fetch_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      fetch_xactor_crg_wr_resp_full_D_IN;
	if (memory_xactor_crg_rd_addr_full_EN)
	  memory_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_rd_addr_full_D_IN;
	if (memory_xactor_crg_rd_data_full_EN)
	  memory_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_rd_data_full_D_IN;
	if (memory_xactor_crg_wr_addr_full_EN)
	  memory_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_wr_addr_full_D_IN;
	if (memory_xactor_crg_wr_data_full_EN)
	  memory_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_wr_data_full_D_IN;
	if (memory_xactor_crg_wr_resp_full_EN)
	  memory_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      memory_xactor_crg_wr_resp_full_D_IN;
	if (rg_burst_count_EN)
	  rg_burst_count <= `BSV_ASSIGNMENT_DELAY rg_burst_count_D_IN;
	if (rg_read_line_req_EN)
	  rg_read_line_req <= `BSV_ASSIGNMENT_DELAY rg_read_line_req_D_IN;
	if (rg_shift_amount_EN)
	  rg_shift_amount <= `BSV_ASSIGNMENT_DELAY rg_shift_amount_D_IN;
	if (wr_write_req_EN)
	  wr_write_req <= `BSV_ASSIGNMENT_DELAY wr_write_req_D_IN;
      end
    if (fetch_xactor_rg_rd_addr_EN)
      fetch_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_rd_addr_D_IN;
    if (fetch_xactor_rg_rd_data_EN)
      fetch_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_rd_data_D_IN;
    if (fetch_xactor_rg_wr_addr_EN)
      fetch_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_wr_addr_D_IN;
    if (fetch_xactor_rg_wr_data_EN)
      fetch_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_wr_data_D_IN;
    if (fetch_xactor_rg_wr_resp_EN)
      fetch_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  fetch_xactor_rg_wr_resp_D_IN;
    if (memory_xactor_rg_rd_addr_EN)
      memory_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_rd_addr_D_IN;
    if (memory_xactor_rg_rd_data_EN)
      memory_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_rd_data_D_IN;
    if (memory_xactor_rg_wr_addr_EN)
      memory_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_wr_addr_D_IN;
    if (memory_xactor_rg_wr_data_EN)
      memory_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_wr_data_D_IN;
    if (memory_xactor_rg_wr_resp_EN)
      memory_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  memory_xactor_rg_wr_resp_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fetch_xactor_crg_rd_addr_full = 1'h0;
    fetch_xactor_crg_rd_data_full = 1'h0;
    fetch_xactor_crg_wr_addr_full = 1'h0;
    fetch_xactor_crg_wr_data_full = 1'h0;
    fetch_xactor_crg_wr_resp_full = 1'h0;
    fetch_xactor_rg_rd_addr = 62'h2AAAAAAAAAAAAAAA;
    fetch_xactor_rg_rd_data = 36'hAAAAAAAAA;
    fetch_xactor_rg_wr_addr = 62'h2AAAAAAAAAAAAAAA;
    fetch_xactor_rg_wr_data = 37'h0AAAAAAAAA;
    fetch_xactor_rg_wr_resp = 3'h2;
    memory_xactor_crg_rd_addr_full = 1'h0;
    memory_xactor_crg_rd_data_full = 1'h0;
    memory_xactor_crg_wr_addr_full = 1'h0;
    memory_xactor_crg_wr_data_full = 1'h0;
    memory_xactor_crg_wr_resp_full = 1'h0;
    memory_xactor_rg_rd_addr = 62'h2AAAAAAAAAAAAAAA;
    memory_xactor_rg_rd_data = 36'hAAAAAAAAA;
    memory_xactor_rg_wr_addr = 62'h2AAAAAAAAAAAAAAA;
    memory_xactor_rg_wr_data = 37'h0AAAAAAAAA;
    memory_xactor_rg_wr_resp = 3'h2;
    rg_burst_count = 8'hAA;
    rg_read_line_req = 63'h2AAAAAAAAAAAAAAA;
    rg_shift_amount = 9'h0AA;
    wr_write_req = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d34 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d35 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  TASK_testplusargs___d36 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request)
	begin
	  v__h4038 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("[%10d", v__h4038, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("[%2d]CORE : IMEM Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", imem_get_read_mem_req_get[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", imem_get_read_mem_req_get[43:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", imem_get_read_mem_req_get[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", imem_get_read_mem_req_get[3:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", 1'bx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", value__h4082);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("'h%h", 1'b0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_request &&
	  (TASK_testplusargs___d34 ||
	   TASK_testplusargs___d35 && TASK_testplusargs___d36))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d53 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d54 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  TASK_testplusargs___d55 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_3_OR_TASK_testplusargs_4_AND_ETC___d60 =
	(TASK_testplusargs___d53 ||
	 TASK_testplusargs___d54 && TASK_testplusargs___d55) &&
	fetch_xactor_rg_rd_data[0];
    TASK_testplusargs_3_OR_TASK_testplusargs_4_AND_ETC___d62 =
	(TASK_testplusargs___d53 ||
	 TASK_testplusargs___d54 && TASK_testplusargs___d55) &&
	!fetch_xactor_rg_rd_data[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp)
	begin
	  v__h4269 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("[%10d", v__h4269, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("[%2d]CORE : IMEM Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("Axi4_rd_data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("'h%h", fetch_xactor_rg_rd_data[35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("'h%h", fetch_xactor_rg_rd_data[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("'h%h", fetch_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_3_OR_TASK_testplusargs_4_AND_ETC___d60)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  TASK_testplusargs_3_OR_TASK_testplusargs_4_AND_ETC___d62)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_imem_line_resp &&
	  (TASK_testplusargs___d53 ||
	   TASK_testplusargs___d54 && TASK_testplusargs___d55))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85)
	begin
	  TASK_testplusargs___d94 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85)
	begin
	  TASK_testplusargs___d95 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85)
	begin
	  TASK_testplusargs___d96 = $test$plusargs("l1");
	  #0;
	end
    IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99 =
	IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85 &&
	(TASK_testplusargs___d94 ||
	 TASK_testplusargs___d95 && TASK_testplusargs___d96);
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d105 =
	(TASK_testplusargs___d94 ||
	 TASK_testplusargs___d95 && TASK_testplusargs___d96) &&
	dmem_get_read_mem_req_get[0];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d109 =
	(TASK_testplusargs___d94 ||
	 TASK_testplusargs___d95 && TASK_testplusargs___d96) &&
	!dmem_get_read_mem_req_get[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85)
	begin
	  v__h4890 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write("[%10d", v__h4890, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write("[%2d]CORE: Delaying Request: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write("DCache_mem_readreq { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write("'h%h", dmem_get_read_mem_req_get[43:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write(", ", "burst_len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write("'h%h", dmem_get_read_mem_req_get[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write(", ", "burst_size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write("'h%h", dmem_get_read_mem_req_get[3:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85 &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d105)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85 &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d109)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request && wr_write_req[32] &&
	  IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d99)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85))
	begin
	  TASK_testplusargs___d115 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85))
	begin
	  TASK_testplusargs___d116 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85))
	begin
	  TASK_testplusargs___d117 = $test$plusargs("l1");
	  #0;
	end
    NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120 =
	(!wr_write_req[32] ||
	 !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85) &&
	(TASK_testplusargs___d115 ||
	 TASK_testplusargs___d116 && TASK_testplusargs___d117);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  (!wr_write_req[32] ||
	   !IF_wr_write_req_8_BIT_32_9_THEN_wr_write_req_8_ETC___d85))
	begin
	  v__h5177 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("[%10d", v__h5177, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("[%2d]CORE : DMEM Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", dmem_get_read_mem_req_get[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", dmem_get_read_mem_req_get[43:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", dmem_get_read_mem_req_get[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", dmem_get_read_mem_req_get[3:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", 1'bx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", x__h6071);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", 4'bxxxx /* unspecified value */ );
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("'h%h", 1'b0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_read_request &&
	  NOT_wr_write_req_8_BIT_32_9_12_OR_NOT_IF_wr_wr_ETC___d120)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d125 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d126 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  TASK_testplusargs___d127 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read)
	begin
	  v__h5409 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("[%10d", v__h5409, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("[%2d]CORE : DMEM Delayed Line Requesting ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("Axi4_rd_addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[60:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", rg_read_line_req[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_delayed_read &&
	  (TASK_testplusargs___d125 ||
	   TASK_testplusargs___d126 && TASK_testplusargs___d127))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d152 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d153 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  TASK_testplusargs___d154 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d159 =
	(TASK_testplusargs___d152 ||
	 TASK_testplusargs___d153 && TASK_testplusargs___d154) &&
	memory_xactor_rg_rd_data[0];
    TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d161 =
	(TASK_testplusargs___d152 ||
	 TASK_testplusargs___d153 && TASK_testplusargs___d154) &&
	!memory_xactor_rg_rd_data[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp)
	begin
	  v__h5695 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("[%10d", v__h5695, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("[%2d]CORE : DMEM Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("Axi4_rd_data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("'h%h", memory_xactor_rg_rd_data[35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("'h%h", memory_xactor_rg_rd_data[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("'h%h", memory_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d159)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  TASK_testplusargs_52_OR_TASK_testplusargs_53_A_ETC___d161)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_line_resp &&
	  (TASK_testplusargs___d152 ||
	   TASK_testplusargs___d153 && TASK_testplusargs___d154))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d263 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d264 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d265 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d270 =
	(TASK_testplusargs___d263 ||
	 TASK_testplusargs___d264 && TASK_testplusargs___d265) &&
	dmem_mv_write_mem_req_rd[2:1] == 2'd0;
    TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d272 =
	(TASK_testplusargs___d263 ||
	 TASK_testplusargs___d264 && TASK_testplusargs___d265) &&
	dmem_mv_write_mem_req_rd[2:1] == 2'd1;
    TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d274 =
	(TASK_testplusargs___d263 ||
	 TASK_testplusargs___d264 && TASK_testplusargs___d265) &&
	dmem_mv_write_mem_req_rd[2:1] == 2'd2;
    TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d280 =
	(TASK_testplusargs___d263 ||
	 TASK_testplusargs___d264 && TASK_testplusargs___d265) &&
	dmem_mv_write_mem_req_rd[2:1] != 2'd0 &&
	dmem_mv_write_mem_req_rd[2:1] != 2'd1 &&
	dmem_mv_write_mem_req_rd[2:1] != 2'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  v__h19880 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("[%10d", v__h19880, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("[%2d]CORE : DMEM Write Addr : Request ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("{awaddr:%0h,",
	       dmem_mv_write_mem_req_rd[555:524],
	       "awlen:%0d",
	       dmem_mv_write_mem_req_rd[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d270)
	$write("sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d272)
	$write("sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d274)
	$write("sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_63_OR_TASK_testplusargs_64_A_ETC___d280)
	$write("sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d281 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d282 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  TASK_testplusargs___d283 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d287 =
	(TASK_testplusargs___d281 ||
	 TASK_testplusargs___d282 && TASK_testplusargs___d283) &&
	dmem_mv_write_mem_req_rd[11:4] == 8'd0;
    TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d288 =
	(TASK_testplusargs___d281 ||
	 TASK_testplusargs___d282 && TASK_testplusargs___d283) &&
	dmem_mv_write_mem_req_rd[11:4] != 8'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request)
	begin
	  v__h20057 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d281 ||
	   TASK_testplusargs___d282 && TASK_testplusargs___d283))
	$write("[%10d", v__h20057, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d281 ||
	   TASK_testplusargs___d282 && TASK_testplusargs___d283))
	$write("[%2d]CORE : DMEM Write Data : Request ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d281 ||
	   TASK_testplusargs___d282 && TASK_testplusargs___d283))
	$write("{wdata:%0h,wstrb:%0h", x__h6191[31:0], w_wstrb__h6186);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d287)
	$write(",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  TASK_testplusargs_81_OR_TASK_testplusargs_82_A_ETC___d288)
	$write(",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d281 ||
	   TASK_testplusargs___d282 && TASK_testplusargs___d283))
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_handle_dmem_write_request &&
	  (TASK_testplusargs___d281 ||
	   TASK_testplusargs___d282 && TASK_testplusargs___d283))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d301 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d302 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  TASK_testplusargs___d303 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data)
	begin
	  v__h20576 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("[%10d", v__h20576, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("[%2d]CORE : DMEM Write Data: %h rg_burst_count: %d last: %b rg_shift_amount:%d",
	       hartid,
	       x__h20483,
	       rg_burst_count,
	       rg_burst_count == 8'd15,
	       rg_shift_amount);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dmem_burst_write_data &&
	  (TASK_testplusargs___d301 ||
	   TASK_testplusargs___d302 && TASK_testplusargs___d303))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d317 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d318 = $test$plusargs("mcore");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  TASK_testplusargs___d319 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp)
	begin
	  v__h20832 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write("[%10d", v__h20832, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write("[%2d]CORE : DMEM Write Line Response ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write("Axi4_wr_resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write("'h%h", memory_xactor_rg_wr_resp[2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write("'h%h", memory_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handle_dmem_line_write_resp &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkccore_axi4

