//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:09:17 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// get_result                     O    38 reg
// RDY_get_result                 O     1 const
// RDY_flush                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    32 reg
// _start_operand2                I    32 reg
// _start_operand3                I    32 reg
// _start_opcode                  I     4 reg
// _start_funct7                  I     7 reg
// _start_funct3                  I     3 reg
// _start_imm                     I     2 reg
// _start_issp                    I     1 reg
// EN__start                      I     1
// EN_flush                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_operand1,
	     _start_operand2,
	     _start_operand3,
	     _start_opcode,
	     _start_funct7,
	     _start_funct3,
	     _start_imm,
	     _start_issp,
	     EN__start,
	     RDY__start,

	     get_result,
	     RDY_get_result,

	     EN_flush,
	     RDY_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [31 : 0] _start_operand1;
  input  [31 : 0] _start_operand2;
  input  [31 : 0] _start_operand3;
  input  [3 : 0] _start_opcode;
  input  [6 : 0] _start_funct7;
  input  [2 : 0] _start_funct3;
  input  [1 : 0] _start_imm;
  input  _start_issp;
  input  EN__start;
  output RDY__start;

  // value method get_result
  output [37 : 0] get_result;
  output RDY_get_result;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // signals for module outputs
  wire [37 : 0] get_result;
  wire RDY__start, RDY_flush, RDY_get_result;

  // inlined wires
  reg [84 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [37 : 0] rg_result_1_wget;
  wire [95 : 0] getMant32_arg_wget, setCanonicalNaN_arg_wget;
  wire [92 : 0] condFlags32_arg_wget;
  wire [68 : 0] getMant32_res_wget;
  wire [67 : 0] inst_fpu_int_to_fp_fcvt_s_llu_arg_wget;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_1_wget;
  wire [36 : 0] inst_spfm_add_sub_ff_final_out_wget,
		inst_spfpu_divider_wr_final_out_wget;
  wire [35 : 0] inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget;
  wire [23 : 0] getExp32_res_wget;
  wire [14 : 0] condFlags32_res_wget;
  wire inst_spfpu_sqrt_ff_final_out_1_whas, rg_result_1_whas;

  // register inst_spfm_add_sub_ff_input_register
  reg [107 : 0] inst_spfm_add_sub_ff_input_register;
  wire [107 : 0] inst_spfm_add_sub_ff_input_register_D_IN;
  wire inst_spfm_add_sub_ff_input_register_EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [110 : 0] inst_spfm_add_sub_ff_stage2;
  wire [110 : 0] inst_spfm_add_sub_ff_stage2_D_IN;
  wire inst_spfm_add_sub_ff_stage2_EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [171 : 0] inst_spfm_add_sub_ff_stage4;
  wire [171 : 0] inst_spfm_add_sub_ff_stage4_D_IN;
  wire inst_spfm_add_sub_ff_stage4_EN;

  // register inst_spfm_add_sub_ff_stage5
  reg [105 : 0] inst_spfm_add_sub_ff_stage5;
  wire [105 : 0] inst_spfm_add_sub_ff_stage5_D_IN;
  wire inst_spfm_add_sub_ff_stage5_EN;

  // register inst_spfm_add_sub_rg_state_handler
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler_D_IN;
  wire inst_spfm_add_sub_rg_state_handler_EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state_D_IN;
  wire inst_spfpu_divider_int_div_rg_state_EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_D_IN;
  wire inst_spfpu_divider_rg_stage1_EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2_D_IN;
  wire inst_spfpu_divider_rg_stage2_EN;

  // register inst_spfpu_divider_rg_stage3
  reg [77 : 0] inst_spfpu_divider_rg_stage3;
  wire [77 : 0] inst_spfpu_divider_rg_stage3_D_IN;
  wire inst_spfpu_divider_rg_stage3_EN;

  // register inst_spfpu_divider_rg_state_handler
  reg [1 : 0] inst_spfpu_divider_rg_state_handler;
  reg [1 : 0] inst_spfpu_divider_rg_state_handler_D_IN;
  wire inst_spfpu_divider_rg_state_handler_EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_D_IN;
  wire inst_spfpu_sqrt_ff_final_out_EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage_EN;

  // register inst_spfpu_sqrt_rg_state
  reg [5 : 0] inst_spfpu_sqrt_rg_state;
  reg [5 : 0] inst_spfpu_sqrt_rg_state_D_IN;
  wire inst_spfpu_sqrt_rg_state_EN;

  // register rg_multicycle_op
  reg rg_multicycle_op;
  wire rg_multicycle_op_D_IN, rg_multicycle_op_EN;

  // register rg_result
  reg [37 : 0] rg_result;
  wire [37 : 0] rg_result_D_IN;
  wire rg_result_EN;

  // ports of submodule ff_input
  wire [112 : 0] ff_input_D_IN, ff_input_D_OUT;
  wire ff_input_CLR,
       ff_input_DEQ,
       ff_input_EMPTY_N,
       ff_input_ENQ,
       ff_input_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_fifo,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rg_result__dreg_update,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_start_stage,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_12,
       CAN_FIRE___me_check_2,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_3,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_6,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       WILL_FIRE_RL_flush_fifo,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rg_result__dreg_update,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_start_stage,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_12,
       WILL_FIRE___me_check_2,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_3,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_6,
       WILL_FIRE__start,
       WILL_FIRE_flush;

  // inputs to muxes for submodule ports
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [84 : 0] MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_1,
		MUX_rg_result_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_3,
		MUX_rg_result_1_wset_1__VAL_4;
  wire [5 : 0] MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3,
	       MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
  wire MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_rg_multicycle_op_write_1__SEL_1,
       MUX_rg_result_1_wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d2573;
  reg TASK_testplusargs___d2574;
  reg TASK_testplusargs___d2575;
  reg [63 : 0] v__h132546;
  reg TASK_testplusargs___d2579;
  reg TASK_testplusargs___d2580;
  reg TASK_testplusargs___d2581;
  reg [63 : 0] v__h132681;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q22;
  reg CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q13,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2062,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2184,
      IF_ff_input_first__324_BITS_5_TO_3_353_EQ_0b0__ETC___d1800,
      IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238,
      IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317,
      IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430;
  wire [95 : 0] _0_CONCAT_INV_IF_condFlags32_res_whas__584_THEN_ETC___d2225;
  wire [82 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3,
		x__h5430,
		x_wget__h669;
  wire [72 : 0] IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779,
		IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217,
		_theResult____h30234,
		_theResult____h53450,
		_theResult___snd_fst__h66029,
		_theResult___snd_fst__h66031,
		add_mantissa__h53446,
		mantissa2__h30221,
		mantissa2__h30243,
		mantissa2__h30264,
		mantissa3___1__h39456,
		mantissa3__h30265,
		mantissa_to_shift___1__h30262,
		mantissa_to_shift__h30257,
		resultant_mantissa___1__h65784,
		resultant_mantissa_norm_expo__h65478,
		resultant_mantissa_norm_zerosMSB__h65479,
		sub_mantissa1__h53447,
		sub_mantissa2__h53448,
		sub_mantissa__h53449;
  wire [63 : 0] IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037,
		_theResult____h80370,
		inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q10,
		x__h80325;
  wire [61 : 0] IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d1502,
		IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1504;
  wire [55 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q7,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q8,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q4,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q5;
  wire [54 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
		_1_CONCAT_getMant32_res_wget__490_BITS_68_TO_46_ETC___d1741,
		final_man__h97798;
  wire [51 : 0] IF_IF_IF_condFlags32_res_whas__584_THEN_condFl_ETC___d2523,
		mantissa___1__h125875,
		mantissa__h116879,
		mantissa__h116881,
		mantissa__h116891,
		mantissa__h15966;
  wire [48 : 0] IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590,
		_theResult_____1_snd__h25374,
		_theResult_____1_snd__h25377,
		_theResult___snd_fst__h25414,
		lv_product_mantissa___1__h25345,
		lv_product_mantissa___1__h25360,
		lv_product_mantissa__h17203,
		lv_product_mantissa__h25315,
		lv_product_mantissa_shiftL_expo__h25323,
		lv_product_mantissa_shiftL_zerosMSB__h25325,
		x_lv_product_mantissa__h17280;
  wire [37 : 0] IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1886,
		IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1888;
  wire [36 : 0] IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360,
		x_wget__h66680,
		x_wget__h66818;
  wire [31 : 0] IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1642,
		IF_IF_getExp32_res_whas__707_THEN_getExp32_res_ETC___d1764,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159,
		IF_NOT_ff_input_first__324_BIT_3_600_601_AND_I_ETC___d1638,
		IF_NOT_ff_input_first__324_BIT_3_600_601_AND_I_ETC___d1640,
		IF_ff_input_first__324_BIT_3_600_AND_IF_condFl_ETC___d1639,
		_theResult_____1_fst__h14252,
		_theResult_____1_snd__h98975,
		_theResult_____2_snd__h98755,
		_theResult_____2_snd__h98862,
		_theResult_____2_snd__h98865,
		_theResult_____3_snd__h94636,
		_theResult_____3_snd__h95258,
		_theResult_____3_snd_snd_fst__h98240,
		_theResult_____3_snd_snd_snd__h65624,
		_theResult____h74498,
		_theResult___snd__h98607,
		_theResult___snd__h98611,
		_theResult___snd__h98681,
		_theResult___snd_snd__h98492,
		_theResult___snd_snd_snd_fst__h98542,
		_theResult___snd_snd_snd_fst__h98544,
		_theResult___snd_snd_snd_fst__h98548,
		_theResult___snd_snd_snd_fst__h98576,
		_theResult___snd_snd_snd_fst__h98625,
		_theResult___snd_snd_snd_fst__h98650,
		_theResult___snd_snd_snd_snd_fst__h98486,
		final_result___1__h98181,
		final_result___1__h98552,
		final_result___3__h98235,
		final_result__h117314,
		final_result__h16313,
		final_result__h97806,
		getMant32_argwget_BITS_31_TO_0__q16,
		getMant32_argwget_BITS_63_TO_32__q15,
		getMant32_argwget_BITS_95_TO_64__q14,
		inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q9,
		lv_final_output__h14230,
		lv_result__h95302,
		lv_result__h95343,
		new_value_final_result__h65530,
		res__h74415,
		setCanonicalNaN_argwget_BITS_31_TO_0__q26,
		setCanonicalNaN_argwget_BITS_63_TO_32__q12,
		setCanonicalNaN_argwget_BITS_95_TO_64__q11,
		x1_avValue_final_result__h74420,
		x1_avValue_final_result__h80279,
		x1_avValue_final_result__h91359,
		x_data__h100771,
		x_data__h94601,
		x_data__h95597,
		x_data__h95776,
		x_data__h97829;
  wire [30 : 0] IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265,
		IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350,
		IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349;
  wire [28 : 0] IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q6,
		_remainder___1__h3570,
		_remainder__h3398,
		_theResult_____3__h116889,
		_theResult____h15964,
		lv_remainder__h16080,
		lv_remainder__h16170,
		lv_remainder__h16734,
		lv_remainder_temp__h15961,
		lv_root_rem__h16301,
		lv_root_temp_1__h15962,
		lv_root_temp_2__h15963,
		x__h16712;
  wire [26 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q2,
		IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200,
		_denominator__h5365,
		_dividend___1__h3571,
		_dividend__h2763,
		_dividend__h2899,
		_dividend__h3400,
		_dividend__h3401,
		_numerator__h5366,
		_theResult___fst__h13911,
		_theResult___fst__h13915,
		_theResult___fst__h6980,
		_theResult___fst__h6999,
		lv_extended_mantissa___1__h16799,
		lv_extended_mantissa__h16309,
		lv_quotient___1__h7016,
		lv_quotient_shiftL_expo__h6992,
		lv_quotient_shiftL_zerosMSB__h6994,
		x_lv_quotient__h6882;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__584_ETC___d2530,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q25,
		result_mantissa__h16300,
		x__h125904,
		x__h16010,
		x__h16273;
  wire [24 : 0] IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d2066,
		IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d2188,
		IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262,
		IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325,
		_theResult_____4__h14128,
		_theResult_____5__h65500,
		lv_man___1__h80184,
		lv_man___1__h91259,
		lv_man__h74513,
		lv_man__h80385,
		lv_rounded_mantissa___1__h66184,
		lv_rounded_mantissa__h66214,
		lv_rounded_quotient___1__h14495,
		lv_rounded_quotient__h14127,
		lv_rounded_quotient__h14525;
  wire [23 : 0] man1__h106655,
		man2__h106656,
		x__h103305,
		x__h103391,
		x__h114569,
		x__h114597;
  wire [22 : 0] IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748,
		_theResult___fst__h98053,
		_theResult___fst__h98100,
		_theResult___fst__h98141,
		_theResult___fst__h98160,
		_theResult___fst__h98202,
		condFlags32_argwget_BITS_30_TO_8__q19,
		condFlags32_argwget_BITS_61_TO_39__q18,
		condFlags32_argwget_BITS_92_TO_70__q17,
		getMant32_reswget_BITS_45_TO_23__q24,
		getMant32_reswget_BITS_68_TO_46__q23;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249,
	       IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337,
	       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192,
	       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468,
	       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133,
	       _theResult_____1_fst__h25373,
	       _theResult_____1_fst__h25376,
	       _theResult_____4_snd_fst__h30463,
	       _theResult___fst__h25329,
	       _theResult___fst__h65812,
	       _theResult___fst__h65816,
	       _theResult___snd_fst__h13995,
	       _theResult___snd_fst__h14005,
	       _theResult___snd_fst__h14013,
	       _theResult___snd_fst__h14023,
	       _theResult___snd_fst__h14025,
	       exp1__h106663,
	       exp1_temp__h103252,
	       exp2__h106664,
	       exp2_temp__h103253,
	       exponent2__h30244,
	       exponent3__h30223,
	       exponent3__h30235,
	       exponent_difference__h30258,
	       inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459,
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130,
	       lv_exponent___1__h14524,
	       lv_exponent___1__h14611,
	       lv_exponent__h106665,
	       lv_exponent__h14130,
	       lv_exponent_inc_shift__h6990,
	       lv_exponent_sub_shift__h6993,
	       lv_exponent_sub_zerosMSB__h6995,
	       lv_minuend__h30254,
	       lv_product_exponent___1__h25346,
	       lv_product_exponent__h25313,
	       lv_product_exponent_inc_shift__h25321,
	       lv_product_exponent_sub_shift__h25324,
	       lv_product_exponent_sub_zerosMSB__h25326,
	       lv_summed_exponent__h103254,
	       resultant_exponent___1__h66213,
	       resultant_exponent__h65482,
	       resultant_exponent_inc__h65477,
	       resultant_exponent_sub__h65475,
	       resultant_exponent_sub_zerosMSB__h65480,
	       shift_neg__h25322,
	       shift_neg__h6991,
	       x__h100778,
	       x__h103506,
	       x__h103508,
	       x__h103510,
	       x__h106727,
	       x__h25409,
	       x_lv_exponent__h6883,
	       x_lv_product_exponent__h17279,
	       y__h103507,
	       y__h103509,
	       y__h106726,
	       y__h106728,
	       y__h106729,
	       y__h110652,
	       y__h25408;
  wire [8 : 0] IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2516,
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q1,
	       IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d2278,
	       _theResult_____1_fst__h16800,
	       exponent___1__h117460,
	       exponent__h116875,
	       result_exponent___1__h16822,
	       result_exponent__h116888,
	       x__h117431,
	       x__h117462,
	       x__h126148,
	       x__h126150,
	       y__h117432,
	       y__h126149;
  wire [7 : 0] IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709,
	       expo__h74500,
	       expo__h80372,
	       local_expo___1__h80209,
	       local_expo___1__h91284;
  wire [6 : 0] lv_zeros_on_left__h53452, x__h46538, x__h66061, x__h80680;
  wire [5 : 0] IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d2276,
	       lsb_zeros__h25319,
	       lv_leading_zeros__h116880,
	       msb_zeros___1__h25348,
	       msb_zeros__h17222,
	       msb_zeros__h25317,
	       x__h125878,
	       x__h25383,
	       x__h74790;
  wire [4 : 0] _theResult_____1_snd__h14231,
	       _theResult_____1_snd__h14242,
	       _theResult_____1_snd__h14253,
	       _theResult_____1_snd__h14270,
	       _theResult_____1_snd__h14380,
	       _theResult_____1_snd__h14620,
	       _theResult_____1_snd__h14638,
	       _theResult_____3_fst__h94635,
	       _theResult_____3_fst__h94840,
	       _theResult_____3_fst__h95257,
	       condFlags32_reswget_BITS_14_TO_10__q20,
	       condFlags32_reswget_BITS_9_TO_5__q21,
	       fflags__h117139,
	       fflags__h16357,
	       fflags__h65521,
	       fflags__h74515,
	       fflags__h80387,
	       lsb_zeros__h6988,
	       msb_zeros__h6831,
	       x1_avValue_fflags__h74421,
	       x1_avValue_fflags__h80280,
	       x1_avValue_fflags__h91360,
	       x__h106734,
	       x__h110653,
	       x__h97024,
	       x__h97358,
	       x__h97539,
	       x_fflags__h94603,
	       x_fflags__h95599,
	       x_fflags__h97831;
  wire [1 : 0] IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2463,
	       IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980,
	       _theResult_____6_snd_snd__h53184,
	       _theResult_____6_snd_snd_snd__h53231,
	       _theResult____h94857,
	       lv_compare_result__h94585,
	       lv_result_is_infinity___1__h53185,
	       lv_result_is_infinity___1__h53247,
	       lv_result_is_zero___1__h53280,
	       lv_result_is_zero___1__h53284,
	       x__h53227,
	       x__h53268,
	       x__h53527;
  wire IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309,
       IF_NOT_IF_condFlags32_res_whas__584_THEN_condF_ETC___d1847,
       IF_NOT_IF_condFlags32_res_whas__584_THEN_condF_ETC___d1861,
       IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590,
       IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1714,
       IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1858,
       IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d2242,
       IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d2235,
       IF_ff_input_first__324_BIT_1_679_THEN_NOT_IF_c_ETC___d1725,
       IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721,
       IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1723,
       IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1827,
       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695,
       IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755,
       IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200,
       INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572,
       INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195,
       NOT_IF_condFlags32_res_whas__584_THEN_condFlag_ETC___d1727,
       NOT_IF_getExp32_res_whas__707_THEN_getExp32_re_ETC___d1856,
       NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d1377,
       NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2291,
       NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2292,
       NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2434,
       NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2458,
       NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2459,
       NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2205,
       NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2211,
       NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2214,
       NOT_ff_input_first__324_BIT_2_674_717_AND_NOT__ETC___d1807,
       NOT_ff_input_first__324_BIT_2_674_717_AND_ff_i_ETC___d1813,
       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246,
       NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295,
       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933,
       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194,
       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469,
       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134,
       _theResult_____1__h30268,
       _theResult_____1_fst__h66354,
       _theResult_____1_fst__h98974,
       _theResult_____1_snd__h99034,
       _theResult_____1_snd_snd_fst__h66382,
       _theResult_____1_snd_snd_snd__h66383,
       _theResult_____2_fst__h98754,
       _theResult_____3_fst__h65619,
       _theResult_____3_fst__h66269,
       _theResult_____3_fst__h98237,
       _theResult_____3_snd_fst__h65621,
       _theResult_____3_snd_fst__h66271,
       _theResult_____3_snd_snd_fst__h65623,
       _theResult_____6__h65499,
       _theResult_____6_fst__h53181,
       _theResult____h14125,
       _theResult____h74510,
       _theResult____h80382,
       _theResult___fst__h103747,
       _theResult___fst__h103755,
       _theResult___fst__h98489,
       _theResult___fst__h98610,
       _theResult___fst__h98680,
       _theResult___snd_fst__h98011,
       _theResult___snd_fst__h98045,
       _theResult___snd_fst__h98055,
       _theResult___snd_fst__h98102,
       _theResult___snd_fst__h98162,
       and_sign__h94583,
       ex_overflow__h65490,
       expo3_zero__h30232,
       ff_input_first__324_BITS_12_TO_8_325_EQ_0b1010_ETC___d1582,
       ff_input_first__324_BITS_12_TO_8_325_EQ_0b10_3_ETC___d1411,
       ff_input_first__324_BITS_12_TO_8_325_EQ_0b1110_ETC___d1357,
       inexact__h74511,
       inexact__h80383,
       inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460,
       inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763,
       inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132,
       lv_inexact1__h97811,
       lv_inexact___1__h98232,
       lv_inexact__h16308,
       lv_inexact__h65498,
       lv_inexact__h97804,
       lv_invalid___2__h98234,
       lv_invalid__h97786,
       lv_invalid__h97802,
       lv_invalid__h97813,
       lv_op1_subnormal__h103243,
       lv_op2_Nan__h94581,
       lv_op2_subnormal__h103244,
       lv_round_up___1__h14424,
       lv_round_up___1__h14460,
       lv_round_up___1__h65930,
       lv_round_up___1__h66152,
       lv_round_up___1__h98317,
       lv_round_up___1__h98717,
       lv_roundup___1__h16380,
       lv_roundup___1__h16762,
       lv_roundup___1__h80112,
       lv_roundup___1__h80149,
       lv_roundup___1__h91187,
       lv_roundup___1__h91224,
       lv_sticky___1__h7017,
       lv_sticky__h16306,
       lv_sticky__h65496,
       lv_sticky__h97809,
       op_xor_sign3__h30233,
       or_sign__h94582,
       quiet_nan_two__h103248,
       sign2__h30220,
       sign3__h30222,
       x__h103561,
       x__h103824,
       x__h103830,
       x__h103887,
       x__h103900,
       x__h103990,
       x__h114627,
       x__h114691,
       x__h114705,
       x__h114710,
       x__h132015,
       x__h14053,
       x__h14058,
       x__h14287,
       x__h14437,
       x__h14472,
       x__h14474,
       x__h16671,
       x__h16786,
       x__h29965,
       x__h29996,
       x__h30026,
       x__h30374,
       x__h30386,
       x__h53104,
       x__h53111,
       x__h53219,
       x__h53259,
       x__h53261,
       x__h53263,
       x__h53264,
       x__h53292,
       x__h53304,
       x__h53334,
       x__h66082,
       x__h66164,
       x__h74529,
       x__h80125,
       x__h80401,
       x__h91200,
       x__h98463,
       x__h98729,
       y__h103901,
       y__h103903,
       y__h103947,
       y__h117153,
       y__h117174,
       y__h14436,
       y__h14473,
       y__h16392,
       y__h16774,
       y__h30387,
       y__h53260,
       y__h53262,
       y__h53305,
       y__h65942,
       y__h66178,
       y__h80124,
       y__h80162,
       y__h91199,
       y__h91237,
       y__h98329,
       y__h98742;

  // action method _start
  assign RDY__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign CAN_FIRE__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // value method get_result
  assign get_result = rg_result ;
  assign RDY_get_result = 1'd1 ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // submodule ff_input
  FIFO1 #(.width(32'd113), .guarded(1'd1)) ff_input(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ff_input_D_IN),
						    .ENQ(ff_input_ENQ),
						    .DEQ(ff_input_DEQ),
						    .CLR(ff_input_CLR),
						    .D_OUT(ff_input_D_OUT),
						    .FULL_N(ff_input_FULL_N),
						    .EMPTY_N(ff_input_EMPTY_N));

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt_ff_final_out[37] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // rule RL_flush_fifo
  assign CAN_FIRE_RL_flush_fifo = EN_flush ;
  assign WILL_FIRE_RL_flush_fifo = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     inst_spfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // rule RL_inst_spfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule __me_check_2
  assign CAN_FIRE___me_check_2 = 1'b1 ;
  assign WILL_FIRE___me_check_2 = 1'b1 ;

  // rule __me_check_3
  assign CAN_FIRE___me_check_3 = 1'b1 ;
  assign WILL_FIRE___me_check_3 = 1'b1 ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage &&
	     inst_spfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule __me_check_6
  assign CAN_FIRE___me_check_6 = 1'b1 ;
  assign WILL_FIRE___me_check_6 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 6'd1 &&
	     inst_spfpu_sqrt_rg_state < 6'd25 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 6'd25 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_12
  assign CAN_FIRE___me_check_12 = 1'b1 ;
  assign WILL_FIRE___me_check_12 = 1'b1 ;

  // rule RL_inst_spfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     inst_spfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // rule RL_inst_spfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     inst_spfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule RL_start_stage
  assign CAN_FIRE_RL_start_stage =
	     ff_input_EMPTY_N && inst_spfpu_sqrt_rg_state == 6'd0 ;
  assign WILL_FIRE_RL_start_stage = CAN_FIRE_RL_start_stage ;

  // rule RL_rg_result__dreg_update
  assign CAN_FIRE_RL_rg_result__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_result__dreg_update = 1'd1 ;

  // rule RL_inst_spfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2214 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2292 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2434 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2459 ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2458 ;
  assign MUX_rg_multicycle_op_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2205 ;
  assign MUX_rg_result_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     ff_input_first__324_BITS_12_TO_8_325_EQ_0b1010_ETC___d1582 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd3 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h5430, 2'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 ||
	      ff_input_D_OUT[112] &&
	      (IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 ||
	       condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	       !condFlags32_reswget_BITS_14_TO_10__q20[3])) ?
	       { 33'h17FC00000, fflags__h117139 } :
	       ((condFlags32_reswget_BITS_14_TO_10__q20[1] &&
		 !ff_input_D_OUT[112]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h117314, 5'd0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h16313, fflags__h16357 } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h116891,
	       x__h125904,
	       result_exponent__h116888,
	       ff_input_D_OUT[112],
	       _theResult_____3__h116889,
	       IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__584_ETC___d2530,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h15966,
	       x__h16010,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h15964,
	       x__h16273,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 6'd1 ;
  assign MUX_rg_result_1_wset_1__VAL_1 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { x_data__h94601, 1'd1, x_fflags__h94603 } :
	       IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1888 ;
  assign MUX_rg_result_1_wset_1__VAL_2 =
	     { inst_spfm_add_sub_ff_final_out_wget[36:5],
	       1'd1,
	       inst_spfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_3 =
	     { inst_spfpu_divider_wr_final_out_wget[36:5],
	       1'd1,
	       inst_spfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_4 =
	     { inst_spfpu_sqrt_ff_final_out[36:5],
	       1'd1,
	       inst_spfpu_sqrt_ff_final_out[4:0] } ;

  // inlined wires
  always@(MUX_rg_result_1_wset_1__SEL_1 or
	  MUX_rg_result_1_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_4)
  case (1'b1)
    MUX_rg_result_1_wset_1__SEL_1:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_1;
    WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_2;
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_3;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_4;
    default: rg_result_1_wget =
		 38'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_result_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     ff_input_first__324_BITS_12_TO_8_325_EQ_0b1010_ETC___d1582 ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ;
  always@(MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
		   85'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_spfpu_divider_wr_final_out_wget =
	     inst_spfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h14230, _theResult_____1_snd__h14231 } :
	       IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360 ;
  assign inst_spfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_spfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2434 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;
  assign inst_spfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h65530, fflags__h65521 } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget =
	     { ff_input_D_OUT[112:81],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_arg_wget =
	     { x__h80325, ff_input_D_OUT[1], ff_input_D_OUT[5:3] } ;
  assign condFlags32_arg_wget =
	     { getMant32_res_wget[68:46],
	       getExp32_res_wget[23:16],
	       IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1504 } ;
  assign condFlags32_res_wget = { x__h97024, x__h97358, x__h97539 } ;
  assign getMant32_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { setCanonicalNaN_arg_wget[95:32], 32'd0 } :
	       (((ff_input_D_OUT[12:8] == 5'b11000 ||
		  ff_input_D_OUT[12:8] == 5'b11100 &&
		  ff_input_D_OUT[5:3] == 3'b001) &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { setCanonicalNaN_arg_wget[95:64], 64'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 32'h3F800000, setCanonicalNaN_arg_wget[95:32] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			setCanonicalNaN_arg_wget :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { setCanonicalNaN_arg_wget[95:64], 64'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { setCanonicalNaN_arg_wget[95:32], 32'd0 } :
			      setCanonicalNaN_arg_wget))))) ;
  assign getMant32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q14[22:0],
	       getMant32_argwget_BITS_63_TO_32__q15[22:0],
	       getMant32_argwget_BITS_31_TO_0__q16[22:0] } ;
  assign getExp32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q14[30:23],
	       getMant32_argwget_BITS_63_TO_32__q15[30:23],
	       getMant32_argwget_BITS_31_TO_0__q16[30:23] } ;
  assign setCanonicalNaN_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101 ||
	       ff_input_D_OUT[12:8] == 5'b00100) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[112:49], 32'hFFFFFFFF } :
	       ((ff_input_D_OUT[12:8] == 5'b11000 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { ff_input_D_OUT[112:81], 64'd0 } :
		  ((ff_input_D_OUT[12:8] == 5'b11100 &&
		    ff_input_D_OUT[5:3] == 3'b001 &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { ff_input_D_OUT[112:81], 64'hFFFFFFFFFFFFFFFF } :
		     (((ff_input_D_OUT[12:8] == 5'b0 ||
			ff_input_D_OUT[12:8] == 5'b00001 ||
			ff_input_D_OUT[12:8] == 5'b00011) &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[112:49], 32'hFFFFFFFF } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[112:81], 64'hFFFFFFFFFFFFFFFF } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[112:49], 32'hFFFFFFFF } :
			      ff_input_D_OUT[112:17]))))) ;

  // register inst_spfm_add_sub_ff_input_register
  assign inst_spfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags32_res_whas__584_THEN_ETC___d2225[47:0],
	       lv_summed_exponent__h103254,
	       IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d2235,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 setCanonicalNaN_argwget_BITS_63_TO_32__q12[31] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 setCanonicalNaN_argwget_BITS_31_TO_0__q26[31],
	       getExp32_res_wget[7:0],
	       getMant32_res_wget[22:0],
	       x__h103561,
	       x__h103824,
	       x__h103830,
	       condFlags32_res_wget[4:0],
	       IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d2278 } ;
  assign inst_spfm_add_sub_ff_input_register_EN =
	     MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2_D_IN =
	     { inst_spfm_add_sub_ff_input_register[49],
	       inst_spfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h17279,
	       x_lv_product_mantissa__h17280,
	       inst_spfm_add_sub_ff_input_register[48:17],
	       inst_spfm_add_sub_ff_input_register[13:9],
	       inst_spfm_add_sub_ff_input_register[5],
	       inst_spfm_add_sub_ff_input_register[3:2],
	       inst_spfm_add_sub_ff_input_register[8:6],
	       inst_spfm_add_sub_ff_input_register[16],
	       inst_spfm_add_sub_ff_input_register[14],
	       inst_spfm_add_sub_ff_input_register[15],
	       x__h29965,
	       x__h30026,
	       inst_spfm_add_sub_ff_input_register[1:0] } ;
  assign inst_spfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4_D_IN =
	     { x__h53219,
	       x__h30374,
	       _theResult_____1__h30268,
	       lv_minuend__h30254,
	       mantissa2__h30264,
	       mantissa3__h30265,
	       inst_spfm_add_sub_ff_stage2[9:7],
	       x__h53111,
	       x__h53227,
	       x__h53268,
	       inst_spfm_add_sub_ff_stage2[3:2],
	       x__h53292,
	       x__h53334,
	       inst_spfm_add_sub_ff_stage2[5] } ;
  assign inst_spfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // register inst_spfm_add_sub_ff_stage5
  assign inst_spfm_add_sub_ff_stage5_D_IN =
	     { inst_spfm_add_sub_ff_stage4[168:159],
	       _theResult____h53450,
	       inst_spfm_add_sub_ff_stage4[170],
	       inst_spfm_add_sub_ff_stage4[12:10],
	       x__h53527,
	       inst_spfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h53452 } ;
  assign inst_spfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfm_add_sub_rg_state_handler
  always@(MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_spfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2214 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage_D_IN = x_wget__h669 ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // register inst_spfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage or
	  MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    EN_flush: inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_3;
    default: inst_spfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h106665,
	       x__h114569,
	       x__h114597,
	       x__h114627,
	       IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 ||
	       lv_op2_Nan__h94581 ||
	       condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	       condFlags32_reswget_BITS_9_TO_5__q21[1] ||
	       condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q21[3],
	       x__h114691,
	       x__h114705,
	       x__h114710,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h103248 } ;
  assign inst_spfpu_divider_rg_stage1_EN =
	     MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2_D_IN =
	     { inst_spfpu_divider_rg_stage1[66:57],
	       inst_spfpu_divider_rg_stage1[8],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5:0] } ;
  assign inst_spfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_rg_stage3
  assign inst_spfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h6882,
	       x_wget__h669[55:28],
	       x_lv_exponent__h6883,
	       inst_spfpu_divider_rg_stage2[8:5],
	       x__h14053,
	       !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
	       x__h14058,
	       inst_spfpu_divider_rg_stage2[4:1],
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246,
	       inst_spfpu_divider_rg_stage2[0] } ;
  assign inst_spfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_divider_rg_state_handler
  always@(MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage3:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage4:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_spfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2292 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_sqrt_ff_final_out
  assign inst_spfpu_sqrt_ff_final_out_D_IN =
	     inst_spfpu_sqrt_ff_final_out_1_whas ?
	       inst_spfpu_sqrt_ff_final_out_1_wget :
	       { 1'd0,
		 37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inst_spfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2459 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_spfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2458 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register rg_multicycle_op
  assign rg_multicycle_op_D_IN = MUX_rg_multicycle_op_write_1__SEL_1 ;
  assign rg_multicycle_op_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2205 ||
	     EN_flush ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // register rg_result
  assign rg_result_D_IN =
	     rg_result_1_whas ?
	       rg_result_1_wget :
	       { 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 6'd0 } ;
  assign rg_result_EN = 1'd1 ;

  // submodule ff_input
  assign ff_input_D_IN =
	     { _start_operand1,
	       _start_operand2,
	       _start_operand3,
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp } ;
  assign ff_input_ENQ = EN__start ;
  assign ff_input_DEQ = CAN_FIRE_RL_start_stage ;
  assign ff_input_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__584_ETC___d2530 =
	     _theResult_____3__h116889[28] ? 26'd0 : 26'd1 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q25 =
	     IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__584_ETC___d2530[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_IF_condFlags32_res_whas__584_THEN_condFl_ETC___d2523 =
	     IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2516[0] ?
	       mantissa__h116881 :
	       mantissa___1__h125875 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d2066 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2062 ?
	       lv_man___1__h91259 :
	       lv_man__h80385 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d2188 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2184 ?
	       lv_man___1__h80184 :
	       lv_man__h74513 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249 =
	     (_theResult_____5__h65500[24] ||
	      IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:71] ==
	      2'b0 &&
	      _theResult_____5__h65500[23]) ?
	       resultant_exponent___1__h66213 :
	       resultant_exponent__h65482 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262 =
	     _theResult_____5__h65500[24] ?
	       lv_rounded_mantissa__h66214 :
	       _theResult_____5__h65500 ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q6[28] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q7[55:1] :
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q8[55:1] ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 =
	     _remainder__h3398[28] ?
	       { _remainder___1__h3570, _dividend___1__h3571 } :
	       { _remainder__h3398, _dividend__h3401 } ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325 =
	     _theResult_____4__h14128[24] ?
	       lv_rounded_quotient__h14525 :
	       _theResult_____4__h14128 ;
  assign IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1642 =
	     IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 ?
	       setCanonicalNaN_arg_wget[63:32] :
	       (lv_op2_Nan__h94581 ?
		  setCanonicalNaN_arg_wget[95:64] :
		  IF_NOT_ff_input_first__324_BIT_3_600_601_AND_I_ETC___d1640) ;
  assign IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[3] ||
	      condFlags32_reswget_BITS_14_TO_10__q20[4] ||
	      IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709[7] &&
	      !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1714 ||
	      ff_input_D_OUT[2]) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h98053 ;
  assign IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2463 =
	     condFlags32_reswget_BITS_14_TO_10__q20[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2516 =
	     x__h117431 - y__h117432 ;
  assign IF_IF_getExp32_res_whas__707_THEN_getExp32_res_ETC___d1764 =
	     (getExp32_res_wget[23:16] == 8'd126 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant32_res_wget[68:46] != 23'd0)) ?
	       (setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ?
		  (ff_input_D_OUT[1] ? 32'd0 : 32'hFFFFFFFF) :
		  32'd1) :
	       32'd0 ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037 =
	     _theResult____h80370 << x__h80680[5:0] ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159 =
	     _theResult____h74498 << x__h74790[4:0] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779 =
	     mantissa_to_shift__h30257 >> exponent_difference__h30258 ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ?
	       (!resultant_exponent__h65482[9] ||
		inst_spfm_add_sub_ff_stage5[7]) &&
	       !inst_spfm_add_sub_ff_stage5[10] :
	       !inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ?
	       resultant_exponent__h65482[9] &&
	       !inst_spfm_add_sub_ff_stage5[7] ||
	       inst_spfm_add_sub_ff_stage5[10] :
	       inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[55] ?
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q4[55:1] :
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q5[55:1] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[55] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 :
	       { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		 !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q6[28] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q6 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q7 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q8 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d60[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q1 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 ?
	       _theResult_____1_fst__h16800 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q2 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 ?
	       lv_extended_mantissa___1__h16799 :
	       lv_extended_mantissa__h16309 ;
  assign IF_NOT_IF_condFlags32_res_whas__584_THEN_condF_ETC___d1847 =
	     lv_invalid__h97813 | condFlags32_reswget_BITS_14_TO_10__q20[1] ;
  assign IF_NOT_IF_condFlags32_res_whas__584_THEN_condF_ETC___d1861 =
	     (!condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	      NOT_IF_condFlags32_res_whas__584_THEN_condFlag_ETC___d1727) ?
	       lv_inexact___1__h98232 :
	       lv_inexact__h97804 ;
  assign IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265 =
	     (ex_overflow__h65490 || inst_spfm_add_sub_ff_stage5[11] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	      8'd255) ?
	       ((inst_spfm_add_sub_ff_stage5[21:19] == 3'b001 ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b010 &&
		 !inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		 inst_spfm_add_sub_ff_stage5[22]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0],
		 IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262[22:0] } ;
  assign IF_NOT_ff_input_first__324_BIT_3_600_601_AND_I_ETC___d1638 =
	     (!ff_input_D_OUT[3] && lv_compare_result__h94585 == 2'b01 ||
	      ff_input_D_OUT[3] && lv_compare_result__h94585 == 2'b10) ?
	       setCanonicalNaN_arg_wget[95:64] :
	       setCanonicalNaN_arg_wget[63:32] ;
  assign IF_NOT_ff_input_first__324_BIT_3_600_601_AND_I_ETC___d1640 =
	     (!ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q21[3]) ?
	       lv_result__h95302 :
	       IF_ff_input_first__324_BIT_3_600_AND_IF_condFl_ETC___d1639 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350 =
	     (NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       { 8'd0,
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[22:0] } :
	       IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337 =
	     (!inst_spfpu_divider_rg_stage3[77] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[23]) ?
	       lv_exponent___1__h14611 :
	       lv_exponent__h14130 ;
  assign IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 =
	     condFlags32_reswget_BITS_14_TO_10__q20[2] |
	     condFlags32_reswget_BITS_14_TO_10__q20[0] ;
  assign IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1714 =
	     condFlags32_reswget_BITS_14_TO_10__q20[1] | lv_invalid__h97786 ;
  assign IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1858 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[4] ||
	      IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709[7] &&
	      !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1714) &&
	     (!setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ||
	      !ff_input_D_OUT[1] ||
	      NOT_IF_getExp32_res_whas__707_THEN_getExp32_re_ETC___d1856) ;
  assign IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d2242 =
	     condFlags32_reswget_BITS_9_TO_5__q21[0] |
	     condFlags32_reswget_BITS_9_TO_5__q21[2] ;
  assign IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d1502 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001 ||
	       ff_input_D_OUT[12:8] == 5'b00011) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23],
		 getExp32_res_wget[15:8],
		 getMant32_res_wget[22:0],
		 getExp32_res_wget[7:0] } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  62'd0 :
		  { getMant32_res_wget[45:23],
		    getExp32_res_wget[15:8],
		    getMant32_res_wget[22:0],
		    getExp32_res_wget[7:0] }) ;
  assign IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d2235 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] :
	       x__h114627 ;
  assign IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d2278 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h103887,
		 x__h103990 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d2276 } ;
  assign IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1504 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23], getExp32_res_wget[15:8], 31'd0 } :
	       (((ff_input_D_OUT[12:8] == 5'b11000 ||
		  ff_input_D_OUT[12:8] == 5'b11100 &&
		  ff_input_D_OUT[5:3] == 3'b001) &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  62'd0 :
		  IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b0_ETC___d1502) ;
  assign IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1886 =
	     (ff_input_D_OUT[12:8] == 5'b11000 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { x_data__h97829, 1'd1, x_fflags__h97831 } :
	       { (ff_input_D_OUT[12:8] == 5'b11100 &&
		  ff_input_D_OUT[5:3] == 3'b001 &&
		  ff_input_D_OUT[16:13] == 4'b0100) ?
		   x_data__h100771 :
		   ff_input_D_OUT[112:81],
		 6'd32 } ;
  assign IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1888 =
	     (ff_input_D_OUT[12:8] == 5'b11010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { x_data__h95597, 1'd1, x_fflags__h95599 } :
	       ((ff_input_D_OUT[12:8] == 5'b00100 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { x_data__h95776, 6'd32 } :
		  IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d1886) ;
  assign IF_ff_input_first__324_BITS_12_TO_8_325_EQ_0b1_ETC___d2276 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h103887, x__h103990 } :
	       { x__h132015,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h103887,
		 x__h103990 } ;
  assign IF_ff_input_first__324_BIT_1_679_THEN_NOT_IF_c_ETC___d1725 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	       !lv_invalid__h97786 &&
	       IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721 :
	       !condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	       !lv_invalid__h97786 &&
	       IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1723 ;
  assign IF_ff_input_first__324_BIT_3_600_AND_IF_condFl_ETC___d1639 =
	     (ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q21[3]) ?
	       lv_result__h95343 :
	       IF_NOT_ff_input_first__324_BIT_3_600_601_AND_I_ETC___d1638 ;
  assign IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709 =
	     getExp32_res_wget[23:16] - 8'd127 ;
  assign IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721 =
	     (IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709 ^
	      8'h80) <
	     8'd160 ;
  assign IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1723 =
	     (IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709 ^
	      8'h80) <
	     8'd159 ;
  assign IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1827 =
	     getExp32_res_wget[23:16] == 8'd126 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant32_res_wget[68:46] != 23'd0) ||
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709[7] &&
	     ff_input_D_OUT[5:3] == 3'b010 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590 =
	     lv_product_mantissa__h25315 >>
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695 =
	     IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590[0] |
	     ((_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h25319 } ^ 10'h200) ||
	      lv_product_mantissa__h25315[0]) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980 =
	     (inst_spfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h30220 | op_xor_sign3__h30233 ||
	      inst_spfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h30220 & op_xor_sign3__h30233) ?
	       2'b11 :
	       (sign2__h30220 ? lv_result_is_zero___1__h53280 : 2'b01) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 =
	     exponent2__h30244 <= exponent3__h30235 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 =
	     (resultant_exponent__h65482 - 10'd127 ^ 10'h200) <= 10'd639 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_mantissa___1__h65784 :
	       _theResult___snd_fst__h66029 ;
  assign IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200 =
	     x_wget__h669[26:0] >>
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign IF_inst_spfpu_divider_rg_stage3_72_BIT_10_79_T_ETC___d360 =
	     inst_spfpu_divider_rg_stage3[10] ?
	       { 32'h7FC00000, _theResult_____1_snd__h14242 } :
	       { _theResult_____1_fst__h14252,
		 _theResult_____1_snd__h14253 } ;
  assign IF_inst_spfpu_divider_rg_stage3_72_BIT_7_28_OR_ETC___d349 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage3[12] ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_spfpu_divider_rg_stage3[12]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_72_BITS__ETC___d325[22:0] } ;
  assign INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 =
	     shift_neg__h25322 < { 4'd0, x__h25383 } ;
  assign INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 =
	     shift_neg__h6991 < { 5'd0, msb_zeros__h6831 } ;
  assign NOT_IF_condFlags32_res_whas__584_THEN_condFlag_ETC___d1727 =
	     !condFlags32_reswget_BITS_14_TO_10__q20[4] &&
	     (!IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709[7] ||
	      IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1714) &&
	     !ff_input_D_OUT[2] &&
	     IF_ff_input_first__324_BIT_1_679_THEN_NOT_IF_c_ETC___d1725 ;
  assign NOT_IF_getExp32_res_whas__707_THEN_getExp32_re_ETC___d1856 =
	     (getExp32_res_wget[23:16] != 8'd126 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant32_res_wget[68:46] == 23'd0)) &&
	     (!IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709[7] ||
	      ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d1377 =
	     ff_input_D_OUT[12:6] != 7'b1110000 &&
	     ff_input_D_OUT[12:6] != 7'b1111000 &&
	     ff_input_D_OUT[12:6] != 7'b1110001 &&
	     ff_input_D_OUT[12:6] != 7'b1111001 ||
	     ff_input_D_OUT[5:3] != 3'b0 ||
	     ff_input_D_OUT[16:13] != 4'b0100 ;
  assign NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2291 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 &&
	     !lv_op2_Nan__h94581 &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q21[3] ;
  assign NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2292 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2434 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     (IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 ||
	      ff_input_D_OUT[112] ||
	      condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q20[3]) ;
  assign NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2458 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 &&
	     !ff_input_D_OUT[112] &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      !condFlags32_reswget_BITS_14_TO_10__q20[3]) ;
  assign NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2459 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2205 =
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d1377 &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 ||
	      ff_input_D_OUT[12:8] == 5'b00011 &&
	      ff_input_D_OUT[16:13] == 4'b0100 ||
	      ff_input_D_OUT[12:8] == 5'b01011 &&
	      ff_input_D_OUT[16:13] == 4'b0100 ||
	      ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100 ||
	      ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) ;
  assign NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2211 =
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d1377 &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__324_BITS_12_TO_8_325_EQ_0b10_3_ETC___d1411) ;
  assign NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2214 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__324_BITS_12_TO_8_325_EQ_0b_ETC___d2211 ;
  assign NOT_ff_input_first__324_BIT_2_674_717_AND_NOT__ETC___d1807 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd157 &&
	     final_result__h97806[30:0] == 31'h7FFFFFFF &&
	     !setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ;
  assign NOT_ff_input_first__324_BIT_2_674_717_AND_ff_i_ETC___d1813 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd158 &&
	     final_result__h97806 == 32'hFFFFFFFF &&
	     !setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ;
  assign NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246 =
	     !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 &&
	     (!_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ||
	      !x_wget__h669[26] &&
	      INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195) ;
  assign NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 =
	     x__h14287 | inst_spfpu_divider_rg_stage3[52] ;
  assign _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933 =
	     ({ 3'd0, x__h46538 } < exponent_difference__h30258 ||
	      IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779[0]) &&
	     mantissa_to_shift__h30257 != 73'd0 ;
  assign _0_CONCAT_INV_IF_condFlags32_res_whas__584_THEN_ETC___d2225 =
	     { 24'd0, x__h103305 } * { 24'd0, x__h103391 } ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 =
	     { 3'd0, inst_spfm_add_sub_ff_stage5[6:0] } - 10'd1 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 <=
	     resultant_exponent_sub__h65475 ;
  assign _1_CONCAT_getMant32_res_wget__490_BITS_68_TO_46_ETC___d1741 =
	     final_man__h97798 <<
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 =
	     10'd1 - lv_product_exponent__h25313 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 =
	     (_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ^
	      10'h200) <=
	     10'd512 ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 =
	     10'd1 - inst_spfpu_divider_rg_stage2[18:9] ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 =
	     (_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h5365 = { inst_spfpu_divider_rg_stage1[32:9], 3'd0 } ;
  assign _dividend___1__h3571 = _dividend__h3401 - 27'd1 ;
  assign _dividend__h2763 =
	     { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[25:0],
	       !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q6[28] } ;
  assign _dividend__h2899 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[25:0],
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[55] } ;
  assign _dividend__h3400 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h2899 :
	       _dividend__h2763 ;
  assign _dividend__h3401 = _dividend__h3400 - ~_dividend__h3400 ;
  assign _numerator__h5366 = { inst_spfpu_divider_rg_stage1[56:33], 3'd0 } ;
  assign _remainder___1__h3570 =
	     _remainder__h3398 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[82:56],
	       1'b0 } ;
  assign _remainder__h3398 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] :
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[54:26] ;
  assign _theResult_____1__h30268 = mantissa2__h30264 > mantissa3__h30265 ;
  assign _theResult_____1_fst__h14252 =
	     { inst_spfpu_divider_rg_stage3[12],
	       inst_spfpu_divider_rg_stage3[9] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage3[5] ?
		    31'd0 :
		    IF_NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_ETC___d350) } ;
  assign _theResult_____1_fst__h16800 =
	     lv_extended_mantissa___1__h16799[26] ?
	       result_exponent___1__h16822 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h25373 =
	     (msb_zeros__h25317 == 6'b000001) ?
	       lv_product_exponent__h25313 :
	       _theResult_____1_fst__h25376 ;
  assign _theResult_____1_fst__h25376 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 ?
	       lv_product_exponent_sub_shift__h25324 :
	       lv_product_exponent_sub_zerosMSB__h25326 ;
  assign _theResult_____1_fst__h66354 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299 &&
	     _theResult_____3_fst__h65619 ;
  assign _theResult_____1_fst__h98974 =
	     ff_input_D_OUT[1] &&
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ||
	     lv_invalid___2__h98234 ;
  assign _theResult_____1_snd__h14231 =
	     inst_spfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h14242 =
	     (~inst_spfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h14253 =
	     inst_spfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h14270 ;
  assign _theResult_____1_snd__h14270 =
	     inst_spfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h14380 ;
  assign _theResult_____1_snd__h14380 =
	     (NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h14620 ;
  assign _theResult_____1_snd__h14620 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_72_BIT_77__ETC___d337[7:0] ==
	      8'd255) ?
	       5'd5 :
	       _theResult_____1_snd__h14638 ;
  assign _theResult_____1_snd__h14638 =
	     NOT_inst_spfpu_divider_rg_stage3_72_BITS_50_TO_ETC___d295 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h25374 =
	     (msb_zeros__h25317 == 6'b000001) ?
	       lv_product_mantissa__h25315 :
	       _theResult_____1_snd__h25377 ;
  assign _theResult_____1_snd__h25377 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d572 ?
	       lv_product_mantissa_shiftL_expo__h25323 :
	       lv_product_mantissa_shiftL_zerosMSB__h25325 ;
  assign _theResult_____1_snd__h98975 =
	     (ff_input_D_OUT[1] &&
	      setCanonicalNaN_argwget_BITS_95_TO_64__q11[31]) ?
	       32'd0 :
	       final_result___3__h98235 ;
  assign _theResult_____1_snd__h99034 =
	     !IF_NOT_IF_condFlags32_res_whas__584_THEN_condF_ETC___d1847 &&
	     IF_NOT_IF_condFlags32_res_whas__584_THEN_condF_ETC___d1861 ;
  assign _theResult_____1_snd_snd_fst__h66382 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_fst__h65621 ;
  assign _theResult_____1_snd_snd_snd__h66383 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_snd_fst__h65623 ;
  assign _theResult_____2_fst__h98754 =
	     NOT_ff_input_first__324_BIT_2_674_717_AND_NOT__ETC___d1807 ||
	     NOT_ff_input_first__324_BIT_2_674_717_AND_ff_i_ETC___d1813 ;
  assign _theResult_____2_snd__h98755 =
	     NOT_ff_input_first__324_BIT_2_674_717_AND_NOT__ETC___d1807 ?
	       32'h7FFFFFFF :
	       _theResult_____2_snd__h98862 ;
  assign _theResult_____2_snd__h98862 =
	     NOT_ff_input_first__324_BIT_2_674_717_AND_ff_i_ETC___d1813 ?
	       32'hFFFFFFFF :
	       _theResult_____2_snd__h98865 ;
  assign _theResult_____2_snd__h98865 = final_result__h97806 + 32'd1 ;
  assign _theResult_____3__h116889 =
	     { 27'd0,
	       IF_IF_IF_condFlags32_res_whas__584_THEN_condFl_ETC___d2523[51:50] } -
	     29'd1 ;
  assign _theResult_____3_fst__h65619 =
	     !inst_spfm_add_sub_ff_stage5[14] && _theResult_____6__h65499 ;
  assign _theResult_____3_fst__h66269 =
	     ex_overflow__h65490 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	     8'd255 ;
  assign _theResult_____3_fst__h94635 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q20[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[0]) ?
	       _theResult_____3_fst__h94840 :
	       5'd0 ;
  assign _theResult_____3_fst__h94840 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags32_reswget_BITS_14_TO_10__q20[0] |
	      condFlags32_reswget_BITS_9_TO_5__q21[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h95257 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h98237 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_argwget_BITS_95_TO_64__q11[31]) ?
	       lv_invalid___2__h98234 :
	       _theResult_____1_fst__h98974 ;
  assign _theResult_____3_snd__h94636 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q20[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[0]) ?
	       32'd0 :
	       CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q22 ;
  assign _theResult_____3_snd__h95258 =
	     (IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 &
	      lv_op2_Nan__h94581) ?
	       32'h7FC00000 :
	       IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1642 ;
  assign _theResult_____3_snd_fst__h65621 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		ex_overflow__h65490 :
		_theResult_____3_fst__h66269) ;
  assign _theResult_____3_snd_fst__h66271 =
	     ex_overflow__h65490 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1249[7:0] ==
	     8'd255 ||
	     lv_inexact__h65498 ;
  assign _theResult_____3_snd_snd_fst__h65623 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		lv_inexact__h65498 :
		_theResult_____3_snd_fst__h66271) ;
  assign _theResult_____3_snd_snd_fst__h98240 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_argwget_BITS_95_TO_64__q11[31]) ?
	       ~final_result___3__h98235 + 32'd1 :
	       _theResult_____1_snd__h98975 ;
  assign _theResult_____3_snd_snd_snd__h65624 =
	     inst_spfm_add_sub_ff_stage5[14] ?
	       { inst_spfm_add_sub_ff_stage5[15], 31'h7F800000 } :
	       { inst_spfm_add_sub_ff_stage5[12] ?
		   inst_spfm_add_sub_ff_stage5[13] :
		   (inst_spfm_add_sub_ff_stage5[17] ?
		      inst_spfm_add_sub_ff_stage5[18] :
		      inst_spfm_add_sub_ff_stage5[22]),
		 (inst_spfm_add_sub_ff_stage5[12] ||
		  inst_spfm_add_sub_ff_stage5[17]) ?
		   31'd0 :
		   IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1265 } ;
  assign _theResult_____4__h14128 =
	     IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 ?
	       lv_rounded_quotient___1__h14495 :
	       lv_rounded_quotient__h14127 ;
  assign _theResult_____4_snd_fst__h30463 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       exponent2__h30244 :
	       exponent3__h30235 ;
  assign _theResult_____5__h65500 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 ?
	       lv_rounded_mantissa___1__h66184 :
	       IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:48] ;
  assign _theResult_____6__h65499 =
	     !inst_spfm_add_sub_ff_stage5[95] &&
	     !inst_spfm_add_sub_ff_stage5[94] &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 &&
	     lv_inexact__h65498 ||
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1309 ;
  assign _theResult_____6_fst__h53181 =
	     (!inst_spfm_add_sub_ff_stage2[4] ||
	      !inst_spfm_add_sub_ff_stage2[14]) &&
	     inst_spfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_snd_snd__h53184 =
	     (inst_spfm_add_sub_ff_stage2[4] &&
	      inst_spfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h53185 :
	       ((inst_spfm_add_sub_ff_stage2[4] ||
		 inst_spfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h53247 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h53231 =
	     (inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       (inst_spfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h53284 :
		  IF_inst_spfm_add_sub_ff_stage2_read__38_BITS_9_ETC___d980) :
	       2'd0 ;
  assign _theResult____h14125 =
	     inst_spfpu_divider_rg_stage3[50:23] != 28'd0 ||
	     inst_spfpu_divider_rg_stage3[51] ||
	     inst_spfpu_divider_rg_stage3[6] ;
  assign _theResult____h15964 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h16080 :
	       lv_remainder__h16170 ;
  assign _theResult____h30234 =
	     (!inst_spfm_add_sub_ff_stage2[14] &&
	      !inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 &&
	      !inst_spfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h39456 :
	       73'd0 ;
  assign _theResult____h53450 =
	     inst_spfm_add_sub_ff_stage4[171] ?
	       sub_mantissa__h53449 :
	       add_mantissa__h53446 ;
  assign _theResult____h74498 =
	     (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q9[31]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] + 32'd1 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign _theResult____h74510 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[5:0] !=
	     6'd0 ;
  assign _theResult____h80370 =
	     (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q10[63]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] + 64'd1 :
	       inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign _theResult____h80382 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[37:0] !=
	     38'd0 ;
  assign _theResult____h94857 =
	     (setCanonicalNaN_argwget_BITS_95_TO_64__q11[30:23] <
	      setCanonicalNaN_argwget_BITS_63_TO_32__q12[30:23]) ?
	       2'b01 :
	       ((setCanonicalNaN_argwget_BITS_95_TO_64__q11[30:23] ==
		 setCanonicalNaN_argwget_BITS_63_TO_32__q12[30:23]) ?
		  ((setCanonicalNaN_argwget_BITS_95_TO_64__q11[22:0] <
		    setCanonicalNaN_argwget_BITS_63_TO_32__q12[22:0]) ?
		     2'b01 :
		     ((setCanonicalNaN_argwget_BITS_95_TO_64__q11[22:0] ==
		       setCanonicalNaN_argwget_BITS_63_TO_32__q12[22:0]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult___fst__h103747 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[1]) ?
	       _theResult___fst__h103755 :
	       quiet_nan_two__h103248 ;
  assign _theResult___fst__h103755 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[3]) &&
	     quiet_nan_two__h103248 ;
  assign _theResult___fst__h13911 =
	     x_wget__h669[26] ?
	       x_wget__h669[26:0] :
	       _theResult___fst__h13915 ;
  assign _theResult___fst__h13915 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 ?
	       lv_quotient_shiftL_expo__h6992 :
	       lv_quotient_shiftL_zerosMSB__h6994 ;
  assign _theResult___fst__h25329 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 ?
	       _theResult_____1_fst__h25373 :
	       lv_product_exponent_inc_shift__h25321 ;
  assign _theResult___fst__h65812 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[105:96] :
	       _theResult___fst__h65816 ;
  assign _theResult___fst__h65816 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ?
	       resultant_exponent_sub_zerosMSB__h65480 :
	       10'd0 ;
  assign _theResult___fst__h6980 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       27'd1 :
	       _theResult___fst__h6999 ;
  assign _theResult___fst__h6999 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___fst__h13911 :
	       lv_quotient___1__h7016 ;
  assign _theResult___fst__h98053 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h98160 :
	       _theResult___fst__h98100 ;
  assign _theResult___fst__h98100 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      lv_invalid__h97786) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h98141 ;
  assign _theResult___fst__h98141 =
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1723 ?
	       _1_CONCAT_getMant32_res_wget__490_BITS_68_TO_46_ETC___d1741[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h98160 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      lv_invalid__h97786) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h98202 ;
  assign _theResult___fst__h98202 =
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721 ?
	       _1_CONCAT_getMant32_res_wget__490_BITS_68_TO_46_ETC___d1741[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h98489 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
	     ff_input_D_OUT[1] &&
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1827 ||
	     lv_invalid__h97786 ;
  assign _theResult___fst__h98610 =
	     !setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ||
	     getExp32_res_wget[23:16] != 8'd158 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h98680 =
	     !IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721 ||
	     lv_invalid__h97786 ;
  assign _theResult___snd__h98607 =
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1723 ?
	       32'd0 :
	       _theResult___snd__h98611 ;
  assign _theResult___snd__h98611 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ?
	       32'h80000000 :
	       32'h7FFFFFFF ;
  assign _theResult___snd__h98681 =
	     (IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721 ||
	      setCanonicalNaN_argwget_BITS_95_TO_64__q11[31]) ?
	       32'd0 :
	       32'hFFFFFFFF ;
  assign _theResult___snd_fst__h13995 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___snd_fst__h14005 :
	       inst_spfpu_divider_rg_stage2[18:9] ;
  assign _theResult___snd_fst__h14005 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       10'd0 :
	       _theResult___snd_fst__h14013 ;
  assign _theResult___snd_fst__h14013 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___snd_fst__h14023 :
	       lv_exponent_inc_shift__h6990 ;
  assign _theResult___snd_fst__h14023 =
	     x_wget__h669[26] ?
	       inst_spfpu_divider_rg_stage2[18:9] :
	       _theResult___snd_fst__h14025 ;
  assign _theResult___snd_fst__h14025 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d195 ?
	       lv_exponent_sub_shift__h6993 :
	       lv_exponent_sub_zerosMSB__h6995 ;
  assign _theResult___snd_fst__h25414 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d469 ?
	       _theResult_____1_snd__h25374 :
	       lv_product_mantissa___1__h25360 ;
  assign _theResult___snd_fst__h66029 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[95:23] :
	       _theResult___snd_fst__h66031 ;
  assign _theResult___snd_fst__h66031 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ?
	       resultant_mantissa_norm_zerosMSB__h65479 :
	       resultant_mantissa_norm_expo__h65478 ;
  assign _theResult___snd_fst__h98011 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[4] ||
	      IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709[7] &&
	      !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1714) ?
	       _theResult___fst__h98489 :
	       _theResult___snd_fst__h98045 ;
  assign _theResult___snd_fst__h98045 =
	     ff_input_D_OUT[2] ?
	       lv_invalid__h97786 :
	       _theResult___snd_fst__h98055 ;
  assign _theResult___snd_fst__h98055 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h98162 :
	       _theResult___snd_fst__h98102 ;
  assign _theResult___snd_fst__h98102 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      lv_invalid__h97786 ||
	      IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1723) ?
	       lv_invalid__h97786 :
	       _theResult___fst__h98610 ;
  assign _theResult___snd_fst__h98162 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      lv_invalid__h97786 ||
	      IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721) ?
	       lv_invalid__h97786 :
	       _theResult___fst__h98680 ;
  assign _theResult___snd_snd__h98492 =
	     (!setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
	      ff_input_D_OUT[5:3] == 3'b011) ?
	       32'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 &&
		 setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
		 !ff_input_D_OUT[1]) ?
		  32'hFFFFFFFF :
		  IF_IF_getExp32_res_whas__707_THEN_getExp32_res_ETC___d1764) ;
  assign _theResult___snd_snd_snd_fst__h98542 =
	     ff_input_D_OUT[2] ?
	       32'd0 :
	       _theResult___snd_snd_snd_fst__h98544 ;
  assign _theResult___snd_snd_snd_fst__h98544 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h98625 :
	       _theResult___snd_snd_snd_fst__h98548 ;
  assign _theResult___snd_snd_snd_fst__h98548 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      lv_invalid__h97786) ?
	       final_result___1__h98552 :
	       _theResult___snd_snd_snd_fst__h98576 ;
  assign _theResult___snd_snd_snd_fst__h98576 =
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1723 ?
	       _1_CONCAT_getMant32_res_wget__490_BITS_68_TO_46_ETC___d1741[54:23] :
	       _theResult___snd__h98607 ;
  assign _theResult___snd_snd_snd_fst__h98625 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      lv_invalid__h97786) ?
	       final_result___1__h98181 :
	       _theResult___snd_snd_snd_fst__h98650 ;
  assign _theResult___snd_snd_snd_fst__h98650 =
	     IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1721 ?
	       _1_CONCAT_getMant32_res_wget__490_BITS_68_TO_46_ETC___d1741[54:23] :
	       _theResult___snd__h98681 ;
  assign _theResult___snd_snd_snd_snd_fst__h98486 =
	     (condFlags32_reswget_BITS_14_TO_10__q20[4] ||
	      IF_getExp32_res_whas__707_THEN_getExp32_res_wg_ETC___d1709[7] &&
	      !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1714) ?
	       _theResult___snd_snd__h98492 :
	       _theResult___snd_snd_snd_fst__h98542 ;
  assign add_mantissa__h53446 =
	     inst_spfm_add_sub_ff_stage4[158:86] +
	     inst_spfm_add_sub_ff_stage4[85:13] ;
  assign and_sign__h94583 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &
	     setCanonicalNaN_argwget_BITS_63_TO_32__q12[31] ;
  assign condFlags32_argwget_BITS_30_TO_8__q19 = condFlags32_arg_wget[30:8] ;
  assign condFlags32_argwget_BITS_61_TO_39__q18 =
	     condFlags32_arg_wget[61:39] ;
  assign condFlags32_argwget_BITS_92_TO_70__q17 =
	     condFlags32_arg_wget[92:70] ;
  assign condFlags32_reswget_BITS_14_TO_10__q20 =
	     condFlags32_res_wget[14:10] ;
  assign condFlags32_reswget_BITS_9_TO_5__q21 = condFlags32_res_wget[9:5] ;
  assign ex_overflow__h65490 =
	     !IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1200 ;
  assign exp1__h106663 = exp1_temp__h103252 - { 5'd0, x__h106734 } ;
  assign exp1_temp__h103252 = { 2'b0, getExp32_res_wget[23:16] } ;
  assign exp2__h106664 = exp2_temp__h103253 - { 5'd0, x__h110653 } ;
  assign exp2_temp__h103253 = { 2'b0, getExp32_res_wget[15:8] } ;
  assign expo3_zero__h30232 = inst_spfm_add_sub_ff_stage2[48:41] != 8'd0 ;
  assign expo__h74500 = 8'd158 - { 3'd0, x__h74790[4:0] } ;
  assign expo__h80372 = 8'd190 - { 2'd0, x__h80680[5:0] } ;
  assign exponent2__h30244 =
	     inst_spfm_add_sub_ff_stage2[5] ?
	       10'd0 :
	       inst_spfm_add_sub_ff_stage2[108:99] ;
  assign exponent3__h30223 = { 2'b0, inst_spfm_add_sub_ff_stage2[48:41] } ;
  assign exponent3__h30235 =
	     exponent3__h30223 + { 9'd0, inst_spfm_add_sub_ff_stage2[17] } ;
  assign exponent___1__h117460 = exponent__h116875 + 9'd1 ;
  assign exponent__h116875 = { 1'b0, getExp32_res_wget[23:16] } ;
  assign exponent_difference__h30258 =
	     lv_minuend__h30254 - _theResult_____4_snd_fst__h30463 ;
  assign ff_input_first__324_BITS_12_TO_8_325_EQ_0b1010_ETC___d1582 =
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101) &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] == 5'b11010 &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b11010 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] == 5'b00100 &&
	       ff_input_D_OUT[16:13] == 4'b0100 &&
	       ff_input_D_OUT[0] ||
	       (ff_input_D_OUT[12:8] != 5'b00100 ||
		ff_input_D_OUT[16:13] != 4'b0100) &&
	       (ff_input_D_OUT[12:8] == 5'b11000 &&
		ff_input_D_OUT[16:13] == 4'b0100 &&
		ff_input_D_OUT[0] ||
		(ff_input_D_OUT[12:8] != 5'b11000 ||
		 ff_input_D_OUT[16:13] != 4'b0100) &&
		(ff_input_first__324_BITS_12_TO_8_325_EQ_0b1110_ETC___d1357 ||
		 (ff_input_D_OUT[12:6] == 7'b1110000 ||
		  ff_input_D_OUT[12:6] == 7'b1111000 ||
		  ff_input_D_OUT[12:6] == 7'b1110001 ||
		  ff_input_D_OUT[12:6] == 7'b1111001) &&
		 ff_input_D_OUT[5:3] == 3'b0 &&
		 ff_input_D_OUT[16:13] == 4'b0100)))) ;
  assign ff_input_first__324_BITS_12_TO_8_325_EQ_0b10_3_ETC___d1411 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     ff_input_D_OUT[0] ;
  assign ff_input_first__324_BITS_12_TO_8_325_EQ_0b1110_ETC___d1357 =
	     ff_input_D_OUT[12:8] == 5'b11100 &&
	     ff_input_D_OUT[5:3] == 3'b001 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign fflags__h117139 =
	     { condFlags32_reswget_BITS_14_TO_10__q20[0] | y__h117153,
	       4'b0 } ;
  assign fflags__h16357 = { 4'b0, lv_inexact__h16308 } ;
  assign fflags__h65521 =
	     { !inst_spfm_add_sub_ff_stage5[9] &&
	       !inst_spfm_add_sub_ff_stage5[8] &&
	       inst_spfm_add_sub_ff_stage5[16],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h66382,
	       _theResult_____1_fst__h66354,
	       _theResult_____1_snd_snd_snd__h66383 } ;
  assign fflags__h74515 = { 4'd0, inexact__h74511 } ;
  assign fflags__h80387 = { 4'd0, inexact__h80383 } ;
  assign final_man__h97798 = { 32'd1, getMant32_res_wget[68:46] } ;
  assign final_result___1__h98181 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ?
	       (lv_invalid__h97786 ? 32'hFFFFFFFF : 32'd0) :
	       32'hFFFFFFFF ;
  assign final_result___1__h98552 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ?
	       (lv_invalid__h97786 ? 32'h7FFFFFFF : 32'h80000000) :
	       32'h7FFFFFFF ;
  assign final_result___3__h98235 =
	     IF_ff_input_first__324_BITS_5_TO_3_353_EQ_0b0__ETC___d1800 ?
	       _theResult_____2_snd__h98755 :
	       final_result__h97806 ;
  assign final_result__h117314 = { ff_input_D_OUT[112], 31'd0 } ;
  assign final_result__h16313 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q1[7:0],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__76__ETC__q2[24:2] } ;
  assign final_result__h97806 =
	     condFlags32_reswget_BITS_14_TO_10__q20[3] ?
	       32'd0 :
	       _theResult___snd_snd_snd_snd_fst__h98486 ;
  assign getMant32_argwget_BITS_31_TO_0__q16 = getMant32_arg_wget[31:0] ;
  assign getMant32_argwget_BITS_63_TO_32__q15 = getMant32_arg_wget[63:32] ;
  assign getMant32_argwget_BITS_95_TO_64__q14 = getMant32_arg_wget[95:64] ;
  assign getMant32_reswget_BITS_45_TO_23__q24 = getMant32_res_wget[45:23] ;
  assign getMant32_reswget_BITS_68_TO_46__q23 = getMant32_res_wget[68:46] ;
  assign inexact__h74511 = x__h74529 | _theResult____h74510 ;
  assign inexact__h80383 = x__h80401 | _theResult____h80382 ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q10 =
	     inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q9 =
	     inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 =
	     inst_spfm_add_sub_ff_input_register[59:50] - 10'd127 ;
  assign inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 =
	     (inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 =
	     inst_spfm_add_sub_ff_stage2[15] |
	     inst_spfm_add_sub_ff_stage2[13] ;
  assign inst_spfm_add_sub_ff_stage5_read__173_BIT_14_1_ETC___d1299 =
	     inst_spfm_add_sub_ff_stage5[14] ||
	     (inst_spfm_add_sub_ff_stage5[95] ||
	      inst_spfm_add_sub_ff_stage5[94] ||
	      _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1194 ||
	      !lv_inexact__h65498) &&
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__173_BI_ETC___d1293 ||
	     !IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1262[23] ||
	     inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[84:2] ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q4 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q5 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 =
	     inst_spfpu_divider_rg_stage2[18:9] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <=
	     10'd640 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <
	     10'd361 ;
  assign local_expo___1__h80209 = expo__h74500 + 8'd1 ;
  assign local_expo___1__h91284 = expo__h80372 + 8'd1 ;
  assign lsb_zeros__h25319 =
	     lv_product_mantissa__h25315[0] ?
	       6'd0 :
	       (lv_product_mantissa__h25315[1] ?
		  6'd1 :
		  (lv_product_mantissa__h25315[2] ?
		     6'd2 :
		     (lv_product_mantissa__h25315[3] ?
			6'd3 :
			(lv_product_mantissa__h25315[4] ?
			   6'd4 :
			   (lv_product_mantissa__h25315[5] ?
			      6'd5 :
			      (lv_product_mantissa__h25315[6] ?
				 6'd6 :
				 (lv_product_mantissa__h25315[7] ?
				    6'd7 :
				    (lv_product_mantissa__h25315[8] ?
				       6'd8 :
				       (lv_product_mantissa__h25315[9] ?
					  6'd9 :
					  (lv_product_mantissa__h25315[10] ?
					     6'd10 :
					     (lv_product_mantissa__h25315[11] ?
						6'd11 :
						(lv_product_mantissa__h25315[12] ?
						   6'd12 :
						   (lv_product_mantissa__h25315[13] ?
						      6'd13 :
						      (lv_product_mantissa__h25315[14] ?
							 6'd14 :
							 (lv_product_mantissa__h25315[15] ?
							    6'd15 :
							    (lv_product_mantissa__h25315[16] ?
							       6'd16 :
							       (lv_product_mantissa__h25315[17] ?
								  6'd17 :
								  (lv_product_mantissa__h25315[18] ?
								     6'd18 :
								     (lv_product_mantissa__h25315[19] ?
									6'd19 :
									(lv_product_mantissa__h25315[20] ?
									   6'd20 :
									   (lv_product_mantissa__h25315[21] ?
									      6'd21 :
									      (lv_product_mantissa__h25315[22] ?
										 6'd22 :
										 (lv_product_mantissa__h25315[23] ?
										    6'd23 :
										    (lv_product_mantissa__h25315[24] ?
										       6'd24 :
										       (lv_product_mantissa__h25315[25] ?
											  6'd25 :
											  (lv_product_mantissa__h25315[26] ?
											     6'd26 :
											     (lv_product_mantissa__h25315[27] ?
												6'd27 :
												(lv_product_mantissa__h25315[28] ?
												   6'd28 :
												   (lv_product_mantissa__h25315[29] ?
												      6'd29 :
												      (lv_product_mantissa__h25315[30] ?
													 6'd30 :
													 (lv_product_mantissa__h25315[31] ?
													    6'd31 :
													    (lv_product_mantissa__h25315[32] ?
													       6'd32 :
													       (lv_product_mantissa__h25315[33] ?
														  6'd33 :
														  (lv_product_mantissa__h25315[34] ?
														     6'd34 :
														     (lv_product_mantissa__h25315[35] ?
															6'd35 :
															(lv_product_mantissa__h25315[36] ?
															   6'd36 :
															   (lv_product_mantissa__h25315[37] ?
															      6'd37 :
															      (lv_product_mantissa__h25315[38] ?
																 6'd38 :
																 (lv_product_mantissa__h25315[39] ?
																    6'd39 :
																    (lv_product_mantissa__h25315[40] ?
																       6'd40 :
																       (lv_product_mantissa__h25315[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h25315[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h25315[43] ?
																		6'd43 :
																		(lv_product_mantissa__h25315[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h25315[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h25315[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h25315[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h25315[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h6988 =
	     x_wget__h669[0] ?
	       5'd0 :
	       (x_wget__h669[1] ?
		  5'd1 :
		  (x_wget__h669[2] ?
		     5'd2 :
		     (x_wget__h669[3] ?
			5'd3 :
			(x_wget__h669[4] ?
			   5'd4 :
			   (x_wget__h669[5] ?
			      5'd5 :
			      (x_wget__h669[6] ?
				 5'd6 :
				 (x_wget__h669[7] ?
				    5'd7 :
				    (x_wget__h669[8] ?
				       5'd8 :
				       (x_wget__h669[9] ?
					  5'd9 :
					  (x_wget__h669[10] ?
					     5'd10 :
					     (x_wget__h669[11] ?
						5'd11 :
						(x_wget__h669[12] ?
						   5'd12 :
						   (x_wget__h669[13] ?
						      5'd13 :
						      (x_wget__h669[14] ?
							 5'd14 :
							 (x_wget__h669[15] ?
							    5'd15 :
							    (x_wget__h669[16] ?
							       5'd16 :
							       (x_wget__h669[17] ?
								  5'd17 :
								  (x_wget__h669[18] ?
								     5'd18 :
								     (x_wget__h669[19] ?
									5'd19 :
									(x_wget__h669[20] ?
									   5'd20 :
									   (x_wget__h669[21] ?
									      5'd21 :
									      (x_wget__h669[22] ?
										 5'd22 :
										 (x_wget__h669[23] ?
										    5'd23 :
										    (x_wget__h669[24] ?
										       5'd24 :
										       (x_wget__h669[25] ?
											  5'd25 :
											  (x_wget__h669[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lv_compare_result__h94585 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ?
	       (setCanonicalNaN_argwget_BITS_63_TO_32__q12[31] ?
		  { _theResult____h94857[0], _theResult____h94857[1] } :
		  2'b01) :
	       (setCanonicalNaN_argwget_BITS_63_TO_32__q12[31] ?
		  2'b10 :
		  _theResult____h94857) ;
  assign lv_exponent___1__h14524 =
	     inst_spfpu_divider_rg_stage3[22:13] + 10'd1 ;
  assign lv_exponent___1__h14611 = lv_exponent__h14130 + 10'd1 ;
  assign lv_exponent__h106665 = 10'd127 + y__h106726 ;
  assign lv_exponent__h14130 =
	     _theResult_____4__h14128[24] ?
	       lv_exponent___1__h14524 :
	       inst_spfpu_divider_rg_stage3[22:13] ;
  assign lv_exponent_inc_shift__h6990 =
	     inst_spfpu_divider_rg_stage2[18:9] +
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign lv_exponent_sub_shift__h6993 =
	     inst_spfpu_divider_rg_stage2[18:9] - shift_neg__h6991 ;
  assign lv_exponent_sub_zerosMSB__h6995 =
	     inst_spfpu_divider_rg_stage2[18:9] - { 5'd0, msb_zeros__h6831 } ;
  assign lv_extended_mantissa___1__h16799 =
	     lv_extended_mantissa__h16309 + 27'd4 ;
  assign lv_extended_mantissa__h16309 = { 1'b0, result_mantissa__h16300 } ;
  assign lv_final_output__h14230 =
	     { inst_spfpu_divider_rg_stage3[12], 31'h7F800000 } ;
  assign lv_inexact1__h97811 = x__h98729 | lv_sticky__h97809 ;
  assign lv_inexact___1__h98232 = lv_inexact__h97804 | lv_inexact1__h97811 ;
  assign lv_inexact__h16308 = x__h16786 | lv_sticky__h16306 ;
  assign lv_inexact__h65498 = x__h66164 | lv_sticky__h65496 ;
  assign lv_inexact__h97804 =
	     !condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	     IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1858 ;
  assign lv_invalid___2__h98234 =
	     IF_ff_input_first__324_BITS_5_TO_3_353_EQ_0b0__ETC___d1800 ?
	       _theResult_____2_fst__h98754 :
	       lv_invalid__h97802 ;
  assign lv_invalid__h97786 =
	     condFlags32_reswget_BITS_14_TO_10__q20[0] |
	     condFlags32_reswget_BITS_14_TO_10__q20[2] ;
  assign lv_invalid__h97802 =
	     condFlags32_reswget_BITS_14_TO_10__q20[3] ?
	       lv_invalid__h97786 :
	       _theResult___snd_fst__h98011 ;
  assign lv_invalid__h97813 =
	     (!condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	      NOT_IF_condFlags32_res_whas__584_THEN_condFlag_ETC___d1727) ?
	       _theResult_____3_fst__h98237 :
	       lv_invalid__h97802 ;
  assign lv_leading_zeros__h116880 =
	     IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2463[1] ?
	       6'd0 :
	       (IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2463[0] ?
		  6'd1 :
		  (getMant32_res_wget[68] ?
		     6'd2 :
		     (getMant32_res_wget[67] ?
			6'd3 :
			(getMant32_res_wget[66] ?
			   6'd4 :
			   (getMant32_res_wget[65] ?
			      6'd5 :
			      (getMant32_res_wget[64] ?
				 6'd6 :
				 (getMant32_res_wget[63] ?
				    6'd7 :
				    (getMant32_res_wget[62] ?
				       6'd8 :
				       (getMant32_res_wget[61] ?
					  6'd9 :
					  (getMant32_res_wget[60] ?
					     6'd10 :
					     (getMant32_res_wget[59] ?
						6'd11 :
						(getMant32_res_wget[58] ?
						   6'd12 :
						   (getMant32_res_wget[57] ?
						      6'd13 :
						      (getMant32_res_wget[56] ?
							 6'd14 :
							 (getMant32_res_wget[55] ?
							    6'd15 :
							    (getMant32_res_wget[54] ?
							       6'd16 :
							       (getMant32_res_wget[53] ?
								  6'd17 :
								  (getMant32_res_wget[52] ?
								     6'd18 :
								     (getMant32_res_wget[51] ?
									6'd19 :
									(getMant32_res_wget[50] ?
									   6'd20 :
									   (getMant32_res_wget[49] ?
									      6'd21 :
									      (getMant32_res_wget[48] ?
										 6'd22 :
										 (getMant32_res_wget[47] ?
										    6'd23 :
										    (getMant32_res_wget[46] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_man___1__h80184 = lv_man__h74513 + 25'd1 ;
  assign lv_man___1__h91259 = lv_man__h80385 + 25'd1 ;
  assign lv_man__h74513 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[30:8] } ;
  assign lv_man__h80385 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[62:40] } ;
  assign lv_minuend__h30254 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       exponent3__h30235 :
	       exponent2__h30244 ;
  assign lv_op1_subnormal__h103243 =
	     condFlags32_reswget_BITS_14_TO_10__q20[4] |
	     condFlags32_reswget_BITS_14_TO_10__q20[3] ;
  assign lv_op2_Nan__h94581 =
	     condFlags32_reswget_BITS_9_TO_5__q21[2] |
	     condFlags32_reswget_BITS_9_TO_5__q21[0] ;
  assign lv_op2_subnormal__h103244 =
	     condFlags32_reswget_BITS_9_TO_5__q21[4] |
	     condFlags32_reswget_BITS_9_TO_5__q21[3] ;
  assign lv_product_exponent___1__h25346 =
	     inst_spfm_add_sub_ff_input_register[59:50] + 10'd1 ;
  assign lv_product_exponent__h25313 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_exponent___1__h25346 :
	       inst_spfm_add_sub_ff_input_register[59:50] ;
  assign lv_product_exponent_inc_shift__h25321 =
	     lv_product_exponent__h25313 +
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 ;
  assign lv_product_exponent_sub_shift__h25324 =
	     lv_product_exponent__h25313 - shift_neg__h25322 ;
  assign lv_product_exponent_sub_zerosMSB__h25326 =
	     lv_product_exponent__h25313 - y__h25408 ;
  assign lv_product_mantissa___1__h25345 =
	     { 1'd0, inst_spfm_add_sub_ff_input_register[107:60] } ;
  assign lv_product_mantissa___1__h25360 =
	     { IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d590[48:1],
	       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d695 } ;
  assign lv_product_mantissa__h17203 =
	     { inst_spfm_add_sub_ff_input_register[107:60], 1'b0 } ;
  assign lv_product_mantissa__h25315 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_mantissa___1__h25345 :
	       lv_product_mantissa__h17203 ;
  assign lv_product_mantissa_shiftL_expo__h25323 =
	     lv_product_mantissa__h25315 << shift_neg__h25322 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h25325 =
	     lv_product_mantissa__h25315 << x__h25383 ;
  assign lv_quotient___1__h7016 =
	     { IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200[26:1],
	       lv_sticky___1__h7017 } ;
  assign lv_quotient_shiftL_expo__h6992 =
	     x_wget__h669[26:0] << shift_neg__h6991 ;
  assign lv_quotient_shiftL_zerosMSB__h6994 =
	     x_wget__h669[26:0] << msb_zeros__h6831 ;
  assign lv_remainder__h16080 =
	     lv_remainder_temp__h15961 + lv_root_temp_1__h15962 ;
  assign lv_remainder__h16170 =
	     lv_remainder_temp__h15961 - lv_root_temp_2__h15963 ;
  assign lv_remainder__h16734 = _theResult____h15964 + lv_root_rem__h16301 ;
  assign lv_remainder_temp__h15961 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_result__h95302 =
	     { or_sign__h94582,
	       setCanonicalNaN_argwget_BITS_63_TO_32__q12[30:0] } ;
  assign lv_result__h95343 =
	     { and_sign__h94583,
	       setCanonicalNaN_argwget_BITS_95_TO_64__q11[30:0] } ;
  assign lv_result_is_infinity___1__h53185 = { sign2__h30220, ~x__h53219 } ;
  assign lv_result_is_infinity___1__h53247 = { x__h53259 | y__h53260, 1'd1 } ;
  assign lv_result_is_zero___1__h53280 = { op_xor_sign3__h30233, 1'b1 } ;
  assign lv_result_is_zero___1__h53284 = { sign2__h30220, 1'd1 } ;
  assign lv_root_rem__h16301 = { 2'b0, x__h16273, 1'b1 } ;
  assign lv_root_temp_1__h15962 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_2__h15963 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_round_up___1__h14424 =
	     inst_spfpu_divider_rg_stage3[53] & y__h14436 ;
  assign lv_round_up___1__h14460 = x__h14472 & y__h14473 ;
  assign lv_round_up___1__h65930 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47] &
	     y__h65942 ;
  assign lv_round_up___1__h66152 =
	     lv_inexact__h65498 & inst_spfm_add_sub_ff_stage5[22] ;
  assign lv_round_up___1__h98317 =
	     IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748[22] &
	     y__h98329 ;
  assign lv_round_up___1__h98717 =
	     lv_inexact1__h97811 &
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ;
  assign lv_rounded_mantissa___1__h66184 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h66214 =
	     { 1'd0, _theResult_____5__h65500[24:1] } ;
  assign lv_rounded_quotient___1__h14495 =
	     lv_rounded_quotient__h14127 + 25'd1 ;
  assign lv_rounded_quotient__h14127 =
	     { 1'b0, inst_spfpu_divider_rg_stage3[77:54] } ;
  assign lv_rounded_quotient__h14525 =
	     { 1'd0, _theResult_____4__h14128[24:1] } ;
  assign lv_roundup___1__h16380 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h16392 ;
  assign lv_roundup___1__h16762 = lv_inexact__h16308 & y__h16774 ;
  assign lv_roundup___1__h80112 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[7] &
	     y__h80124 ;
  assign lv_roundup___1__h80149 = inexact__h74511 & y__h80162 ;
  assign lv_roundup___1__h91187 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[39] &
	     y__h91199 ;
  assign lv_roundup___1__h91224 = inexact__h80383 & y__h91237 ;
  assign lv_sticky___1__h7017 =
	     IF_inst_spfpu_divider_int_div_wr_final_out_wha_ETC___d200[0] |
	     ((_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros__h6988 } ^ 10'h200) ||
	      x_wget__h669[0]) ;
  assign lv_sticky__h16306 = x__h16712 != 29'd0 ;
  assign lv_sticky__h65496 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[45:0] !=
	     46'd0 ;
  assign lv_sticky__h97809 =
	     IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748[20:0] !=
	     21'd0 ;
  assign lv_summed_exponent__h103254 = x__h103506 + y__h103507 ;
  assign lv_zeros_on_left__h53452 =
	     _theResult____h53450[72] ?
	       7'd0 :
	       (_theResult____h53450[71] ?
		  7'd1 :
		  (_theResult____h53450[70] ?
		     7'd2 :
		     (_theResult____h53450[69] ?
			7'd3 :
			(_theResult____h53450[68] ?
			   7'd4 :
			   (_theResult____h53450[67] ?
			      7'd5 :
			      (_theResult____h53450[66] ?
				 7'd6 :
				 (_theResult____h53450[65] ?
				    7'd7 :
				    (_theResult____h53450[64] ?
				       7'd8 :
				       (_theResult____h53450[63] ?
					  7'd9 :
					  (_theResult____h53450[62] ?
					     7'd10 :
					     (_theResult____h53450[61] ?
						7'd11 :
						(_theResult____h53450[60] ?
						   7'd12 :
						   (_theResult____h53450[59] ?
						      7'd13 :
						      (_theResult____h53450[58] ?
							 7'd14 :
							 (_theResult____h53450[57] ?
							    7'd15 :
							    (_theResult____h53450[56] ?
							       7'd16 :
							       (_theResult____h53450[55] ?
								  7'd17 :
								  (_theResult____h53450[54] ?
								     7'd18 :
								     (_theResult____h53450[53] ?
									7'd19 :
									(_theResult____h53450[52] ?
									   7'd20 :
									   (_theResult____h53450[51] ?
									      7'd21 :
									      (_theResult____h53450[50] ?
										 7'd22 :
										 (_theResult____h53450[49] ?
										    7'd23 :
										    (_theResult____h53450[48] ?
										       7'd24 :
										       (_theResult____h53450[47] ?
											  7'd25 :
											  (_theResult____h53450[46] ?
											     7'd26 :
											     (_theResult____h53450[45] ?
												7'd27 :
												(_theResult____h53450[44] ?
												   7'd28 :
												   (_theResult____h53450[43] ?
												      7'd29 :
												      (_theResult____h53450[42] ?
													 7'd30 :
													 (_theResult____h53450[41] ?
													    7'd31 :
													    (_theResult____h53450[40] ?
													       7'd32 :
													       (_theResult____h53450[39] ?
														  7'd33 :
														  (_theResult____h53450[38] ?
														     7'd34 :
														     (_theResult____h53450[37] ?
															7'd35 :
															(_theResult____h53450[36] ?
															   7'd36 :
															   (_theResult____h53450[35] ?
															      7'd37 :
															      (_theResult____h53450[34] ?
																 7'd38 :
																 (_theResult____h53450[33] ?
																    7'd39 :
																    (_theResult____h53450[32] ?
																       7'd40 :
																       (_theResult____h53450[31] ?
																	  7'd41 :
																	  (_theResult____h53450[30] ?
																	     7'd42 :
																	     (_theResult____h53450[29] ?
																		7'd43 :
																		(_theResult____h53450[28] ?
																		   7'd44 :
																		   (_theResult____h53450[27] ?
																		      7'd45 :
																		      (_theResult____h53450[26] ?
																			 7'd46 :
																			 (_theResult____h53450[25] ?
																			    7'd47 :
																			    (_theResult____h53450[24] ?
																			       7'd48 :
																			       (_theResult____h53450[23] ?
																				  7'd49 :
																				  (_theResult____h53450[22] ?
																				     7'd50 :
																				     (_theResult____h53450[21] ?
																					7'd51 :
																					(_theResult____h53450[20] ?
																					   7'd52 :
																					   (_theResult____h53450[19] ?
																					      7'd53 :
																					      (_theResult____h53450[18] ?
																						 7'd54 :
																						 (_theResult____h53450[17] ?
																						    7'd55 :
																						    (_theResult____h53450[16] ?
																						       7'd56 :
																						       (_theResult____h53450[15] ?
																							  7'd57 :
																							  (_theResult____h53450[14] ?
																							     7'd58 :
																							     (_theResult____h53450[13] ?
																								7'd59 :
																								(_theResult____h53450[12] ?
																								   7'd60 :
																								   (_theResult____h53450[11] ?
																								      7'd61 :
																								      (_theResult____h53450[10] ?
																									 7'd62 :
																									 (_theResult____h53450[9] ?
																									    7'd63 :
																									    (_theResult____h53450[8] ?
																									       7'd64 :
																									       (_theResult____h53450[7] ?
																										  7'd65 :
																										  (_theResult____h53450[6] ?
																										     7'd66 :
																										     (_theResult____h53450[5] ?
																											7'd67 :
																											(_theResult____h53450[4] ?
																											   7'd68 :
																											   (_theResult____h53450[3] ?
																											      7'd69 :
																											      (_theResult____h53450[2] ?
																												 7'd70 :
																												 (_theResult____h53450[1] ?
																												    7'd71 :
																												    (_theResult____h53450[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h106655 =
	     { ~condFlags32_reswget_BITS_14_TO_10__q20[4],
	       getMant32_res_wget[68:46] } ;
  assign man2__h106656 =
	     { ~condFlags32_reswget_BITS_9_TO_5__q21[4],
	       getMant32_res_wget[45:23] } ;
  assign mantissa2__h30221 = { inst_spfm_add_sub_ff_stage2[98:50], 24'd0 } ;
  assign mantissa2__h30243 =
	     inst_spfm_add_sub_ff_stage2[5] ? 73'd0 : mantissa2__h30221 ;
  assign mantissa2__h30264 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       mantissa_to_shift___1__h30262 :
	       mantissa2__h30243 ;
  assign mantissa3___1__h39456 =
	     { 1'd0,
	       expo3_zero__h30232,
	       inst_spfm_add_sub_ff_stage2[40:18],
	       48'd0 } ;
  assign mantissa3__h30265 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       _theResult____h30234 :
	       mantissa_to_shift___1__h30262 ;
  assign mantissa___1__h125875 = { mantissa__h116881[50:0], 1'd0 } ;
  assign mantissa__h116879 =
	     { IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2463,
	       getMant32_res_wget[68:46],
	       27'd0 } ;
  assign mantissa__h116881 = mantissa__h116879 << x__h125878 ;
  assign mantissa__h116891 =
	     { IF_IF_IF_condFlags32_res_whas__584_THEN_condFl_ETC___d2523[49:0],
	       2'd0 } ;
  assign mantissa__h15966 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa_to_shift___1__h30262 =
	     { IF_IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_ETC___d779[72:1],
	       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d933 } ;
  assign mantissa_to_shift__h30257 =
	     IF_inst_spfm_add_sub_ff_stage2_read__38_BIT_5__ETC___d755 ?
	       mantissa2__h30243 :
	       _theResult____h30234 ;
  assign msb_zeros___1__h25348 = msb_zeros__h17222 + 6'd1 ;
  assign msb_zeros__h17222 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_input_register[106] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_input_register[105] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_input_register[104] ?
			6'd3 :
			(inst_spfm_add_sub_ff_input_register[103] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_input_register[102] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_input_register[101] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_input_register[100] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_input_register[99] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_input_register[98] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_input_register[97] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_input_register[96] ?
						6'd11 :
						(inst_spfm_add_sub_ff_input_register[95] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_input_register[94] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_input_register[93] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_input_register[92] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_input_register[91] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_input_register[90] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_input_register[89] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_input_register[88] ?
									6'd19 :
									(inst_spfm_add_sub_ff_input_register[87] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_input_register[86] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_input_register[85] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_input_register[84] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_input_register[83] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_input_register[82] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_input_register[81] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_input_register[80] ?
												6'd27 :
												(inst_spfm_add_sub_ff_input_register[79] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_input_register[78] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_input_register[77] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_input_register[76] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_input_register[75] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_input_register[74] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_input_register[73] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_input_register[72] ?
															6'd35 :
															(inst_spfm_add_sub_ff_input_register[71] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_input_register[70] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_input_register[69] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_input_register[68] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_input_register[67] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_input_register[66] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_input_register[65] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_input_register[64] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_input_register[63] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_input_register[62] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_input_register[61] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_input_register[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h25317 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       msb_zeros___1__h25348 :
	       msb_zeros__h17222 ;
  assign msb_zeros__h6831 =
	     x_wget__h669[26] ?
	       5'd0 :
	       (x_wget__h669[25] ?
		  5'd1 :
		  (x_wget__h669[24] ?
		     5'd2 :
		     (x_wget__h669[23] ?
			5'd3 :
			(x_wget__h669[22] ?
			   5'd4 :
			   (x_wget__h669[21] ?
			      5'd5 :
			      (x_wget__h669[20] ?
				 5'd6 :
				 (x_wget__h669[19] ?
				    5'd7 :
				    (x_wget__h669[18] ?
				       5'd8 :
				       (x_wget__h669[17] ?
					  5'd9 :
					  (x_wget__h669[16] ?
					     5'd10 :
					     (x_wget__h669[15] ?
						5'd11 :
						(x_wget__h669[14] ?
						   5'd12 :
						   (x_wget__h669[13] ?
						      5'd13 :
						      (x_wget__h669[12] ?
							 5'd14 :
							 (x_wget__h669[11] ?
							    5'd15 :
							    (x_wget__h669[10] ?
							       5'd16 :
							       (x_wget__h669[9] ?
								  5'd17 :
								  (x_wget__h669[8] ?
								     5'd18 :
								     (x_wget__h669[7] ?
									5'd19 :
									(x_wget__h669[6] ?
									   5'd20 :
									   (x_wget__h669[5] ?
									      5'd21 :
									      (x_wget__h669[4] ?
										 5'd22 :
										 (x_wget__h669[3] ?
										    5'd23 :
										    (x_wget__h669[2] ?
										       5'd24 :
										       (x_wget__h669[1] ?
											  5'd25 :
											  (x_wget__h669[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign new_value_final_result__h65530 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_snd_snd__h65624 ;
  assign op_xor_sign3__h30233 =
	     inst_spfm_add_sub_ff_stage2[12] ^ sign3__h30222 ;
  assign or_sign__h94582 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] |
	     setCanonicalNaN_argwget_BITS_63_TO_32__q12[31] ;
  assign quiet_nan_two__h103248 = x__h103900 | y__h103901 ;
  assign res__h74415 = ff_input_D_OUT[112] ? 32'hCF000000 : 32'd0 ;
  assign result_exponent___1__h16822 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent__h116888 = x__h126148 + y__h126149 ;
  assign result_mantissa__h16300 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h15964[28] } ;
  assign resultant_exponent___1__h66213 = resultant_exponent__h65482 + 10'd1 ;
  assign resultant_exponent__h65482 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_exponent_inc__h65477 :
	       _theResult___fst__h65812 ;
  assign resultant_exponent_inc__h65477 =
	     inst_spfm_add_sub_ff_stage5[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h65475 =
	     inst_spfm_add_sub_ff_stage5[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h65480 =
	     inst_spfm_add_sub_ff_stage5[105:96] -
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__173_ETC___d1192 ;
  assign resultant_mantissa___1__h65784 =
	     { 1'd0,
	       inst_spfm_add_sub_ff_stage5[95:25],
	       inst_spfm_add_sub_ff_stage5[23] |
	       inst_spfm_add_sub_ff_stage5[24] } ;
  assign resultant_mantissa_norm_expo__h65478 =
	     inst_spfm_add_sub_ff_stage5[95:23] <<
	     resultant_exponent_sub__h65475 ;
  assign resultant_mantissa_norm_zerosMSB__h65479 =
	     inst_spfm_add_sub_ff_stage5[95:23] << x__h66061 ;
  assign setCanonicalNaN_argwget_BITS_31_TO_0__q26 =
	     setCanonicalNaN_arg_wget[31:0] ;
  assign setCanonicalNaN_argwget_BITS_63_TO_32__q12 =
	     setCanonicalNaN_arg_wget[63:32] ;
  assign setCanonicalNaN_argwget_BITS_95_TO_64__q11 =
	     setCanonicalNaN_arg_wget[95:64] ;
  assign shift_neg__h25322 =
	     ~_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d468 +
	     10'd1 ;
  assign shift_neg__h6991 =
	     ~_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 +
	     10'd1 ;
  assign sign2__h30220 =
	     inst_spfm_add_sub_ff_stage2[110] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign3__h30222 =
	     inst_spfm_add_sub_ff_stage2[49] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sub_mantissa1__h53447 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[158:86] :
	       inst_spfm_add_sub_ff_stage4[85:13] ;
  assign sub_mantissa2__h53448 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[85:13] :
	       inst_spfm_add_sub_ff_stage4[158:86] ;
  assign sub_mantissa__h53449 =
	     sub_mantissa1__h53447 - sub_mantissa2__h53448 ;
  assign x1_avValue_fflags__h74421 =
	     (ff_input_D_OUT[111:81] == 31'd0) ?
	       5'd0 :
	       x_wget__h66680[36:32] ;
  assign x1_avValue_fflags__h80280 =
	     ff_input_D_OUT[1] ?
	       x_wget__h66680[36:32] :
	       x1_avValue_fflags__h74421 ;
  assign x1_avValue_fflags__h91360 =
	     ff_input_D_OUT[2] ?
	       x_wget__h66818[36:32] :
	       x1_avValue_fflags__h80280 ;
  assign x1_avValue_final_result__h74420 =
	     (ff_input_D_OUT[111:81] == 31'd0) ?
	       res__h74415 :
	       x_wget__h66680[31:0] ;
  assign x1_avValue_final_result__h80279 =
	     ff_input_D_OUT[1] ?
	       x_wget__h66680[31:0] :
	       x1_avValue_final_result__h74420 ;
  assign x1_avValue_final_result__h91359 =
	     ff_input_D_OUT[2] ?
	       x_wget__h66818[31:0] :
	       x1_avValue_final_result__h80279 ;
  assign x__h100778 =
	     (setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
	      condFlags32_reswget_BITS_14_TO_10__q20[1]) ?
	       10'd1 :
	       ((setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
		 condFlags32_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
		    condFlags32_reswget_BITS_14_TO_10__q20[4]) ?
		     10'd4 :
		     ((setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
		       condFlags32_reswget_BITS_14_TO_10__q20[3]) ?
			10'd8 :
			((!setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
			  condFlags32_reswget_BITS_14_TO_10__q20[3]) ?
			   10'd16 :
			   ((!setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
			     condFlags32_reswget_BITS_14_TO_10__q20[4]) ?
			      10'd32 :
			      ((!setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
				condFlags32_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] &&
				   condFlags32_reswget_BITS_14_TO_10__q20[1]) ?
				    10'd128 :
				    (condFlags32_reswget_BITS_14_TO_10__q20[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h103305 =
	     { ~lv_op1_subnormal__h103243, getMant32_res_wget[68:46] } ;
  assign x__h103391 =
	     { ~lv_op2_subnormal__h103244, getMant32_res_wget[45:23] } ;
  assign x__h103506 = x__h103508 + y__h103509 ;
  assign x__h103508 = x__h103510 - 10'd127 ;
  assign x__h103510 = exp1_temp__h103252 + exp2_temp__h103253 ;
  assign x__h103561 =
	     lv_invalid__h97786 ||
	     IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d2242 ||
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[1]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q20[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[3]) ;
  assign x__h103824 =
	     !lv_invalid__h97786 &&
	     !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d2242 &&
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[1]) &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	     !condFlags32_reswget_BITS_9_TO_5__q21[3] ;
  assign x__h103830 =
	     !lv_invalid__h97786 &&
	     !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d2242 &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q21[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q20[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[3]) ;
  assign x__h103887 =
	     (lv_invalid__h97786 ||
	      IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d2242) ?
	       quiet_nan_two__h103248 :
	       _theResult___fst__h103747 ;
  assign x__h103900 = condFlags32_reswget_BITS_14_TO_10__q20[2] & y__h103903 ;
  assign x__h103990 = lv_op1_subnormal__h103243 | lv_op2_subnormal__h103244 ;
  assign x__h106727 = exp1__h106663 + y__h106729 ;
  assign x__h106734 =
	     (~condFlags32_reswget_BITS_14_TO_10__q20[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q23[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q23[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q23[20] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q23[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q23[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q23[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q23[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q23[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q23[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q23[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q23[12] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q23[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q23[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q23[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q23[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q23[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q23[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q23[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q23[4] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q23[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q23[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q23[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q23[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h110653 =
	     (~condFlags32_reswget_BITS_9_TO_5__q21[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_45_TO_23__q24[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_45_TO_23__q24[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_45_TO_23__q24[20] ?
			5'd3 :
			(getMant32_reswget_BITS_45_TO_23__q24[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_45_TO_23__q24[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_45_TO_23__q24[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_45_TO_23__q24[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_45_TO_23__q24[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_45_TO_23__q24[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_45_TO_23__q24[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_45_TO_23__q24[12] ?
						5'd11 :
						(getMant32_reswget_BITS_45_TO_23__q24[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_45_TO_23__q24[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_45_TO_23__q24[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_45_TO_23__q24[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_45_TO_23__q24[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_45_TO_23__q24[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_45_TO_23__q24[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_45_TO_23__q24[4] ?
									5'd19 :
									(getMant32_reswget_BITS_45_TO_23__q24[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_45_TO_23__q24[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_45_TO_23__q24[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_45_TO_23__q24[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h114569 = man1__h106655 << x__h106734 ;
  assign x__h114597 = man2__h106656 << x__h110653 ;
  assign x__h114627 =
	     setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ^
	     setCanonicalNaN_argwget_BITS_63_TO_32__q12[31] ;
  assign x__h114691 =
	     !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 &&
	     !lv_op2_Nan__h94581 &&
	     (!condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      !condFlags32_reswget_BITS_9_TO_5__q21[1]) &&
	     (!condFlags32_reswget_BITS_14_TO_10__q20[3] ||
	      !condFlags32_reswget_BITS_9_TO_5__q21[3]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q20[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q21[3]) ;
  assign x__h114705 =
	     !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 &&
	     !lv_op2_Nan__h94581 &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q21[3] ;
  assign x__h114710 =
	     !IF_condFlags32_res_whas__584_THEN_condFlags32__ETC___d1590 &&
	     !lv_op2_Nan__h94581 &&
	     !condFlags32_reswget_BITS_14_TO_10__q20[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q21[3] &&
	     (condFlags32_reswget_BITS_9_TO_5__q21[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q20[3]) ;
  assign x__h117431 =
	     condFlags32_reswget_BITS_14_TO_10__q20[4] ?
	       exponent___1__h117460 :
	       exponent__h116875 ;
  assign x__h117462 = { 3'd0, lv_leading_zeros__h116880 } ;
  assign x__h125878 = lv_leading_zeros__h116880 - 6'd1 ;
  assign x__h125904 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q25[24:0],
	       1'd0 } ;
  assign x__h126148 = x__h126150 + 9'd63 ;
  assign x__h126150 =
	     { 1'd0,
	       IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2516[8:1] } ;
  assign x__h132015 = ff_input_D_OUT[13] ^ ff_input_D_OUT[14] ;
  assign x__h14053 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ;
  assign x__h14058 =
	     (!inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ||
	      inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ||
	      _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134) ?
	       x_wget__h669[0] :
	       lv_sticky___1__h7017 ;
  assign x__h14287 = _theResult____h14125 | inst_spfpu_divider_rg_stage3[53] ;
  assign x__h14437 = inst_spfpu_divider_rg_stage3[52] | _theResult____h14125 ;
  assign x__h14472 = x__h14474 | _theResult____h14125 ;
  assign x__h14474 =
	     inst_spfpu_divider_rg_stage3[53] |
	     inst_spfpu_divider_rg_stage3[52] ;
  assign x__h16010 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h15964[28],
	       1'd0 } ;
  assign x__h16273 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h15964[28] } ;
  assign x__h16671 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h15964[28] ;
  assign x__h16712 =
	     _theResult____h15964[28] ?
	       lv_remainder__h16734 :
	       _theResult____h15964 ;
  assign x__h16786 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h15964[28] ;
  assign x__h25383 = msb_zeros__h25317 - 6'd1 ;
  assign x__h25409 = { 4'd0, msb_zeros__h25317 } ;
  assign x__h29965 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      !(x__h29996 ^ inst_spfm_add_sub_ff_input_register[5])) ;
  assign x__h29996 =
	     inst_spfm_add_sub_ff_input_register[49] ^
	     inst_spfm_add_sub_ff_input_register[48] ;
  assign x__h30026 =
	     inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 &&
	     (!inst_spfm_add_sub_ff_input_register[107] ||
	      inst_spfm_add_sub_ff_input_register[59:50] != 10'd254) &&
	     (inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d459 ^
	      10'h200) <
	     10'd361 &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      inst_spfm_add_sub_ff_input_register[12] ||
	      inst_spfm_add_sub_ff_input_register[13]) &&
	     !inst_spfm_add_sub_ff_input_register[14] ;
  assign x__h30374 = x__h30386 | y__h30387 ;
  assign x__h30386 = _theResult_____1__h30268 & sign2__h30220 ;
  assign x__h46538 =
	     mantissa_to_shift__h30257[0] ?
	       7'd0 :
	       (mantissa_to_shift__h30257[1] ?
		  7'd1 :
		  (mantissa_to_shift__h30257[2] ?
		     7'd2 :
		     (mantissa_to_shift__h30257[3] ?
			7'd3 :
			(mantissa_to_shift__h30257[4] ?
			   7'd4 :
			   (mantissa_to_shift__h30257[5] ?
			      7'd5 :
			      (mantissa_to_shift__h30257[6] ?
				 7'd6 :
				 (mantissa_to_shift__h30257[7] ?
				    7'd7 :
				    (mantissa_to_shift__h30257[8] ?
				       7'd8 :
				       (mantissa_to_shift__h30257[9] ?
					  7'd9 :
					  (mantissa_to_shift__h30257[10] ?
					     7'd10 :
					     (mantissa_to_shift__h30257[11] ?
						7'd11 :
						(mantissa_to_shift__h30257[12] ?
						   7'd12 :
						   (mantissa_to_shift__h30257[13] ?
						      7'd13 :
						      (mantissa_to_shift__h30257[14] ?
							 7'd14 :
							 (mantissa_to_shift__h30257[15] ?
							    7'd15 :
							    (mantissa_to_shift__h30257[16] ?
							       7'd16 :
							       (mantissa_to_shift__h30257[17] ?
								  7'd17 :
								  (mantissa_to_shift__h30257[18] ?
								     7'd18 :
								     (mantissa_to_shift__h30257[19] ?
									7'd19 :
									(mantissa_to_shift__h30257[20] ?
									   7'd20 :
									   (mantissa_to_shift__h30257[21] ?
									      7'd21 :
									      (mantissa_to_shift__h30257[22] ?
										 7'd22 :
										 (mantissa_to_shift__h30257[23] ?
										    7'd23 :
										    (mantissa_to_shift__h30257[24] ?
										       7'd24 :
										       (mantissa_to_shift__h30257[25] ?
											  7'd25 :
											  (mantissa_to_shift__h30257[26] ?
											     7'd26 :
											     (mantissa_to_shift__h30257[27] ?
												7'd27 :
												(mantissa_to_shift__h30257[28] ?
												   7'd28 :
												   (mantissa_to_shift__h30257[29] ?
												      7'd29 :
												      (mantissa_to_shift__h30257[30] ?
													 7'd30 :
													 (mantissa_to_shift__h30257[31] ?
													    7'd31 :
													    (mantissa_to_shift__h30257[32] ?
													       7'd32 :
													       (mantissa_to_shift__h30257[33] ?
														  7'd33 :
														  (mantissa_to_shift__h30257[34] ?
														     7'd34 :
														     (mantissa_to_shift__h30257[35] ?
															7'd35 :
															(mantissa_to_shift__h30257[36] ?
															   7'd36 :
															   (mantissa_to_shift__h30257[37] ?
															      7'd37 :
															      (mantissa_to_shift__h30257[38] ?
																 7'd38 :
																 (mantissa_to_shift__h30257[39] ?
																    7'd39 :
																    (mantissa_to_shift__h30257[40] ?
																       7'd40 :
																       (mantissa_to_shift__h30257[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h30257[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h30257[43] ?
																		7'd43 :
																		(mantissa_to_shift__h30257[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h30257[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h30257[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h30257[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h30257[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h30257[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h30257[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h30257[51] ?
																					7'd51 :
																					(mantissa_to_shift__h30257[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h30257[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h30257[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h30257[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h30257[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h30257[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h30257[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h30257[59] ?
																								7'd59 :
																								(mantissa_to_shift__h30257[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h30257[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h30257[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h30257[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h30257[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h30257[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h30257[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h30257[67] ?
																											7'd67 :
																											(mantissa_to_shift__h30257[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h30257[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h30257[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h30257[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h30257[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h53104 = ~_theResult_____1__h30268 ;
  assign x__h53111 =
	     inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	     inst_spfm_add_sub_ff_stage2[6] ||
	     (!inst_spfm_add_sub_ff_stage2[16] ||
	      !inst_spfm_add_sub_ff_stage2[5]) &&
	     inst_spfm_add_sub_ff_stage2[4] &&
	     inst_spfm_add_sub_ff_stage2[14] &&
	     x__h53219 ;
  assign x__h53219 = sign2__h30220 ^ op_xor_sign3__h30233 ;
  assign x__h53227 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h53184 ;
  assign x__h53259 = x__h53261 & sign2__h30220 ;
  assign x__h53261 = inst_spfm_add_sub_ff_stage2[4] & y__h53262 ;
  assign x__h53263 = x__h53264 & inst_spfm_add_sub_ff_stage2[14] ;
  assign x__h53264 = ~inst_spfm_add_sub_ff_stage2[4] ;
  assign x__h53268 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h53231 ;
  assign x__h53292 = x__h53304 & y__h53305 ;
  assign x__h53304 =
	     (inst_spfm_add_sub_ff_stage2_read__38_BIT_15_61_ETC___d763 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       inst_spfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h53181 ;
  assign x__h53334 =
	     (inst_spfm_add_sub_ff_stage2[1] ||
	      !inst_spfm_add_sub_ff_stage2[6]) &&
	     inst_spfm_add_sub_ff_stage2[15] ;
  assign x__h53527 =
	     (_theResult____h53450 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h5430 = { _denominator__h5365, 2'b0, _numerator__h5366, 27'd0 } ;
  assign x__h66061 = inst_spfm_add_sub_ff_stage5[6:0] - 7'd1 ;
  assign x__h66082 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[48] |
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[46] ;
  assign x__h66164 =
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47] |
	     IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[46] ;
  assign x__h74529 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[7] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[6] ;
  assign x__h74790 =
	     _theResult____h74498[31] ?
	       6'd0 :
	       (_theResult____h74498[30] ?
		  6'd1 :
		  (_theResult____h74498[29] ?
		     6'd2 :
		     (_theResult____h74498[28] ?
			6'd3 :
			(_theResult____h74498[27] ?
			   6'd4 :
			   (_theResult____h74498[26] ?
			      6'd5 :
			      (_theResult____h74498[25] ?
				 6'd6 :
				 (_theResult____h74498[24] ?
				    6'd7 :
				    (_theResult____h74498[23] ?
				       6'd8 :
				       (_theResult____h74498[22] ?
					  6'd9 :
					  (_theResult____h74498[21] ?
					     6'd10 :
					     (_theResult____h74498[20] ?
						6'd11 :
						(_theResult____h74498[19] ?
						   6'd12 :
						   (_theResult____h74498[18] ?
						      6'd13 :
						      (_theResult____h74498[17] ?
							 6'd14 :
							 (_theResult____h74498[16] ?
							    6'd15 :
							    (_theResult____h74498[15] ?
							       6'd16 :
							       (_theResult____h74498[14] ?
								  6'd17 :
								  (_theResult____h74498[13] ?
								     6'd18 :
								     (_theResult____h74498[12] ?
									6'd19 :
									(_theResult____h74498[11] ?
									   6'd20 :
									   (_theResult____h74498[10] ?
									      6'd21 :
									      (_theResult____h74498[9] ?
										 6'd22 :
										 (_theResult____h74498[8] ?
										    6'd23 :
										    (_theResult____h74498[7] ?
										       6'd24 :
										       (_theResult____h74498[6] ?
											  6'd25 :
											  (_theResult____h74498[5] ?
											     6'd26 :
											     (_theResult____h74498[4] ?
												6'd27 :
												(_theResult____h74498[3] ?
												   6'd28 :
												   (_theResult____h74498[2] ?
												      6'd29 :
												      (_theResult____h74498[1] ?
													 6'd30 :
													 (_theResult____h74498[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h80125 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[8] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[6] ;
  assign x__h80325 = { 32'd0, ff_input_D_OUT[112:81] } ;
  assign x__h80401 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[39] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[38] ;
  assign x__h80680 =
	     _theResult____h80370[63] ?
	       7'd0 :
	       (_theResult____h80370[62] ?
		  7'd1 :
		  (_theResult____h80370[61] ?
		     7'd2 :
		     (_theResult____h80370[60] ?
			7'd3 :
			(_theResult____h80370[59] ?
			   7'd4 :
			   (_theResult____h80370[58] ?
			      7'd5 :
			      (_theResult____h80370[57] ?
				 7'd6 :
				 (_theResult____h80370[56] ?
				    7'd7 :
				    (_theResult____h80370[55] ?
				       7'd8 :
				       (_theResult____h80370[54] ?
					  7'd9 :
					  (_theResult____h80370[53] ?
					     7'd10 :
					     (_theResult____h80370[52] ?
						7'd11 :
						(_theResult____h80370[51] ?
						   7'd12 :
						   (_theResult____h80370[50] ?
						      7'd13 :
						      (_theResult____h80370[49] ?
							 7'd14 :
							 (_theResult____h80370[48] ?
							    7'd15 :
							    (_theResult____h80370[47] ?
							       7'd16 :
							       (_theResult____h80370[46] ?
								  7'd17 :
								  (_theResult____h80370[45] ?
								     7'd18 :
								     (_theResult____h80370[44] ?
									7'd19 :
									(_theResult____h80370[43] ?
									   7'd20 :
									   (_theResult____h80370[42] ?
									      7'd21 :
									      (_theResult____h80370[41] ?
										 7'd22 :
										 (_theResult____h80370[40] ?
										    7'd23 :
										    (_theResult____h80370[39] ?
										       7'd24 :
										       (_theResult____h80370[38] ?
											  7'd25 :
											  (_theResult____h80370[37] ?
											     7'd26 :
											     (_theResult____h80370[36] ?
												7'd27 :
												(_theResult____h80370[35] ?
												   7'd28 :
												   (_theResult____h80370[34] ?
												      7'd29 :
												      (_theResult____h80370[33] ?
													 7'd30 :
													 (_theResult____h80370[32] ?
													    7'd31 :
													    (_theResult____h80370[31] ?
													       7'd32 :
													       (_theResult____h80370[30] ?
														  7'd33 :
														  (_theResult____h80370[29] ?
														     7'd34 :
														     (_theResult____h80370[28] ?
															7'd35 :
															(_theResult____h80370[27] ?
															   7'd36 :
															   (_theResult____h80370[26] ?
															      7'd37 :
															      (_theResult____h80370[25] ?
																 7'd38 :
																 (_theResult____h80370[24] ?
																    7'd39 :
																    (_theResult____h80370[23] ?
																       7'd40 :
																       (_theResult____h80370[22] ?
																	  7'd41 :
																	  (_theResult____h80370[21] ?
																	     7'd42 :
																	     (_theResult____h80370[20] ?
																		7'd43 :
																		(_theResult____h80370[19] ?
																		   7'd44 :
																		   (_theResult____h80370[18] ?
																		      7'd45 :
																		      (_theResult____h80370[17] ?
																			 7'd46 :
																			 (_theResult____h80370[16] ?
																			    7'd47 :
																			    (_theResult____h80370[15] ?
																			       7'd48 :
																			       (_theResult____h80370[14] ?
																				  7'd49 :
																				  (_theResult____h80370[13] ?
																				     7'd50 :
																				     (_theResult____h80370[12] ?
																					7'd51 :
																					(_theResult____h80370[11] ?
																					   7'd52 :
																					   (_theResult____h80370[10] ?
																					      7'd53 :
																					      (_theResult____h80370[9] ?
																						 7'd54 :
																						 (_theResult____h80370[8] ?
																						    7'd55 :
																						    (_theResult____h80370[7] ?
																						       7'd56 :
																						       (_theResult____h80370[6] ?
																							  7'd57 :
																							  (_theResult____h80370[5] ?
																							     7'd58 :
																							     (_theResult____h80370[4] ?
																								7'd59 :
																								(_theResult____h80370[3] ?
																								   7'd60 :
																								   (_theResult____h80370[2] ?
																								      7'd61 :
																								      (_theResult____h80370[1] ?
																									 7'd62 :
																									 (_theResult____h80370[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h91200 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[40] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[38] ;
  assign x__h97024 =
	     { condFlags32_arg_wget[69:62] == 8'd0 &&
	       condFlags32_arg_wget[92:70] != 23'd0,
	       condFlags32_arg_wget[92:70] == 23'd0 &&
	       condFlags32_arg_wget[69:62] == 8'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_argwget_BITS_92_TO_70__q17[22],
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_arg_wget[92:70] == 23'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       !condFlags32_argwget_BITS_92_TO_70__q17[22] &&
	       condFlags32_arg_wget[92:70] != 23'd0 } ;
  assign x__h97358 =
	     { condFlags32_arg_wget[38:31] == 8'd0 &&
	       condFlags32_arg_wget[61:39] != 23'd0,
	       condFlags32_arg_wget[61:39] == 23'd0 &&
	       condFlags32_arg_wget[38:31] == 8'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_argwget_BITS_61_TO_39__q18[22],
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_arg_wget[61:39] == 23'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       !condFlags32_argwget_BITS_61_TO_39__q18[22] &&
	       condFlags32_arg_wget[61:39] != 23'd0 } ;
  assign x__h97539 =
	     { condFlags32_arg_wget[7:0] == 8'd0 &&
	       condFlags32_arg_wget[30:8] != 23'd0,
	       condFlags32_arg_wget[30:8] == 23'd0 &&
	       condFlags32_arg_wget[7:0] == 8'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_argwget_BITS_30_TO_8__q19[22],
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_arg_wget[30:8] == 23'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       !condFlags32_argwget_BITS_30_TO_8__q19[22] &&
	       condFlags32_arg_wget[30:8] != 23'd0 } ;
  assign x__h98463 =
	     final_result__h97806[0] |
	     IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748[21] ;
  assign x__h98729 =
	     IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748[22] |
	     IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748[21] ;
  assign x_data__h100771 = { 22'd0, x__h100778 } ;
  assign x_data__h94601 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h95258 :
	       _theResult_____3_snd__h94636 ;
  assign x_data__h95597 =
	     (ff_input_D_OUT[112:81] == 32'd0) ?
	       ff_input_D_OUT[112:81] :
	       x1_avValue_final_result__h91359 ;
  assign x_data__h95776 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q13,
	       setCanonicalNaN_argwget_BITS_95_TO_64__q11[30:0] } ;
  assign x_data__h97829 =
	     (!condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	      NOT_IF_condFlags32_res_whas__584_THEN_condFlag_ETC___d1727) ?
	       _theResult_____3_snd_snd_fst__h98240 :
	       final_result__h97806 ;
  assign x_fflags__h94603 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h95257 :
	       _theResult_____3_fst__h94635 ;
  assign x_fflags__h95599 =
	     (ff_input_D_OUT[112:81] == 32'd0) ?
	       5'b0 :
	       x1_avValue_fflags__h91360 ;
  assign x_fflags__h97831 =
	     { IF_NOT_IF_condFlags32_res_whas__584_THEN_condF_ETC___d1847,
	       3'd0,
	       _theResult_____1_snd__h99034 } ;
  assign x_lv_exponent__h6883 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	      NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d246) ?
	       10'd0 :
	       _theResult___snd_fst__h13995 ;
  assign x_lv_product_exponent__h17279 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       inst_spfm_add_sub_ff_input_register[59:50] :
	       _theResult___fst__h25329 ;
  assign x_lv_product_mantissa__h17280 =
	     (!inst_spfm_add_sub_ff_input_register_read__55_B_ETC___d460 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       lv_product_mantissa__h17203 :
	       _theResult___snd_fst__h25414 ;
  assign x_lv_quotient__h6882 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___fst__h6980 :
	       x_wget__h669[26:0] ;
  assign x_wget__h66680 =
	     { fflags__h74515,
	       !inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q9[31],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d2188[23] ?
		 local_expo___1__h80209 :
		 expo__h74500,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d2188[22:0] } ;
  assign x_wget__h66818 =
	     { fflags__h80387,
	       !inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q10[63],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d2066[23] ?
		 local_expo___1__h91284 :
		 expo__h80372,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d2066[22:0] } ;
  assign x_wget__h669 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q3[82:56],
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 } ;
  assign y__h103507 = { 9'd0, lv_op2_subnormal__h103244 } ;
  assign y__h103509 = { 9'd0, lv_op1_subnormal__h103243 } ;
  assign y__h103901 = condFlags32_reswget_BITS_9_TO_5__q21[2] & y__h103947 ;
  assign y__h103903 = ~condFlags32_reswget_BITS_9_TO_5__q21[0] ;
  assign y__h103947 = ~condFlags32_reswget_BITS_14_TO_10__q20[0] ;
  assign y__h106726 = x__h106727 - y__h106728 ;
  assign y__h106728 = exp2__h106664 + y__h110652 ;
  assign y__h106729 = { 9'd0, condFlags32_reswget_BITS_14_TO_10__q20[4] } ;
  assign y__h110652 = { 9'd0, condFlags32_reswget_BITS_9_TO_5__q21[4] } ;
  assign y__h117153 = ff_input_D_OUT[112] & y__h117174 ;
  assign y__h117174 = ~condFlags32_reswget_BITS_14_TO_10__q20[2] ;
  assign y__h117432 = x__h117462 - 9'd1 ;
  assign y__h126149 =
	     { 8'd0,
	       IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d2516[0] } ;
  assign y__h14436 = x__h14437 | inst_spfpu_divider_rg_stage3[54] ;
  assign y__h14473 = ~inst_spfpu_divider_rg_stage3[12] ;
  assign y__h16392 = x__h16671 | lv_sticky__h16306 ;
  assign y__h16774 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h25408 = x__h25409 - 10'd1 ;
  assign y__h30387 = x__h53104 & op_xor_sign3__h30233 ;
  assign y__h53260 = x__h53263 & op_xor_sign3__h30233 ;
  assign y__h53262 = ~inst_spfm_add_sub_ff_stage2[14] ;
  assign y__h53305 = ~inst_spfm_add_sub_ff_stage2[13] ;
  assign y__h65942 = x__h66082 | lv_sticky__h65496 ;
  assign y__h66178 = ~inst_spfm_add_sub_ff_stage5[22] ;
  assign y__h80124 = x__h80125 | _theResult____h74510 ;
  assign y__h80162 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q9[31]) ;
  assign y__h91199 = x__h91200 | _theResult____h80382 ;
  assign y__h91237 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q10[63]) ;
  assign y__h98329 = x__h98463 | lv_sticky__h97809 ;
  assign y__h98742 = ~setCanonicalNaN_argwget_BITS_95_TO_64__q11[31] ;
  always@(inst_spfpu_divider_rg_stage3 or
	  x__h14472 or lv_round_up___1__h14424 or lv_round_up___1__h14460)
  begin
    case (inst_spfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      lv_round_up___1__h14424;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      lv_round_up___1__h14460;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
	      inst_spfpu_divider_rg_stage3[53];
      default: IF_inst_spfpu_divider_rg_stage3_72_BITS_4_TO_2_ETC___d317 =
		   inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h14472 & inst_spfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  lv_inexact__h16308 or
	  lv_roundup___1__h16380 or lv_roundup___1__h16762)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      lv_roundup___1__h16380;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      lv_roundup___1__h16762;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
	      inst_spfpu_sqrt_rg_inter_stage[69];
      default: IF_inst_spfpu_sqrt_rg_inter_stage_read__76_BIT_ETC___d430 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h16308 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage5 or
	  lv_inexact__h65498 or
	  y__h66178 or
	  lv_round_up___1__h65930 or
	  lv_round_up___1__h66152 or
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217)
  begin
    case (inst_spfm_add_sub_ff_stage5[21:19])
      3'b0:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      lv_round_up___1__h65930;
      3'b010:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      lv_round_up___1__h66152;
      3'b100:
	  IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
	      IF_inst_spfm_add_sub_ff_stage5_read__173_BIT_9_ETC___d1217[47];
      default: IF_inst_spfm_add_sub_ff_stage5_read__173_BITS__ETC___d1238 =
		   inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		   lv_inexact__h65498 & y__h66178;
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget or
	  inexact__h74511 or
	  inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q9 or
	  lv_roundup___1__h80112 or
	  lv_roundup___1__h80149 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2184 =
	      lv_roundup___1__h80112;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2184 =
	      lv_roundup___1__h80149;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2184 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2159[7];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d2184 =
		   inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0] == 3'b010 &&
		   inexact__h74511 &
		   (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q9[31]);
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_llu_arg_wget or
	  inexact__h80383 or
	  inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q10 or
	  lv_roundup___1__h91187 or
	  lv_roundup___1__h91224 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2062 =
	      lv_roundup___1__h91187;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2062 =
	      lv_roundup___1__h91224;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2062 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2037[39];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d2062 =
		   inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0] == 3'b010 &&
		   inexact__h80383 &
		   (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q10[63]);
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h114627 or setCanonicalNaN_argwget_BITS_63_TO_32__q12)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q13 =
	      setCanonicalNaN_argwget_BITS_63_TO_32__q12[31];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q13 =
	      ~setCanonicalNaN_argwget_BITS_63_TO_32__q12[31];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q13 =
		   x__h114627;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h94585 or
	  condFlags32_reswget_BITS_14_TO_10__q20 or
	  condFlags32_reswget_BITS_9_TO_5__q21)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q22 =
	      (lv_compare_result__h94585[0] ||
	       condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q21[3]) ?
		32'd1 :
		32'd0;
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q22 =
	      (lv_compare_result__h94585 == 2'b01 &&
	       (!condFlags32_reswget_BITS_14_TO_10__q20[3] ||
		!condFlags32_reswget_BITS_9_TO_5__q21[3])) ?
		32'd1 :
		32'd0;
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q22 =
	      (lv_compare_result__h94585 == 2'b11 ||
	       condFlags32_reswget_BITS_14_TO_10__q20[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q21[3]) ?
		32'd1 :
		32'd0;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_IF_lv_comp_ETC__q22 = 32'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h97811 or
	  y__h98742 or
	  lv_round_up___1__h98317 or
	  lv_round_up___1__h98717 or
	  IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__324_BITS_5_TO_3_353_EQ_0b0__ETC___d1800 =
	      lv_round_up___1__h98317;
      3'b010:
	  IF_ff_input_first__324_BITS_5_TO_3_353_EQ_0b0__ETC___d1800 =
	      lv_round_up___1__h98717;
      3'b100:
	  IF_ff_input_first__324_BITS_5_TO_3_353_EQ_0b0__ETC___d1800 =
	      IF_IF_condFlags32_res_whas__584_THEN_condFlags_ETC___d1748[22];
      default: IF_ff_input_first__324_BITS_5_TO_3_353_EQ_0b0__ETC___d1800 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h97811 & y__h98742;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    146'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_result <= `BSV_ASSIGNMENT_DELAY
	    { 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	      6'd0 };
      end
    else
      begin
        if (inst_spfm_add_sub_rg_state_handler_EN)
	  inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_rg_state_handler_D_IN;
	if (inst_spfpu_divider_int_div_rg_state_EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state_D_IN;
	if (inst_spfpu_divider_rg_state_handler_EN)
	  inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_state_handler_D_IN;
	if (inst_spfpu_sqrt_ff_final_out_EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out_D_IN;
	if (inst_spfpu_sqrt_rg_inter_stage_EN)
	  inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_spfpu_sqrt_rg_state_EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state_D_IN;
	if (rg_multicycle_op_EN)
	  rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY rg_multicycle_op_D_IN;
	if (rg_result_EN) rg_result <= `BSV_ASSIGNMENT_DELAY rg_result_D_IN;
      end
    if (inst_spfm_add_sub_ff_input_register_EN)
      inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_input_register_D_IN;
    if (inst_spfm_add_sub_ff_stage2_EN)
      inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage2_D_IN;
    if (inst_spfm_add_sub_ff_stage4_EN)
      inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage4_D_IN;
    if (inst_spfm_add_sub_ff_stage5_EN)
      inst_spfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage5_D_IN;
    if (inst_spfpu_divider_int_div_rg_inter_stage_EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_spfpu_divider_rg_stage1_EN)
      inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage1_D_IN;
    if (inst_spfpu_divider_rg_stage2_EN)
      inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage2_D_IN;
    if (inst_spfpu_divider_rg_stage3_EN)
      inst_spfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage3_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_spfm_add_sub_ff_input_register = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 =
	172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage5 = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_rg_state_handler = 3'h2;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_divider_rg_stage3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_state_handler = 2'h2;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 6'h2A;
    rg_multicycle_op = 1'h0;
    rg_result = 38'h2AAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d2573 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d2574 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d2575 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h132546 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d2573 ||
	   TASK_testplusargs___d2574 && TASK_testplusargs___d2575))
	$write("[%10d", v__h132546, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d2573 ||
	   TASK_testplusargs___d2574 && TASK_testplusargs___d2575))
	$write("FPU: op1:%h op2:%h op3:%h",
	       _start_operand1,
	       _start_operand2,
	       _start_operand3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d2573 ||
	   TASK_testplusargs___d2574 && TASK_testplusargs___d2575))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d2579 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d2580 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d2581 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h132681 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d2579 ||
	   TASK_testplusargs___d2580 && TASK_testplusargs___d2581))
	$write("[%10d", v__h132681, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d2579 ||
	   TASK_testplusargs___d2580 && TASK_testplusargs___d2581))
	$write("FPU: opcode:%b f7:%h f3:%b imm:%h issp:%b",
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d2579 ||
	   TASK_testplusargs___d2580 && TASK_testplusargs___d2581))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_recursive_stage] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_stage2]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_sqrt_rl_inter_stage] and [RL_inst_spfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 218, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 218, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 218, column 57: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  NOT_ff_input_first__324_BITS_12_TO_6_362_EQ_0b_ETC___d2291)
	$display("Divide_by_zero");
  end
  // synopsys translate_on
endmodule  // mkfpu

