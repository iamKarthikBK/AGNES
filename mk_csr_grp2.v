//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:08:34 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_core_req                O     1
// mv_core_resp                   O    33 reg
// RDY_mv_core_resp               O     1 const
// mav_fwd_req                    O    48 reg
// RDY_mav_fwd_req                O     1 reg
// mv_csr_misa                    O    32
// mv_frm                         O     3 reg
// mv_update_fs                   O     2 reg
// RDY_mv_update_fs               O     1 const
// RDY_ma_update_fflags           O     1 const
// mv_cacheenable                 O     3 reg
// RDY_mv_cacheenable             O     1 const
// mv_csr_misa_c                  O     1 reg
// RDY_mv_csr_misa_c              O     1 const
// mv_pmp_cfg                     O    32 reg
// RDY_mv_pmp_cfg                 O     1 const
// mv_pmp_addr                    O   116 reg
// RDY_mv_pmp_addr                O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_core_req_req                I    48
// ma_update_fflags_flags         I     5
// EN_ma_core_req                 I     1
// EN_ma_update_fflags            I     1
// EN_mav_fwd_req                 I     1
//
// Combinational paths from inputs to outputs:
//   EN_mav_fwd_req -> RDY_ma_core_req
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csr_grp2(CLK,
		   RST_N,

		   ma_core_req_req,
		   EN_ma_core_req,
		   RDY_ma_core_req,

		   mv_core_resp,
		   RDY_mv_core_resp,

		   EN_mav_fwd_req,
		   mav_fwd_req,
		   RDY_mav_fwd_req,

		   mv_csr_misa,

		   mv_frm,

		   mv_update_fs,
		   RDY_mv_update_fs,

		   ma_update_fflags_flags,
		   EN_ma_update_fflags,
		   RDY_ma_update_fflags,

		   mv_cacheenable,
		   RDY_mv_cacheenable,

		   mv_csr_misa_c,
		   RDY_mv_csr_misa_c,

		   mv_pmp_cfg,
		   RDY_mv_pmp_cfg,

		   mv_pmp_addr,
		   RDY_mv_pmp_addr);
  input  CLK;
  input  RST_N;

  // action method ma_core_req
  input  [47 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_core_resp
  output [32 : 0] mv_core_resp;
  output RDY_mv_core_resp;

  // actionvalue method mav_fwd_req
  input  EN_mav_fwd_req;
  output [47 : 0] mav_fwd_req;
  output RDY_mav_fwd_req;

  // value method mv_csr_misa
  output [31 : 0] mv_csr_misa;

  // value method mv_frm
  output [2 : 0] mv_frm;

  // value method mv_update_fs
  output [1 : 0] mv_update_fs;
  output RDY_mv_update_fs;

  // action method ma_update_fflags
  input  [4 : 0] ma_update_fflags_flags;
  input  EN_ma_update_fflags;
  output RDY_ma_update_fflags;

  // value method mv_cacheenable
  output [2 : 0] mv_cacheenable;
  output RDY_mv_cacheenable;

  // value method mv_csr_misa_c
  output mv_csr_misa_c;
  output RDY_mv_csr_misa_c;

  // value method mv_pmp_cfg
  output [31 : 0] mv_pmp_cfg;
  output RDY_mv_pmp_cfg;

  // value method mv_pmp_addr
  output [115 : 0] mv_pmp_addr;
  output RDY_mv_pmp_addr;

  // signals for module outputs
  wire [115 : 0] mv_pmp_addr;
  wire [47 : 0] mav_fwd_req;
  wire [32 : 0] mv_core_resp;
  wire [31 : 0] mv_csr_misa, mv_pmp_cfg;
  wire [2 : 0] mv_cacheenable, mv_frm;
  wire [1 : 0] mv_update_fs;
  wire RDY_ma_core_req,
       RDY_ma_update_fflags,
       RDY_mav_fwd_req,
       RDY_mv_cacheenable,
       RDY_mv_core_resp,
       RDY_mv_csr_misa_c,
       RDY_mv_pmp_addr,
       RDY_mv_pmp_cfg,
       RDY_mv_update_fs,
       mv_csr_misa_c;

  // inlined wires
  reg [32 : 0] rg_resp_to_core_1_wget;
  wire [65 : 0] csr_op_arg_wget;

  // register rg_bpuenable
  reg rg_bpuenable;
  wire rg_bpuenable_D_IN, rg_bpuenable_EN;

  // register rg_denable
  reg rg_denable;
  wire rg_denable_D_IN, rg_denable_EN;

  // register rg_fflags
  reg [4 : 0] rg_fflags;
  wire [4 : 0] rg_fflags_D_IN;
  wire rg_fflags_EN;

  // register rg_frm
  reg [2 : 0] rg_frm;
  wire [2 : 0] rg_frm_D_IN;
  wire rg_frm_EN;

  // register rg_fs
  reg [1 : 0] rg_fs;
  wire [1 : 0] rg_fs_D_IN;
  wire rg_fs_EN;

  // register rg_ienable
  reg rg_ienable;
  wire rg_ienable_D_IN, rg_ienable_EN;

  // register rg_misa_c
  reg rg_misa_c;
  wire rg_misa_c_D_IN, rg_misa_c_EN;

  // register rg_misa_f
  reg rg_misa_f;
  wire rg_misa_f_D_IN, rg_misa_f_EN;

  // register rg_misa_i
  reg rg_misa_i;
  wire rg_misa_i_D_IN, rg_misa_i_EN;

  // register rg_misa_m
  reg rg_misa_m;
  wire rg_misa_m_D_IN, rg_misa_m_EN;

  // register rg_mscratch
  reg [31 : 0] rg_mscratch;
  wire [31 : 0] rg_mscratch_D_IN;
  wire rg_mscratch_EN;

  // register rg_resp_to_core
  reg [32 : 0] rg_resp_to_core;
  wire [32 : 0] rg_resp_to_core_D_IN;
  wire rg_resp_to_core_EN;

  // register v_pmp_addr_0
  reg [31 : 0] v_pmp_addr_0;
  wire [31 : 0] v_pmp_addr_0_D_IN;
  wire v_pmp_addr_0_EN;

  // register v_pmp_addr_1
  reg [31 : 0] v_pmp_addr_1;
  wire [31 : 0] v_pmp_addr_1_D_IN;
  wire v_pmp_addr_1_EN;

  // register v_pmp_addr_2
  reg [31 : 0] v_pmp_addr_2;
  wire [31 : 0] v_pmp_addr_2_D_IN;
  wire v_pmp_addr_2_EN;

  // register v_pmp_addr_3
  reg [31 : 0] v_pmp_addr_3;
  wire [31 : 0] v_pmp_addr_3_D_IN;
  wire v_pmp_addr_3_EN;

  // register v_pmp_cfg_0
  reg [7 : 0] v_pmp_cfg_0;
  wire [7 : 0] v_pmp_cfg_0_D_IN;
  wire v_pmp_cfg_0_EN;

  // register v_pmp_cfg_1
  reg [7 : 0] v_pmp_cfg_1;
  wire [7 : 0] v_pmp_cfg_1_D_IN;
  wire v_pmp_cfg_1_EN;

  // register v_pmp_cfg_2
  reg [7 : 0] v_pmp_cfg_2;
  wire [7 : 0] v_pmp_cfg_2_D_IN;
  wire v_pmp_cfg_2_EN;

  // register v_pmp_cfg_3
  reg [7 : 0] v_pmp_cfg_3;
  wire [7 : 0] v_pmp_cfg_3_D_IN;
  wire v_pmp_cfg_3_EN;

  // ports of submodule ff_fwd_request
  wire [47 : 0] ff_fwd_request_D_IN, ff_fwd_request_D_OUT;
  wire ff_fwd_request_CLR,
       ff_fwd_request_DEQ,
       ff_fwd_request_EMPTY_N,
       ff_fwd_request_ENQ,
       ff_fwd_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_resp_to_core__dreg_update,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_ma_update_fflags,
       CAN_FIRE_mav_fwd_req,
       WILL_FIRE_RL_rg_resp_to_core__dreg_update,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_ma_update_fflags,
       WILL_FIRE_mav_fwd_req;

  // inputs to muxes for submodule ports
  wire MUX_rg_fflags_write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149,
	       x_wget__h484;
  wire [31 : 0] readdata__h1554,
		x__h3873,
		x__h7585,
		x__h7899,
		x__h8212,
		x__h8575,
		x__h8597,
		x_wget_fst__h3128,
		x_wget_snd_fst__h3213;
  wire [7 : 0] x__h2916;
  wire [4 : 0] x__h9173;
  wire [3 : 0] x__h2935;
  wire [2 : 0] r1__read__h2948;
  wire [1 : 0] r1__read_BITS_1_TO_0___h9207,
	       r1__read__h2950,
	       x_wget_snd_snd__h3214;
  wire NOT_ma_update_fflags_flags_OR_rg_fflags_7_20_E_ETC___d322,
       _dand1rg_fs_EN_write,
       ma_core_req_req_BITS_47_TO_36_EQ_0x1_6_AND_NOT_ETC___d273,
       ma_core_req_req_BITS_47_TO_36_EQ_0x2_9_AND_NOT_ETC___d271;

  // action method ma_core_req
  assign RDY_ma_core_req = ff_fwd_request_FULL_N ;
  assign CAN_FIRE_ma_core_req = ff_fwd_request_FULL_N ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_core_resp
  assign mv_core_resp = rg_resp_to_core ;
  assign RDY_mv_core_resp = 1'd1 ;

  // actionvalue method mav_fwd_req
  assign mav_fwd_req = ff_fwd_request_D_OUT ;
  assign RDY_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign CAN_FIRE_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign WILL_FIRE_mav_fwd_req = EN_mav_fwd_req ;

  // value method mv_csr_misa
  assign mv_csr_misa =
	     { 2'd1,
	       4'bxxxx /* unspecified value */ ,
	       13'd32,
	       rg_misa_m,
	       3'd0,
	       rg_misa_i,
	       2'd0,
	       rg_misa_f,
	       2'd0,
	       rg_misa_c,
	       2'd0 } ;

  // value method mv_frm
  assign mv_frm = rg_frm ;

  // value method mv_update_fs
  assign mv_update_fs = rg_fs ;
  assign RDY_mv_update_fs = 1'd1 ;

  // action method ma_update_fflags
  assign RDY_ma_update_fflags = 1'd1 ;
  assign CAN_FIRE_ma_update_fflags = 1'd1 ;
  assign WILL_FIRE_ma_update_fflags = EN_ma_update_fflags ;

  // value method mv_cacheenable
  assign mv_cacheenable = { r1__read_BITS_1_TO_0___h9207, rg_ienable } ;
  assign RDY_mv_cacheenable = 1'd1 ;

  // value method mv_csr_misa_c
  assign mv_csr_misa_c = rg_misa_c ;
  assign RDY_mv_csr_misa_c = 1'd1 ;

  // value method mv_pmp_cfg
  assign mv_pmp_cfg = { v_pmp_cfg_3, v_pmp_cfg_2, v_pmp_cfg_1, v_pmp_cfg_0 } ;
  assign RDY_mv_pmp_cfg = 1'd1 ;

  // value method mv_pmp_addr
  assign mv_pmp_addr =
	     { v_pmp_addr_3[29:1],
	       v_pmp_addr_2[29:1],
	       v_pmp_addr_1[29:1],
	       v_pmp_addr_0[29:1] } ;
  assign RDY_mv_pmp_addr = 1'd1 ;

  // submodule ff_fwd_request
  FIFOL1 #(.width(32'd48)) ff_fwd_request(.RST(RST_N),
					  .CLK(CLK),
					  .D_IN(ff_fwd_request_D_IN),
					  .ENQ(ff_fwd_request_ENQ),
					  .DEQ(ff_fwd_request_DEQ),
					  .CLR(ff_fwd_request_CLR),
					  .D_OUT(ff_fwd_request_D_OUT),
					  .FULL_N(ff_fwd_request_FULL_N),
					  .EMPTY_N(ff_fwd_request_EMPTY_N));

  // rule RL_rg_resp_to_core__dreg_update
  assign CAN_FIRE_RL_rg_resp_to_core__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_resp_to_core__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_fflags_write_1__SEL_1 =
	     EN_ma_core_req &&
	     (ma_core_req_req[47:36] == 12'h001 ||
	      ma_core_req_req[47:36] == 12'h003) ;

  // inlined wires
  always@(ma_core_req_req or
	  rg_fflags or
	  rg_frm or
	  x__h2916 or
	  rg_misa_m or
	  rg_misa_i or
	  rg_misa_f or
	  rg_misa_c or
	  rg_mscratch or
	  x__h3873 or
	  v_pmp_addr_0 or
	  v_pmp_addr_1 or v_pmp_addr_2 or v_pmp_addr_3 or x__h2935)
  begin
    case (ma_core_req_req[47:36])
      12'h001: rg_resp_to_core_1_wget = { 28'd134217728, rg_fflags };
      12'h002: rg_resp_to_core_1_wget = { 30'd536870912, rg_frm };
      12'h003: rg_resp_to_core_1_wget = { 25'd16777216, x__h2916 };
      12'h301:
	  rg_resp_to_core_1_wget =
	      { 20'd655392,
		rg_misa_m,
		3'd0,
		rg_misa_i,
		2'd0,
		rg_misa_f,
		2'd0,
		rg_misa_c,
		2'd0 };
      12'h340: rg_resp_to_core_1_wget = { 1'd1, rg_mscratch };
      12'h3A0: rg_resp_to_core_1_wget = { 1'd1, x__h3873 };
      12'h3A1,
      12'h3A2,
      12'h3A3,
      12'h3B4,
      12'h3B5,
      12'h3B6,
      12'h3B7,
      12'h3B8,
      12'h3B9,
      12'h3BA,
      12'h3BB,
      12'h3BC,
      12'h3BD,
      12'h3BE,
      12'h3BF:
	  rg_resp_to_core_1_wget = 33'h100000000;
      12'h3B0: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_0 };
      12'h3B1: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_1 };
      12'h3B2: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_2 };
      12'h3B3: rg_resp_to_core_1_wget = { 1'd1, v_pmp_addr_3 };
      12'h800: rg_resp_to_core_1_wget = { 29'd268435456, x__h2935 };
      default: rg_resp_to_core_1_wget = 33'd0;
    endcase
  end
  assign csr_op_arg_wget =
	     { ma_core_req_req[35:4],
	       IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149,
	       ma_core_req_req[3:2] } ;

  // register rg_bpuenable
  assign rg_bpuenable_D_IN = x_wget__h484[2] ;
  assign rg_bpuenable_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h800 ;

  // register rg_denable
  assign rg_denable_D_IN = x_wget__h484[1] ;
  assign rg_denable_EN = EN_ma_core_req && ma_core_req_req[47:36] == 12'h800 ;

  // register rg_fflags
  assign rg_fflags_D_IN =
	     MUX_rg_fflags_write_1__SEL_1 ? x_wget__h484[4:0] : x__h9173 ;
  assign rg_fflags_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[47:36] == 12'h001 ||
	      ma_core_req_req[47:36] == 12'h003) ||
	     EN_ma_update_fflags &&
	     NOT_ma_update_fflags_flags_OR_rg_fflags_7_20_E_ETC___d322 ;

  // register rg_frm
  assign rg_frm_D_IN =
	     (ma_core_req_req[47:36] == 12'h002) ?
	       x_wget__h484[2:0] :
	       x_wget__h484[7:5] ;
  assign rg_frm_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[47:36] == 12'h002 ||
	      ma_core_req_req[47:36] == 12'h003) ;

  // register rg_fs
  assign rg_fs_D_IN = 2'b11 ;
  assign rg_fs_EN =
	     _dand1rg_fs_EN_write ||
	     EN_ma_update_fflags &&
	     NOT_ma_update_fflags_flags_OR_rg_fflags_7_20_E_ETC___d322 ;

  // register rg_ienable
  assign rg_ienable_D_IN = x_wget__h484[0] ;
  assign rg_ienable_EN = EN_ma_core_req && ma_core_req_req[47:36] == 12'h800 ;

  // register rg_misa_c
  assign rg_misa_c_D_IN = x_wget__h484[2] ;
  assign rg_misa_c_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h301 &&
	     (x_wget__h484[2] || ma_core_req_req[1:0] == 2'd0) ;

  // register rg_misa_f
  assign rg_misa_f_D_IN = x_wget__h484[5] ;
  assign rg_misa_f_EN = EN_ma_core_req && ma_core_req_req[47:36] == 12'h301 ;

  // register rg_misa_i
  assign rg_misa_i_D_IN = x_wget__h484[8] ;
  assign rg_misa_i_EN = EN_ma_core_req && ma_core_req_req[47:36] == 12'h301 ;

  // register rg_misa_m
  assign rg_misa_m_D_IN = x_wget__h484[12] ;
  assign rg_misa_m_EN = EN_ma_core_req && ma_core_req_req[47:36] == 12'h301 ;

  // register rg_mscratch
  assign rg_mscratch_D_IN = x_wget__h484 ;
  assign rg_mscratch_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h340 ;

  // register rg_resp_to_core
  assign rg_resp_to_core_D_IN =
	     EN_ma_core_req ? rg_resp_to_core_1_wget : 33'd0 ;
  assign rg_resp_to_core_EN = 1'd1 ;

  // register v_pmp_addr_0
  assign v_pmp_addr_0_D_IN = x_wget__h484 ;
  assign v_pmp_addr_0_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3B0 &&
	     !v_pmp_cfg_0[7] ;

  // register v_pmp_addr_1
  assign v_pmp_addr_1_D_IN = x_wget__h484 ;
  assign v_pmp_addr_1_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3B1 &&
	     !v_pmp_cfg_1[7] ;

  // register v_pmp_addr_2
  assign v_pmp_addr_2_D_IN = x_wget__h484 ;
  assign v_pmp_addr_2_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3B2 &&
	     !v_pmp_cfg_2[7] ;

  // register v_pmp_addr_3
  assign v_pmp_addr_3_D_IN = x_wget__h484 ;
  assign v_pmp_addr_3_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3B3 &&
	     !v_pmp_cfg_3[7] ;

  // register v_pmp_cfg_0
  assign v_pmp_cfg_0_D_IN = x_wget__h484[7:0] ;
  assign v_pmp_cfg_0_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3A0 &&
	     !v_pmp_cfg_0[7] &&
	     x_wget__h484[1:0] != 2'b10 &&
	     x_wget__h484[4:3] != 2'd2 ;

  // register v_pmp_cfg_1
  assign v_pmp_cfg_1_D_IN = x_wget__h484[15:8] ;
  assign v_pmp_cfg_1_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3A0 &&
	     !v_pmp_cfg_1[7] &&
	     x_wget__h484[9:8] != 2'b10 &&
	     x_wget__h484[12:11] != 2'd2 ;

  // register v_pmp_cfg_2
  assign v_pmp_cfg_2_D_IN = x_wget__h484[23:16] ;
  assign v_pmp_cfg_2_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3A0 &&
	     !v_pmp_cfg_2[7] &&
	     x_wget__h484[17:16] != 2'b10 &&
	     x_wget__h484[20:19] != 2'd2 ;

  // register v_pmp_cfg_3
  assign v_pmp_cfg_3_D_IN = x_wget__h484[31:24] ;
  assign v_pmp_cfg_3_EN =
	     EN_ma_core_req && ma_core_req_req[47:36] == 12'h3A0 &&
	     !v_pmp_cfg_3[7] &&
	     x_wget__h484[25:24] != 2'b10 &&
	     x_wget__h484[28:27] != 2'd2 ;

  // submodule ff_fwd_request
  assign ff_fwd_request_D_IN = ma_core_req_req ;
  assign ff_fwd_request_ENQ =
	     EN_ma_core_req && ma_core_req_req[47:36] != 12'h301 &&
	     ma_core_req_req[47:36] != 12'h340 &&
	     ma_core_req_req[47:36] != 12'h3A0 &&
	     ma_core_req_req[47:36] != 12'h3A1 &&
	     ma_core_req_req[47:36] != 12'h3A2 &&
	     ma_core_req_req[47:36] != 12'h3A3 &&
	     ma_core_req_req[47:36] != 12'h3B0 &&
	     ma_core_req_req[47:36] != 12'h3B1 &&
	     ma_core_req_req[47:36] != 12'h3B2 &&
	     ma_core_req_req[47:36] != 12'h3B3 &&
	     ma_core_req_req[47:36] != 12'h3B4 &&
	     ma_core_req_req[47:36] != 12'h3B5 &&
	     ma_core_req_req[47:36] != 12'h3B6 &&
	     ma_core_req_req[47:36] != 12'h3B7 &&
	     ma_core_req_req[47:36] != 12'h3B8 &&
	     ma_core_req_req[47:36] != 12'h3B9 &&
	     ma_core_req_req[47:36] != 12'h3BA &&
	     ma_core_req_req[47:36] != 12'h3BB &&
	     ma_core_req_req[47:36] != 12'h3BC &&
	     ma_core_req_req[47:36] != 12'h3BD &&
	     ma_core_req_req[47:36] != 12'h3BE &&
	     ma_core_req_req[47:36] != 12'h3BF &&
	     ma_core_req_req[47:36] != 12'h001 &&
	     ma_core_req_req[47:36] != 12'h002 &&
	     ma_core_req_req[47:36] != 12'h003 &&
	     ma_core_req_req[47:36] != 12'h800 ;
  assign ff_fwd_request_DEQ = EN_mav_fwd_req ;
  assign ff_fwd_request_CLR = 1'b0 ;

  // remaining internal signals
  module_fn_csr_op instance_fn_csr_op_0(.fn_csr_op_writedata(x_wget_fst__h3128),
					.fn_csr_op_readdata(x_wget_snd_fst__h3213),
					.fn_csr_op_op(x_wget_snd_snd__h3214),
					.fn_csr_op(x__h8597));
  assign NOT_ma_update_fflags_flags_OR_rg_fflags_7_20_E_ETC___d322 =
	     x__h9173 != rg_fflags ;
  assign _dand1rg_fs_EN_write =
	     EN_ma_core_req && ma_core_req_req[47:36] != 12'h301 &&
	     ma_core_req_req[47:36] != 12'h340 &&
	     ma_core_req_req[47:36] != 12'h3A0 &&
	     ma_core_req_req[47:36] != 12'h3A1 &&
	     ma_core_req_req[47:36] != 12'h3A2 &&
	     ma_core_req_req[47:36] != 12'h3A3 &&
	     ma_core_req_req[47:36] != 12'h3B0 &&
	     ma_core_req_req[47:36] != 12'h3B1 &&
	     ma_core_req_req[47:36] != 12'h3B2 &&
	     ma_core_req_req[47:36] != 12'h3B3 &&
	     ma_core_req_req[47:36] != 12'h3B4 &&
	     ma_core_req_req[47:36] != 12'h3B5 &&
	     ma_core_req_req[47:36] != 12'h3B6 &&
	     ma_core_req_req[47:36] != 12'h3B7 &&
	     ma_core_req_req[47:36] != 12'h3B8 &&
	     ma_core_req_req[47:36] != 12'h3B9 &&
	     ma_core_req_req[47:36] != 12'h3BA &&
	     ma_core_req_req[47:36] != 12'h3BB &&
	     ma_core_req_req[47:36] != 12'h3BC &&
	     ma_core_req_req[47:36] != 12'h3BD &&
	     ma_core_req_req[47:36] != 12'h3BE &&
	     ma_core_req_req[47:36] != 12'h3BF &&
	     ma_core_req_req_BITS_47_TO_36_EQ_0x1_6_AND_NOT_ETC___d273 ;
  assign ma_core_req_req_BITS_47_TO_36_EQ_0x1_6_AND_NOT_ETC___d273 =
	     ma_core_req_req[47:36] == 12'h001 &&
	     rg_fflags != x_wget__h484[4:0] ||
	     ma_core_req_req[47:36] != 12'h001 &&
	     ma_core_req_req_BITS_47_TO_36_EQ_0x2_9_AND_NOT_ETC___d271 ;
  assign ma_core_req_req_BITS_47_TO_36_EQ_0x2_9_AND_NOT_ETC___d271 =
	     ma_core_req_req[47:36] == 12'h002 &&
	     rg_frm != x_wget__h484[2:0] ||
	     ma_core_req_req[47:36] == 12'h003 &&
	     x__h2916 != x_wget__h484[7:0] ;
  assign r1__read_BITS_1_TO_0___h9207 = { rg_bpuenable, rg_denable } ;
  assign r1__read__h2948 = { r1__read__h2950, rg_denable } ;
  assign r1__read__h2950 = { 1'd0, rg_bpuenable } ;
  assign readdata__h1554 =
	     { 19'd131104,
	       rg_misa_m,
	       3'd0,
	       rg_misa_i,
	       2'd0,
	       rg_misa_f,
	       2'd0,
	       rg_misa_c,
	       2'd0 } ;
  assign x__h2916 = { rg_frm, rg_fflags } ;
  assign x__h2935 = { r1__read__h2948, rg_ienable } ;
  assign x__h3873 = { v_pmp_cfg_3, v_pmp_cfg_2, v_pmp_cfg_1, v_pmp_cfg_0 } ;
  assign x__h7585 = { 27'd0, rg_fflags } ;
  assign x__h7899 = { 29'd0, rg_frm } ;
  assign x__h8212 = { 24'd0, x__h2916 } ;
  assign x__h8575 = { 28'd0, x__h2935 } ;
  assign x__h9173 = ma_update_fflags_flags | rg_fflags ;
  assign x_wget_fst__h3128 = csr_op_arg_wget[65:34] ;
  assign x_wget_snd_fst__h3213 = csr_op_arg_wget[33:2] ;
  assign x_wget_snd_snd__h3214 = csr_op_arg_wget[1:0] ;
  always@(ma_core_req_req or
	  x__h8575 or
	  x__h7585 or
	  x__h7899 or
	  x__h8212 or
	  readdata__h1554 or
	  rg_mscratch or
	  x__h3873 or
	  v_pmp_addr_0 or v_pmp_addr_1 or v_pmp_addr_2 or v_pmp_addr_3)
  begin
    case (ma_core_req_req[47:36])
      12'h001:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      x__h7585;
      12'h002:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      x__h7899;
      12'h003:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      x__h8212;
      12'h301:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      readdata__h1554;
      12'h340:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      rg_mscratch;
      12'h3A0:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      x__h3873;
      12'h3A1, 12'h3A2, 12'h3A3:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 = 32'd0;
      12'h3B0:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      v_pmp_addr_0;
      12'h3B1:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      v_pmp_addr_1;
      12'h3B2:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      v_pmp_addr_2;
      12'h3B3:
	  IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
	      v_pmp_addr_3;
      default: IF_ma_core_req_req_BITS_47_TO_36_EQ_0x301_THEN_ETC___d149 =
		   x__h8575;
    endcase
  end
  always@(ma_core_req_req or x__h8597)
  begin
    case (ma_core_req_req[47:36])
      12'h001,
      12'h002,
      12'h301,
      12'h340,
      12'h3A0,
      12'h3A1,
      12'h3A2,
      12'h3A3,
      12'h3B0,
      12'h3B1,
      12'h3B2,
      12'h3B3:
	  x_wget__h484 = x__h8597;
      default: x_wget__h484 = x__h8597;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_bpuenable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_denable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_fflags <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_frm <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_fs <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_ienable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_c <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_f <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_i <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_misa_m <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_mscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_resp_to_core <= `BSV_ASSIGNMENT_DELAY 33'd0;
	v_pmp_addr_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_pmp_addr_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_pmp_addr_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_pmp_addr_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_pmp_cfg_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	v_pmp_cfg_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	v_pmp_cfg_2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	v_pmp_cfg_3 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (rg_bpuenable_EN)
	  rg_bpuenable <= `BSV_ASSIGNMENT_DELAY rg_bpuenable_D_IN;
	if (rg_denable_EN)
	  rg_denable <= `BSV_ASSIGNMENT_DELAY rg_denable_D_IN;
	if (rg_fflags_EN) rg_fflags <= `BSV_ASSIGNMENT_DELAY rg_fflags_D_IN;
	if (rg_frm_EN) rg_frm <= `BSV_ASSIGNMENT_DELAY rg_frm_D_IN;
	if (rg_fs_EN) rg_fs <= `BSV_ASSIGNMENT_DELAY rg_fs_D_IN;
	if (rg_ienable_EN)
	  rg_ienable <= `BSV_ASSIGNMENT_DELAY rg_ienable_D_IN;
	if (rg_misa_c_EN) rg_misa_c <= `BSV_ASSIGNMENT_DELAY rg_misa_c_D_IN;
	if (rg_misa_f_EN) rg_misa_f <= `BSV_ASSIGNMENT_DELAY rg_misa_f_D_IN;
	if (rg_misa_i_EN) rg_misa_i <= `BSV_ASSIGNMENT_DELAY rg_misa_i_D_IN;
	if (rg_misa_m_EN) rg_misa_m <= `BSV_ASSIGNMENT_DELAY rg_misa_m_D_IN;
	if (rg_mscratch_EN)
	  rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch_D_IN;
	if (rg_resp_to_core_EN)
	  rg_resp_to_core <= `BSV_ASSIGNMENT_DELAY rg_resp_to_core_D_IN;
	if (v_pmp_addr_0_EN)
	  v_pmp_addr_0 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_0_D_IN;
	if (v_pmp_addr_1_EN)
	  v_pmp_addr_1 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_1_D_IN;
	if (v_pmp_addr_2_EN)
	  v_pmp_addr_2 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_2_D_IN;
	if (v_pmp_addr_3_EN)
	  v_pmp_addr_3 <= `BSV_ASSIGNMENT_DELAY v_pmp_addr_3_D_IN;
	if (v_pmp_cfg_0_EN)
	  v_pmp_cfg_0 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_0_D_IN;
	if (v_pmp_cfg_1_EN)
	  v_pmp_cfg_1 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_1_D_IN;
	if (v_pmp_cfg_2_EN)
	  v_pmp_cfg_2 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_2_D_IN;
	if (v_pmp_cfg_3_EN)
	  v_pmp_cfg_3 <= `BSV_ASSIGNMENT_DELAY v_pmp_cfg_3_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_bpuenable = 1'h0;
    rg_denable = 1'h0;
    rg_fflags = 5'h0A;
    rg_frm = 3'h2;
    rg_fs = 2'h2;
    rg_ienable = 1'h0;
    rg_misa_c = 1'h0;
    rg_misa_f = 1'h0;
    rg_misa_i = 1'h0;
    rg_misa_m = 1'h0;
    rg_mscratch = 32'hAAAAAAAA;
    rg_resp_to_core = 33'h0AAAAAAAA;
    v_pmp_addr_0 = 32'hAAAAAAAA;
    v_pmp_addr_1 = 32'hAAAAAAAA;
    v_pmp_addr_2 = 32'hAAAAAAAA;
    v_pmp_addr_3 = 32'hAAAAAAAA;
    v_pmp_cfg_0 = 8'hAA;
    v_pmp_cfg_1 = 8'hAA;
    v_pmp_cfg_2 = 8'hAA;
    v_pmp_cfg_3 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_csr_grp2

