//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:08:45 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// rx_from_stage1_deq_ena         O     1
// tx_meta_to_stage3_enq_ena      O     1
// tx_meta_to_stage3_enq_data     O    67
// tx_mtval_to_stage3_enq_ena     O     1
// tx_mtval_to_stage3_enq_data    O    32
// mv_op1                         O    39
// mv_op2                         O    40
// mv_op3                         O    38
// rx_inst_deq_ena                O     1
// tx_inst_enq_ena                O     1
// tx_inst_enq_data               O    32
// RDY_commit_rd                  O     1
// RDY_clear_stall                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rx_from_stage1_notEmpty_b      I     1
// rx_from_stage1_first_deq_rdy_b  I     1
// rx_from_stage1_first_x         I    87
// tx_meta_to_stage3_notFull_b    I     1 unused
// tx_meta_to_stage3_enq_rdy_b    I     1
// tx_mtval_to_stage3_notFull_b   I     1
// tx_mtval_to_stage3_enq_rdy_b   I     1
// rx_inst_notEmpty_b             I     1 unused
// rx_inst_first_deq_rdy_b        I     1
// rx_inst_first_x                I    32
// tx_inst_notFull_b              I     1 unused
// tx_inst_enq_rdy_b              I     1
// commit_rd_commit               I    38
// csrs_csr                       I   101
// clear_stall_upd                I     1
// ma_resume_wfi_w                I     1
// EN_commit_rd                   I     1
// EN_csrs                        I     1
// EN_clear_stall                 I     1
// EN_update_eEpoch               I     1
// EN_update_wEpoch               I     1
// EN_ma_resume_wfi               I     1
//
// Combinational paths from inputs to outputs:
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    EN_csrs) -> rx_from_stage1_deq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_meta_to_stage3_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_meta_to_stage3_enq_data
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_mtval_to_stage3_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_mtval_to_stage3_enq_data
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    EN_csrs) -> rx_inst_deq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_inst_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    rx_inst_first_x,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_inst_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage2(CLK,
		RST_N,

		rx_from_stage1_notEmpty_b,

		rx_from_stage1_first_deq_rdy_b,

		rx_from_stage1_first_x,

		rx_from_stage1_deq_ena,

		tx_meta_to_stage3_notFull_b,

		tx_meta_to_stage3_enq_rdy_b,

		tx_meta_to_stage3_enq_ena,

		tx_meta_to_stage3_enq_data,

		tx_mtval_to_stage3_notFull_b,

		tx_mtval_to_stage3_enq_rdy_b,

		tx_mtval_to_stage3_enq_ena,

		tx_mtval_to_stage3_enq_data,

		mv_op1,

		mv_op2,

		mv_op3,

		rx_inst_notEmpty_b,

		rx_inst_first_deq_rdy_b,

		rx_inst_first_x,

		rx_inst_deq_ena,

		tx_inst_notFull_b,

		tx_inst_enq_rdy_b,

		tx_inst_enq_ena,

		tx_inst_enq_data,

		commit_rd_commit,
		EN_commit_rd,
		RDY_commit_rd,

		csrs_csr,
		EN_csrs,

		clear_stall_upd,
		EN_clear_stall,
		RDY_clear_stall,

		EN_update_eEpoch,

		EN_update_wEpoch,

		ma_resume_wfi_w,
		EN_ma_resume_wfi);
  parameter [31 : 0] hartid = 32'b0;
  input  CLK;
  input  RST_N;

  // action method rx_from_stage1_notEmpty
  input  rx_from_stage1_notEmpty_b;

  // action method rx_from_stage1_first_deq_rdy
  input  rx_from_stage1_first_deq_rdy_b;

  // action method rx_from_stage1_first
  input  [86 : 0] rx_from_stage1_first_x;

  // value method rx_from_stage1_deq_ena
  output rx_from_stage1_deq_ena;

  // action method tx_meta_to_stage3_notFull
  input  tx_meta_to_stage3_notFull_b;

  // action method tx_meta_to_stage3_enq_rdy
  input  tx_meta_to_stage3_enq_rdy_b;

  // value method tx_meta_to_stage3_enq_ena
  output tx_meta_to_stage3_enq_ena;

  // value method tx_meta_to_stage3_enq_data
  output [66 : 0] tx_meta_to_stage3_enq_data;

  // action method tx_mtval_to_stage3_notFull
  input  tx_mtval_to_stage3_notFull_b;

  // action method tx_mtval_to_stage3_enq_rdy
  input  tx_mtval_to_stage3_enq_rdy_b;

  // value method tx_mtval_to_stage3_enq_ena
  output tx_mtval_to_stage3_enq_ena;

  // value method tx_mtval_to_stage3_enq_data
  output [31 : 0] tx_mtval_to_stage3_enq_data;

  // value method mv_op1
  output [38 : 0] mv_op1;

  // value method mv_op2
  output [39 : 0] mv_op2;

  // value method mv_op3
  output [37 : 0] mv_op3;

  // action method rx_inst_notEmpty
  input  rx_inst_notEmpty_b;

  // action method rx_inst_first_deq_rdy
  input  rx_inst_first_deq_rdy_b;

  // action method rx_inst_first
  input  [31 : 0] rx_inst_first_x;

  // value method rx_inst_deq_ena
  output rx_inst_deq_ena;

  // action method tx_inst_notFull
  input  tx_inst_notFull_b;

  // action method tx_inst_enq_rdy
  input  tx_inst_enq_rdy_b;

  // value method tx_inst_enq_ena
  output tx_inst_enq_ena;

  // value method tx_inst_enq_data
  output [31 : 0] tx_inst_enq_data;

  // action method commit_rd
  input  [37 : 0] commit_rd_commit;
  input  EN_commit_rd;
  output RDY_commit_rd;

  // action method csrs
  input  [100 : 0] csrs_csr;
  input  EN_csrs;

  // action method clear_stall
  input  clear_stall_upd;
  input  EN_clear_stall;
  output RDY_clear_stall;

  // action method update_eEpoch
  input  EN_update_eEpoch;

  // action method update_wEpoch
  input  EN_update_wEpoch;

  // action method ma_resume_wfi
  input  ma_resume_wfi_w;
  input  EN_ma_resume_wfi;

  // signals for module outputs
  wire [66 : 0] tx_meta_to_stage3_enq_data;
  wire [39 : 0] mv_op2;
  wire [38 : 0] mv_op1;
  wire [37 : 0] mv_op3;
  wire [31 : 0] tx_inst_enq_data, tx_mtval_to_stage3_enq_data;
  wire RDY_clear_stall,
       RDY_commit_rd,
       rx_from_stage1_deq_ena,
       rx_inst_deq_ena,
       tx_inst_enq_ena,
       tx_meta_to_stage3_enq_ena,
       tx_mtval_to_stage3_enq_ena;

  // inlined wires
  wire [39 : 0] rg_op2_port0__write_1,
		rg_op2_port1__read,
		rg_op2_port1__write_1,
		rg_op2_port2__read;
  wire [38 : 0] rg_op1_port0__write_1,
		rg_op1_port1__read,
		rg_op1_port1__write_1,
		rg_op1_port2__read;
  wire [37 : 0] rg_op3_port0__write_1,
		rg_op3_port1__read,
		rg_op3_port1__write_1,
		rg_op3_port2__read;
  wire rg_op1_EN_port1__write, rg_op2_EN_port1__write, rg_op3_EN_port1__write;

  // register eEpoch
  reg eEpoch;
  wire eEpoch_D_IN, eEpoch_EN;

  // register rg_fencei_rerun
  reg rg_fencei_rerun;
  wire rg_fencei_rerun_D_IN, rg_fencei_rerun_EN;

  // register rg_op1
  reg [38 : 0] rg_op1;
  wire [38 : 0] rg_op1_D_IN;
  wire rg_op1_EN;

  // register rg_op2
  reg [39 : 0] rg_op2;
  wire [39 : 0] rg_op2_D_IN;
  wire rg_op2_EN;

  // register rg_op3
  reg [37 : 0] rg_op3;
  wire [37 : 0] rg_op3_D_IN;
  wire rg_op3_EN;

  // register rg_rerun
  reg rg_rerun;
  wire rg_rerun_D_IN, rg_rerun_EN;

  // register rg_stall
  reg rg_stall;
  wire rg_stall_D_IN, rg_stall_EN;

  // register rg_wfi
  reg rg_wfi;
  wire rg_wfi_D_IN, rg_wfi_EN;

  // register wEpoch
  reg wEpoch;
  wire wEpoch_D_IN, wEpoch_EN;

  // ports of submodule registerfile
  wire [37 : 0] registerfile_commit_rd_c;
  wire [31 : 0] registerfile_read_rs1,
		registerfile_read_rs2,
		registerfile_read_rs3;
  wire [4 : 0] registerfile_read_rs1_addr,
	       registerfile_read_rs2_addr,
	       registerfile_read_rs3_addr;
  wire registerfile_EN_commit_rd,
       registerfile_EN_read_rs1,
       registerfile_EN_read_rs2,
       registerfile_EN_read_rs3,
       registerfile_RDY_commit_rd,
       registerfile_RDY_read_rs1,
       registerfile_RDY_read_rs2,
       registerfile_RDY_read_rs3,
       registerfile_read_rs1_rs1type,
       registerfile_read_rs2_rs2type;

  // rule scheduling signals
  wire CAN_FIRE_RL_decode_and_opfetch,
       CAN_FIRE_RL_rl_wait_for_interrupt,
       CAN_FIRE_clear_stall,
       CAN_FIRE_commit_rd,
       CAN_FIRE_csrs,
       CAN_FIRE_ma_resume_wfi,
       CAN_FIRE_rx_from_stage1_first,
       CAN_FIRE_rx_from_stage1_first_deq_rdy,
       CAN_FIRE_rx_from_stage1_notEmpty,
       CAN_FIRE_rx_inst_first,
       CAN_FIRE_rx_inst_first_deq_rdy,
       CAN_FIRE_rx_inst_notEmpty,
       CAN_FIRE_tx_inst_enq_rdy,
       CAN_FIRE_tx_inst_notFull,
       CAN_FIRE_tx_meta_to_stage3_enq_rdy,
       CAN_FIRE_tx_meta_to_stage3_notFull,
       CAN_FIRE_tx_mtval_to_stage3_enq_rdy,
       CAN_FIRE_tx_mtval_to_stage3_notFull,
       CAN_FIRE_update_eEpoch,
       CAN_FIRE_update_wEpoch,
       WILL_FIRE_RL_decode_and_opfetch,
       WILL_FIRE_RL_rl_wait_for_interrupt,
       WILL_FIRE_clear_stall,
       WILL_FIRE_commit_rd,
       WILL_FIRE_csrs,
       WILL_FIRE_ma_resume_wfi,
       WILL_FIRE_rx_from_stage1_first,
       WILL_FIRE_rx_from_stage1_first_deq_rdy,
       WILL_FIRE_rx_from_stage1_notEmpty,
       WILL_FIRE_rx_inst_first,
       WILL_FIRE_rx_inst_first_deq_rdy,
       WILL_FIRE_rx_inst_notEmpty,
       WILL_FIRE_tx_inst_enq_rdy,
       WILL_FIRE_tx_inst_notFull,
       WILL_FIRE_tx_meta_to_stage3_enq_rdy,
       WILL_FIRE_tx_meta_to_stage3_notFull,
       WILL_FIRE_tx_mtval_to_stage3_enq_rdy,
       WILL_FIRE_tx_mtval_to_stage3_notFull,
       WILL_FIRE_update_eEpoch,
       WILL_FIRE_update_wEpoch;

  // inputs to muxes for submodule ports
  wire MUX_rg_rerun_write_1__SEL_1,
       MUX_rg_rerun_write_1__SEL_2,
       MUX_rg_rerun_write_1__VAL_2,
       MUX_rg_stall_write_1__VAL_2,
       MUX_rg_wfi_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d28;
  reg TASK_testplusargs___d29;
  reg TASK_testplusargs___d30;
  reg [63 : 0] v__h2494;
  reg TASK_testplusargs___d45;
  reg TASK_testplusargs___d46;
  reg TASK_testplusargs___d47;
  reg [63 : 0] v__h2739;
  reg TASK_testplusargs___d57;
  reg TASK_testplusargs___d58;
  reg TASK_testplusargs___d59;
  reg [63 : 0] v__h3024;
  reg TASK_testplusargs___d82;
  reg TASK_testplusargs___d83;
  reg TASK_testplusargs___d84;
  reg [63 : 0] v__h3402;
  reg TASK_testplusargs___d136;
  reg TASK_testplusargs___d137;
  reg TASK_testplusargs___d138;
  reg [63 : 0] v__h3667;
  reg TASK_testplusargs___d165;
  reg TASK_testplusargs___d166;
  reg TASK_testplusargs___d167;
  reg [63 : 0] v__h4078;
  reg TASK_testplusargs___d179;
  reg TASK_testplusargs___d180;
  reg TASK_testplusargs___d181;
  reg [63 : 0] v__h4252;
  reg TASK_testplusargs___d229;
  reg TASK_testplusargs___d230;
  reg TASK_testplusargs___d231;
  reg [63 : 0] v__h5189;
  reg TASK_testplusargs___d338;
  reg TASK_testplusargs___d339;
  reg TASK_testplusargs___d340;
  reg [63 : 0] v__h3865;
  reg TASK_testplusargs___d366;
  reg TASK_testplusargs___d367;
  reg TASK_testplusargs___d368;
  reg [63 : 0] v__h6378;
  reg TASK_testplusargs___d378;
  reg TASK_testplusargs___d379;
  reg TASK_testplusargs___d380;
  reg [63 : 0] v__h6537;
  reg TASK_testplusargs___d396;
  reg TASK_testplusargs___d397;
  reg TASK_testplusargs___d398;
  reg [63 : 0] v__h6721;
  reg NOT_wr_flush_from_exe_whas__52_53_OR_NOT_wr_fl_ETC___d170;
  reg wr_flush_from_exe_whas__52_AND_wr_flush_from_e_ETC___d184;
  reg NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d238;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d242;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d246;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d254;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d258;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d260;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d263;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d266;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d269;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d272;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d274;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d277;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d294;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d297;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d300;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d305;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d310;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d318;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d322;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d328;
  reg TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d332;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d103;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d105;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d109;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d113;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d115;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d117;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d119;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d127;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d129;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d131;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d133;
  reg TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d135;
  reg NOT_eEpoch_read__45_CONCAT_wEpoch_read__46_47__ETC___d343;
  reg TASK_testplusargs_66_OR_TASK_testplusargs_67_A_ETC___d375;
  reg TASK_testplusargs_66_OR_TASK_testplusargs_67_A_ETC___d377;
  reg TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d389;
  reg TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d391;
  reg TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d395;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d407;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d409;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d411;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d413;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d421;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] op2__h4507;
  wire [74 : 0] decoder_func_32___d72;
  wire [31 : 0] _theResult____h3600, mtval___1__h3743, op1__h4506, op4__h4508;
  wire [18 : 0] value__h2590, value__h2594;
  wire [6 : 0] _theResult___fst__h3143,
	       _theResult___fst__h3174,
	       chk_interrupt___d64,
	       func_cause___1__h3118,
	       func_cause___1__h3145,
	       func_cause___1__h3177,
	       func_cause__h2647;
  wire [4 : 0] value__h3087, x1_avValue_op_addr_rs2addr__h3090;
  wire [3 : 0] IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74;
  wire [2 : 0] IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111;
  wire [1 : 0] IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101;
  wire IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163,
       IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d177,
       eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150,
       wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15,
       wr_resume_wfi_whas__45_AND_wr_resume_wfi_wget__ETC___d349;

  // action method rx_from_stage1_notEmpty
  assign CAN_FIRE_rx_from_stage1_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_notEmpty = 1'd1 ;

  // action method rx_from_stage1_first_deq_rdy
  assign CAN_FIRE_rx_from_stage1_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_first_deq_rdy = 1'd1 ;

  // action method rx_from_stage1_first
  assign CAN_FIRE_rx_from_stage1_first = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_first = 1'd1 ;

  // value method rx_from_stage1_deq_ena
  assign rx_from_stage1_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method tx_meta_to_stage3_notFull
  assign CAN_FIRE_tx_meta_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_meta_to_stage3_notFull = 1'd1 ;

  // action method tx_meta_to_stage3_enq_rdy
  assign CAN_FIRE_tx_meta_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_meta_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_meta_to_stage3_enq_ena
  assign tx_meta_to_stage3_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_meta_to_stage3_enq_data
  assign tx_meta_to_stage3_enq_data =
	     { rx_from_stage1_first_x[86:55],
	       func_cause__h2647,
	       decoder_func_32___d72[43:41],
	       IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74,
	       rx_from_stage1_first_x[22:21],
	       decoder_func_32___d72[64:60],
	       decoder_func_32___d72[48],
	       rx_from_stage1_first_x[12:0] } ;

  // action method tx_mtval_to_stage3_notFull
  assign CAN_FIRE_tx_mtval_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_mtval_to_stage3_notFull = 1'd1 ;

  // action method tx_mtval_to_stage3_enq_rdy
  assign CAN_FIRE_tx_mtval_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_mtval_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_mtval_to_stage3_enq_ena
  assign tx_mtval_to_stage3_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_mtval_to_stage3_enq_data
  assign tx_mtval_to_stage3_enq_data =
	     (IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	      4'd6 &&
	      func_cause__h2647 == 7'd2) ?
	       rx_from_stage1_first_x[54:23] :
	       32'd0 ;

  // value method mv_op1
  assign mv_op1 = rg_op1 ;

  // value method mv_op2
  assign mv_op2 = rg_op2 ;

  // value method mv_op3
  assign mv_op3 = rg_op3 ;

  // action method rx_inst_notEmpty
  assign CAN_FIRE_rx_inst_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_inst_notEmpty = 1'd1 ;

  // action method rx_inst_first_deq_rdy
  assign CAN_FIRE_rx_inst_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_inst_first_deq_rdy = 1'd1 ;

  // action method rx_inst_first
  assign CAN_FIRE_rx_inst_first = 1'd1 ;
  assign WILL_FIRE_rx_inst_first = 1'd1 ;

  // value method rx_inst_deq_ena
  assign rx_inst_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method tx_inst_notFull
  assign CAN_FIRE_tx_inst_notFull = 1'd1 ;
  assign WILL_FIRE_tx_inst_notFull = 1'd1 ;

  // action method tx_inst_enq_rdy
  assign CAN_FIRE_tx_inst_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_inst_enq_rdy = 1'd1 ;

  // value method tx_inst_enq_ena
  assign tx_inst_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_inst_enq_data
  assign tx_inst_enq_data = rx_inst_first_x ;

  // action method commit_rd
  assign RDY_commit_rd = registerfile_RDY_commit_rd ;
  assign CAN_FIRE_commit_rd = registerfile_RDY_commit_rd ;
  assign WILL_FIRE_commit_rd = EN_commit_rd ;

  // action method csrs
  assign CAN_FIRE_csrs = 1'd1 ;
  assign WILL_FIRE_csrs = EN_csrs ;

  // action method clear_stall
  assign RDY_clear_stall = rg_stall ;
  assign CAN_FIRE_clear_stall = rg_stall ;
  assign WILL_FIRE_clear_stall = EN_clear_stall ;

  // action method update_eEpoch
  assign CAN_FIRE_update_eEpoch = 1'd1 ;
  assign WILL_FIRE_update_eEpoch = EN_update_eEpoch ;

  // action method update_wEpoch
  assign CAN_FIRE_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_update_wEpoch = EN_update_wEpoch ;

  // action method ma_resume_wfi
  assign CAN_FIRE_ma_resume_wfi = 1'd1 ;
  assign WILL_FIRE_ma_resume_wfi = EN_ma_resume_wfi ;

  // submodule registerfile
  mkregisterfile #(.hartid(hartid)) registerfile(.CLK(CLK),
						 .RST_N(RST_N),
						 .commit_rd_c(registerfile_commit_rd_c),
						 .read_rs1_addr(registerfile_read_rs1_addr),
						 .read_rs1_rs1type(registerfile_read_rs1_rs1type),
						 .read_rs2_addr(registerfile_read_rs2_addr),
						 .read_rs2_rs2type(registerfile_read_rs2_rs2type),
						 .read_rs3_addr(registerfile_read_rs3_addr),
						 .EN_read_rs1(registerfile_EN_read_rs1),
						 .EN_read_rs2(registerfile_EN_read_rs2),
						 .EN_read_rs3(registerfile_EN_read_rs3),
						 .EN_commit_rd(registerfile_EN_commit_rd),
						 .read_rs1(registerfile_read_rs1),
						 .RDY_read_rs1(registerfile_RDY_read_rs1),
						 .read_rs2(registerfile_read_rs2),
						 .RDY_read_rs2(registerfile_RDY_read_rs2),
						 .read_rs3(registerfile_read_rs3),
						 .RDY_read_rs3(registerfile_RDY_read_rs3),
						 .RDY_commit_rd(registerfile_RDY_commit_rd));

  // rule RL_decode_and_opfetch
  assign CAN_FIRE_RL_decode_and_opfetch =
	     rx_from_stage1_first_deq_rdy_b && rx_inst_first_deq_rdy_b &&
	     wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15 &&
	     !rg_stall &&
	     rx_from_stage1_notEmpty_b &&
	     tx_mtval_to_stage3_notFull_b &&
	     !rg_wfi ;
  assign WILL_FIRE_RL_decode_and_opfetch = CAN_FIRE_RL_decode_and_opfetch ;

  // rule RL_rl_wait_for_interrupt
  assign CAN_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;
  assign WILL_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;

  // inputs to muxes for submodule ports
  assign MUX_rg_rerun_write_1__SEL_1 = EN_clear_stall && clear_stall_upd ;
  assign MUX_rg_rerun_write_1__SEL_2 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 !=
	     4'd7 ;
  assign MUX_rg_wfi_write_1__SEL_1 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163 ;
  assign MUX_rg_rerun_write_1__VAL_2 =
	     !rg_rerun && decoder_func_32___d72[1] && !EN_update_eEpoch &&
	     !EN_update_wEpoch ;
  assign MUX_rg_stall_write_1__VAL_2 =
	     !EN_update_eEpoch && !EN_update_wEpoch ;

  // inlined wires
  assign rg_op1_port0__write_1 =
	     { value__h3087,
	       op1__h4506,
	       IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 } ;
  assign rg_op1_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op1_port0__write_1 : rg_op1 ;
  assign rg_op1_EN_port1__write =
	     EN_commit_rd &&
	     commit_rd_commit[37:33] == rg_op1_port1__read[38:34] &&
	     (commit_rd_commit[0] && rg_op1_port1__read[1:0] == 2'd2 ||
	      !commit_rd_commit[0] && rg_op1_port1__read[38:34] != 5'd0 &&
	      rg_op1_port1__read[1:0] != 2'd2) ;
  assign rg_op1_port1__write_1 =
	     { rg_op1_port1__read[38:34],
	       commit_rd_commit[32:1],
	       rg_op1_port1__read[1:0] } ;
  assign rg_op1_port2__read =
	     rg_op1_EN_port1__write ?
	       rg_op1_port1__write_1 :
	       rg_op1_port1__read ;
  assign rg_op2_port0__write_1 =
	     { x1_avValue_op_addr_rs2addr__h3090,
	       op2__h4507,
	       IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 } ;
  assign rg_op2_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op2_port0__write_1 : rg_op2 ;
  assign rg_op2_EN_port1__write =
	     EN_commit_rd &&
	     commit_rd_commit[37:33] == rg_op2_port1__read[39:35] &&
	     (commit_rd_commit[0] && rg_op2_port1__read[2:0] == 3'd4 ||
	      !commit_rd_commit[0] && rg_op2_port1__read[39:35] != 5'd0 &&
	      rg_op2_port1__read[2:0] != 3'd4) ;
  assign rg_op2_port1__write_1 =
	     { rg_op2_port1__read[39:35],
	       commit_rd_commit[32:1],
	       rg_op2_port1__read[2:0] } ;
  assign rg_op2_port2__read =
	     rg_op2_EN_port1__write ?
	       rg_op2_port1__write_1 :
	       rg_op2_port1__read ;
  assign rg_op3_port0__write_1 =
	     { op4__h4508,
	       decoder_func_32___d72[59:55],
	       decoder_func_32___d72[49] } ;
  assign rg_op3_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op3_port0__write_1 : rg_op3 ;
  assign rg_op3_EN_port1__write =
	     EN_commit_rd &&
	     rg_op3_port1__read[5:1] == commit_rd_commit[37:33] &&
	     rg_op3_port1__read[0] &&
	     commit_rd_commit[0] ;
  assign rg_op3_port1__write_1 =
	     { commit_rd_commit[32:1], rg_op3_port1__read[5:0] } ;
  assign rg_op3_port2__read =
	     rg_op3_EN_port1__write ?
	       rg_op3_port1__write_1 :
	       rg_op3_port1__read ;

  // register eEpoch
  assign eEpoch_D_IN = ~eEpoch ;
  assign eEpoch_EN = EN_update_eEpoch ;

  // register rg_fencei_rerun
  assign rg_fencei_rerun_D_IN =
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	     4'd1 &&
	     decoder_func_32___d72[43:41] == 3'd4 ;
  assign rg_fencei_rerun_EN = MUX_rg_rerun_write_1__SEL_2 ;

  // register rg_op1
  assign rg_op1_D_IN = rg_op1_port2__read ;
  assign rg_op1_EN = 1'b1 ;

  // register rg_op2
  assign rg_op2_D_IN = rg_op2_port2__read ;
  assign rg_op2_EN = 1'b1 ;

  // register rg_op3
  assign rg_op3_D_IN = rg_op3_port2__read ;
  assign rg_op3_EN = 1'b1 ;

  // register rg_rerun
  assign rg_rerun_D_IN =
	     !MUX_rg_rerun_write_1__SEL_1 && MUX_rg_rerun_write_1__VAL_2 ;
  assign rg_rerun_EN =
	     EN_clear_stall && clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 !=
	     4'd7 ;

  // register rg_stall
  assign rg_stall_D_IN =
	     !MUX_rg_rerun_write_1__SEL_1 && MUX_rg_stall_write_1__VAL_2 ;
  assign rg_stall_EN =
	     EN_clear_stall && clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	     4'd6 ;

  // register rg_wfi
  assign rg_wfi_D_IN = MUX_rg_wfi_write_1__SEL_1 ;
  assign rg_wfi_EN =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163 ||
	     rg_wfi &&
	     wr_resume_wfi_whas__45_AND_wr_resume_wfi_wget__ETC___d349 ;

  // register wEpoch
  assign wEpoch_D_IN = ~wEpoch ;
  assign wEpoch_EN = EN_update_wEpoch ;

  // submodule registerfile
  assign registerfile_commit_rd_c = commit_rd_commit ;
  assign registerfile_read_rs1_addr = mtval___1__h3743[19:15] ;
  assign registerfile_read_rs1_rs1type =
	     IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 ==
	     2'd2 ;
  assign registerfile_read_rs2_addr = mtval___1__h3743[24:20] ;
  assign registerfile_read_rs2_rs2type =
	     IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 ==
	     3'd4 ;
  assign registerfile_read_rs3_addr = mtval___1__h3743[31:27] ;
  assign registerfile_EN_read_rs1 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_read_rs2 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_read_rs3 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_commit_rd = EN_commit_rd ;

  // remaining internal signals
  module_chk_interrupt instance_chk_interrupt_0(.chk_interrupt_prv(csrs_csr[100:99]),
						.chk_interrupt_mstatus(csrs_csr[31:0]),
						.chk_interrupt_mip(value__h2590),
						.chk_interrupt_mie(value__h2594),
						.chk_interrupt(chk_interrupt___d64));
  module_decoder_func_32 instance_decoder_func_32_1(.decoder_func_32_inst(mtval___1__h3743),
						    .decoder_func_32_csrs(csrs_csr),
						    .decoder_func_32_compressed(rx_from_stage1_first_x[12]),
						    .decoder_func_32(decoder_func_32___d72));
  assign IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 =
	     (IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	      4'd6) ?
	       ((func_cause__h2647 == 7'd1) ? 2'd1 : 2'd0) :
	       decoder_func_32___d72[54:53] ;
  assign IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 =
	     (IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	      4'd6) ?
	       3'd0 :
	       decoder_func_32___d72[52:50] ;
  assign IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163 =
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	     4'd7 &&
	     !EN_update_eEpoch &&
	     !EN_update_wEpoch ;
  assign IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d177 =
	     IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	     4'd7 &&
	     (EN_update_eEpoch || EN_update_wEpoch) ;
  assign IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 =
	     (rg_rerun || chk_interrupt___d64[0] ||
	      rx_from_stage1_first_x[20]) ?
	       4'd6 :
	       decoder_func_32___d72[47:44] ;
  assign _theResult____h3600 = tx_mtval_to_stage3_enq_data ;
  assign _theResult___fst__h3143 =
	     chk_interrupt___d64[0] ?
	       func_cause___1__h3145 :
	       _theResult___fst__h3174 ;
  assign _theResult___fst__h3174 =
	     rx_from_stage1_first_x[20] ?
	       func_cause___1__h3177 :
	       decoder_func_32___d72[8:2] ;
  assign eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 =
	     { eEpoch, wEpoch } == rx_from_stage1_first_x[22:21] ;
  assign func_cause___1__h3118 = rg_fencei_rerun ? 7'd24 : 7'd23 ;
  assign func_cause___1__h3145 = { 1'd0, chk_interrupt___d64[6:1] } ;
  assign func_cause___1__h3177 = { 1'd0, rx_from_stage1_first_x[19:14] } ;
  assign func_cause__h2647 =
	     rg_rerun ? func_cause___1__h3118 : _theResult___fst__h3143 ;
  assign mtval___1__h3743 = rx_from_stage1_first_x[54:23] ;
  assign op1__h4506 =
	     (IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 ==
	      2'd0 &&
	      value__h3087 == 5'd0) ?
	       32'd0 :
	       registerfile_read_rs1 ;
  assign op4__h4508 =
	     decoder_func_32___d72[49] ?
	       registerfile_read_rs3 :
	       decoder_func_32___d72[40:9] ;
  assign value__h2590 = csrs_csr[98:80] ;
  assign value__h2594 = csrs_csr[79:61] ;
  assign value__h3087 =
	     (IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	      4'd6) ?
	       5'd0 :
	       decoder_func_32___d72[74:70] ;
  assign wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15 =
	     EN_csrs && registerfile_RDY_read_rs1 &&
	     registerfile_RDY_read_rs2 &&
	     registerfile_RDY_read_rs3 &&
	     tx_meta_to_stage3_enq_rdy_b &&
	     tx_mtval_to_stage3_enq_rdy_b &&
	     tx_inst_enq_rdy_b ;
  assign wr_resume_wfi_whas__45_AND_wr_resume_wfi_wget__ETC___d349 =
	     EN_ma_resume_wfi && ma_resume_wfi_w || EN_update_wEpoch ||
	     EN_update_eEpoch ;
  assign x1_avValue_op_addr_rs2addr__h3090 =
	     (IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 ==
	      4'd6) ?
	       5'd0 :
	       decoder_func_32___d72[69:65] ;
  always@(IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 or
	  x1_avValue_op_addr_rs2addr__h3090 or
	  registerfile_read_rs2 or decoder_func_32___d72)
  begin
    case (IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111)
      3'd1: op2__h4507 = decoder_func_32___d72[40:9];
      3'd2: op2__h4507 = 32'd4;
      3'd3: op2__h4507 = 32'd2;
      default: op2__h4507 =
		   (x1_avValue_op_addr_rs2addr__h3090 == 5'd0 &&
		    IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 ==
		    3'd0) ?
		     32'd0 :
		     registerfile_read_rs2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fencei_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_op1 <= `BSV_ASSIGNMENT_DELAY 39'd0;
	rg_op2 <= `BSV_ASSIGNMENT_DELAY 40'd0;
	rg_op3 <= `BSV_ASSIGNMENT_DELAY 38'd0;
	rg_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wfi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (eEpoch_EN) eEpoch <= `BSV_ASSIGNMENT_DELAY eEpoch_D_IN;
	if (rg_fencei_rerun_EN)
	  rg_fencei_rerun <= `BSV_ASSIGNMENT_DELAY rg_fencei_rerun_D_IN;
	if (rg_op1_EN) rg_op1 <= `BSV_ASSIGNMENT_DELAY rg_op1_D_IN;
	if (rg_op2_EN) rg_op2 <= `BSV_ASSIGNMENT_DELAY rg_op2_D_IN;
	if (rg_op3_EN) rg_op3 <= `BSV_ASSIGNMENT_DELAY rg_op3_D_IN;
	if (rg_rerun_EN) rg_rerun <= `BSV_ASSIGNMENT_DELAY rg_rerun_D_IN;
	if (rg_stall_EN) rg_stall <= `BSV_ASSIGNMENT_DELAY rg_stall_D_IN;
	if (rg_wfi_EN) rg_wfi <= `BSV_ASSIGNMENT_DELAY rg_wfi_D_IN;
	if (wEpoch_EN) wEpoch <= `BSV_ASSIGNMENT_DELAY wEpoch_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    eEpoch = 1'h0;
    rg_fencei_rerun = 1'h0;
    rg_op1 = 39'h2AAAAAAAAA;
    rg_op2 = 40'hAAAAAAAAAA;
    rg_op3 = 38'h2AAAAAAAAA;
    rg_rerun = 1'h0;
    rg_stall = 1'h0;
    rg_wfi = 1'h0;
    wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d28 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d29 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	csrs_csr[100:99] == 2'd3;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	csrs_csr[100:99] != 2'd3;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h2494 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("[%10d", v__h2494, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("[%2d]STAGE2: csrs:", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("CSRtoDecode { ", "prv: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37)
	$write("Machine");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39)
	$write("User");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mip: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[98:80]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mie: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[79:61]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_misa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[60:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "frm: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[34:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mstatus: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", csrs_csr[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d45 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d46 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d47 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h2739 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$write("[%10d", v__h2739, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$write("[%2d]STAGE2 : PC:%h Instruction:%h",
	       hartid,
	       rx_from_stage1_first_x[86:55],
	       rx_from_stage1_first_x[54:23]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d45 ||
	   TASK_testplusargs___d46 && TASK_testplusargs___d47))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d57 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d58 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d59 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3024 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("[%10d", v__h3024, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("[%2d]STAGE2 : OpAddr: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("OpAddr { ", "rs1addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("'h%h", value__h3087);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write(", ", "rs2addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("'h%h", x1_avValue_op_addr_rs2addr__h3090);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("'h%h", decoder_func_32___d72[64:60]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write(", ", "rs3addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("'h%h", decoder_func_32___d72[59:55], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d82 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d83 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d84 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d103 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 == 2'd2;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d105 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 == 2'd0;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d113 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 == 3'd4;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d109 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 != 2'd2 &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d101 != 2'd0;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d115 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 == 3'd0;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d117 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 == 3'd1;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d119 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 == 3'd2;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d127 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 != 3'd4 &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 != 3'd0 &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 != 3'd1 &&
	IF_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_ETC___d111 != 3'd2;
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d129 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	decoder_func_32___d72[49];
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d131 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	!decoder_func_32___d72[49];
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d133 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	decoder_func_32___d72[48];
    TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d135 =
	(TASK_testplusargs___d82 ||
	 TASK_testplusargs___d83 && TASK_testplusargs___d84) &&
	!decoder_func_32___d72[48];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3402 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write("[%10d", v__h3402, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write("[%2d]STAGE2 : OpType: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write("OpType { ", "rs1type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d103)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d105)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d109)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write(", ", "rs2type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d113)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d115)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d117)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d119)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d127)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write(", ", "rs3type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d129)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d131)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d133)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_2_OR_TASK_testplusargs_3_AND_ETC___d135)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d136 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d137 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d138 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3667 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d136 ||
	   TASK_testplusargs___d137 && TASK_testplusargs___d138))
	$write("[%10d", v__h3667, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d136 ||
	   TASK_testplusargs___d137 && TASK_testplusargs___d138))
	$write("[%2d]STAGE2: BadAddress(MTVAL): %h",
	       hartid,
	       _theResult____h3600);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d136 ||
	   TASK_testplusargs___d137 && TASK_testplusargs___d138))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163)
	begin
	  TASK_testplusargs___d165 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163)
	begin
	  TASK_testplusargs___d166 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163)
	begin
	  TASK_testplusargs___d167 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_flush_from_exe_whas__52_53_OR_NOT_wr_fl_ETC___d170 =
	!EN_update_eEpoch && !EN_update_wEpoch &&
	(TASK_testplusargs___d165 ||
	 TASK_testplusargs___d166 && TASK_testplusargs___d167);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d163)
	begin
	  v__h4078 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__52_53_OR_NOT_wr_fl_ETC___d170)
	$write("[%10d", v__h4078, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__52_53_OR_NOT_wr_fl_ETC___d170)
	$write("[%2d]STAGE2 : Encountered WFI", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__52_53_OR_NOT_wr_fl_ETC___d170)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d177)
	begin
	  TASK_testplusargs___d179 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d177)
	begin
	  TASK_testplusargs___d180 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d177)
	begin
	  TASK_testplusargs___d181 = $test$plusargs("l0");
	  #0;
	end
    wr_flush_from_exe_whas__52_AND_wr_flush_from_e_ETC___d184 =
	(EN_update_eEpoch || EN_update_wEpoch) &&
	(TASK_testplusargs___d179 ||
	 TASK_testplusargs___d180 && TASK_testplusargs___d181);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d177)
	begin
	  v__h4252 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd7 &&
	  wr_flush_from_exe_whas__52_AND_wr_flush_from_e_ETC___d184)
	$write("[%10d", v__h4252, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd7 &&
	  wr_flush_from_exe_whas__52_AND_wr_flush_from_e_ETC___d184)
	$write("[%2d]STAGE2 : Dropping WFI", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd7 &&
	  wr_flush_from_exe_whas__52_AND_wr_flush_from_e_ETC___d184)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7)
	begin
	  TASK_testplusargs___d229 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7)
	begin
	  TASK_testplusargs___d230 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7)
	begin
	  TASK_testplusargs___d231 = $test$plusargs("l1");
	  #0;
	end
    NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234 =
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231);
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d238 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	decoder_func_32___d72[43:41] == 3'd0;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d242 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	decoder_func_32___d72[43:41] == 3'd1;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d246 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	decoder_func_32___d72[43:41] == 3'd3;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d254 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	decoder_func_32___d72[43:41] != 3'd0 &&
	decoder_func_32___d72[43:41] != 3'd1 &&
	decoder_func_32___d72[43:41] != 3'd3;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d258 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd0;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d260 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd1;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d263 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd2;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d266 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd3;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d269 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd4;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d272 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd5;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d277 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd8;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d274 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 == 4'd6;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d294 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd0 &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd1 &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd2 &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd3 &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd4 &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd5 &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd6 &&
	IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd8;
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d297 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	decoder_func_32___d72[48];
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d300 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	!decoder_func_32___d72[48];
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d305 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	!rx_from_stage1_first_x[12];
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d310 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	rx_from_stage1_first_x[12];
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d318 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	!rx_from_stage1_first_x[9];
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d322 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	rx_from_stage1_first_x[9];
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d332 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	rx_from_stage1_first_x[8];
    TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d328 =
	(TASK_testplusargs___d229 ||
	 TASK_testplusargs___d230 && TASK_testplusargs___d231) &&
	!rx_from_stage1_first_x[8];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7)
	begin
	  v__h5189 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("[%10d", v__h5189, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("[%2d]STAGE2: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("Stage3Meta { ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("'h%h", rx_from_stage1_first_x[86:55]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "funct: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("'h%h", func_cause__h2647);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "memaccess: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d238)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d242)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d246)
	$write("Fence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d254)
	$write("FenceI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "inst_type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d258)
	$write("ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d260)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d263)
	$write("BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d266)
	$write("JAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d269)
	$write("JALR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d272)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d274)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d277)
	$write("FLOAT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d294)
	$write("MULDIV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("'h%h", rx_from_stage1_first_x[22:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("'h%h", decoder_func_32___d72[64:60]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d297)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d300)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "compressed: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d305)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d310)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "btbresponse: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("BTBResponse { ", "prediction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("'h%h", rx_from_stage1_first_x[11:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "btbhit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d318)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d322)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "hi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d328)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_OR_IF_ETC___d74 != 4'd7 &&
	  TASK_testplusargs_29_OR_TASK_testplusargs_30_A_ETC___d332)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(", ", "history: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("'h%h", rx_from_stage1_first_x[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	  NOT_IF_rg_rerun_3_OR_chk_interrupt_4_BIT_0_5_O_ETC___d234)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150)
	begin
	  TASK_testplusargs___d338 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150)
	begin
	  TASK_testplusargs___d339 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150)
	begin
	  TASK_testplusargs___d340 = $test$plusargs("l0");
	  #0;
	end
    NOT_eEpoch_read__45_CONCAT_wEpoch_read__46_47__ETC___d343 =
	!eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150 &&
	(TASK_testplusargs___d338 ||
	 TASK_testplusargs___d339 && TASK_testplusargs___d340);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__45_CONCAT_wEpoch_read__46_47_EQ_I_ETC___d150)
	begin
	  v__h3865 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__45_CONCAT_wEpoch_read__46_47__ETC___d343)
	$write("[%10d", v__h3865, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__45_CONCAT_wEpoch_read__46_47__ETC___d343)
	$write("[%2d]STAGE2 : Dropping Instruction due to epoch mis - match",
	       hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__45_CONCAT_wEpoch_read__46_47__ETC___d343)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d366 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d367 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d368 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_66_OR_TASK_testplusargs_67_A_ETC___d375 =
	(TASK_testplusargs___d366 ||
	 TASK_testplusargs___d367 && TASK_testplusargs___d368) &&
	commit_rd_commit[0];
    TASK_testplusargs_66_OR_TASK_testplusargs_67_A_ETC___d377 =
	(TASK_testplusargs___d366 ||
	 TASK_testplusargs___d367 && TASK_testplusargs___d368) &&
	!commit_rd_commit[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h6378 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("[%10d", v__h6378, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("[%2d]STAGE2: Commit: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("CommitData { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("'h%h", commit_rd_commit[37:33]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("'h%h", commit_rd_commit[32:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_66_OR_TASK_testplusargs_67_A_ETC___d375)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_66_OR_TASK_testplusargs_67_A_ETC___d377)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d366 ||
	   TASK_testplusargs___d367 && TASK_testplusargs___d368))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d378 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d379 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d380 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d389 =
	(TASK_testplusargs___d378 ||
	 TASK_testplusargs___d379 && TASK_testplusargs___d380) &&
	rg_op1_port1__read[1:0] == 2'd2;
    TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d391 =
	(TASK_testplusargs___d378 ||
	 TASK_testplusargs___d379 && TASK_testplusargs___d380) &&
	rg_op1_port1__read[1:0] == 2'd0;
    TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d395 =
	(TASK_testplusargs___d378 ||
	 TASK_testplusargs___d379 && TASK_testplusargs___d380) &&
	rg_op1_port1__read[1:0] != 2'd2 &&
	rg_op1_port1__read[1:0] != 2'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h6537 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write("[%10d", v__h6537, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write("[%2d]STAGE2: RgOp1: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write("RFOp1 { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write("'h%h", rg_op1_port1__read[38:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write("'h%h", rg_op1_port1__read[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write(", ", "optype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d389)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d391)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_78_OR_TASK_testplusargs_79_A_ETC___d395)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d378 ||
	   TASK_testplusargs___d379 && TASK_testplusargs___d380))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d396 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d397 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d398 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d407 =
	(TASK_testplusargs___d396 ||
	 TASK_testplusargs___d397 && TASK_testplusargs___d398) &&
	rg_op2_port1__read[2:0] == 3'd4;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d409 =
	(TASK_testplusargs___d396 ||
	 TASK_testplusargs___d397 && TASK_testplusargs___d398) &&
	rg_op2_port1__read[2:0] == 3'd0;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d411 =
	(TASK_testplusargs___d396 ||
	 TASK_testplusargs___d397 && TASK_testplusargs___d398) &&
	rg_op2_port1__read[2:0] == 3'd1;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d413 =
	(TASK_testplusargs___d396 ||
	 TASK_testplusargs___d397 && TASK_testplusargs___d398) &&
	rg_op2_port1__read[2:0] == 3'd2;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d421 =
	(TASK_testplusargs___d396 ||
	 TASK_testplusargs___d397 && TASK_testplusargs___d398) &&
	rg_op2_port1__read[2:0] != 3'd4 &&
	rg_op2_port1__read[2:0] != 3'd0 &&
	rg_op2_port1__read[2:0] != 3'd1 &&
	rg_op2_port1__read[2:0] != 3'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h6721 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write("[%10d", v__h6721, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write("[%2d]STAGE2: RgOp2: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write("RFOp2 { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write("'h%h", rg_op2_port1__read[39:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write("'h%h", rg_op2_port1__read[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write(", ", "optype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d407)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d409)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d411)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d413)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d421)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d396 ||
	   TASK_testplusargs___d397 && TASK_testplusargs___d398))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstage2

