//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:09:17 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// mv_fbfull                      O     1
// mv_fbempty                     O     1
// mv_fbhead_valid                O     1
// mav_allocate_line              O     3 reg
// RDY_mav_allocate_line          O     1 const
// RDY_ma_fill_from_memory        O     1 const
// RDY_ma_from_storebuffer        O     1 const
// mv_release_info                O   546
// RDY_mv_release_info            O     1 const
// RDY_ma_perform_release         O     1 const
// mav_polling_response           O    43
// RDY_mav_polling_response       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// mav_allocate_line_from_ram     I     1
// mav_allocate_line_dataline     I   512
// mav_allocate_line_address      I    32 reg
// mav_allocate_line_dirty        I     1
// ma_fill_from_memory_mem_resp   I    34
// ma_fill_from_memory_fbindex    I     3
// ma_fill_from_memory_init_bank  I     4
// ma_from_storebuffer_mask       I    32
// ma_from_storebuffer_dataword   I    32
// ma_from_storebuffer_fbindex    I     3
// ma_from_storebuffer_address    I    32
// mav_polling_response_address   I    32
// mav_polling_response_fill      I     1
// mav_polling_response_fbindex   I     3
// EN_ma_fill_from_memory         I     1
// EN_ma_from_storebuffer         I     1
// EN_ma_perform_release          I     1
// EN_mav_allocate_line           I     1
// EN_mav_polling_response        I     1 unused
//
// Combinational paths from inputs to outputs:
//   (mav_polling_response_address,
//    mav_polling_response_fill,
//    mav_polling_response_fbindex) -> mav_polling_response
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache_fb_v2(CLK,
		      RST_N,

		      mv_fbfull,

		      mv_fbempty,

		      mv_fbhead_valid,

		      mav_allocate_line_from_ram,
		      mav_allocate_line_dataline,
		      mav_allocate_line_address,
		      mav_allocate_line_dirty,
		      EN_mav_allocate_line,
		      mav_allocate_line,
		      RDY_mav_allocate_line,

		      ma_fill_from_memory_mem_resp,
		      ma_fill_from_memory_fbindex,
		      ma_fill_from_memory_init_bank,
		      EN_ma_fill_from_memory,
		      RDY_ma_fill_from_memory,

		      ma_from_storebuffer_mask,
		      ma_from_storebuffer_dataword,
		      ma_from_storebuffer_fbindex,
		      ma_from_storebuffer_address,
		      EN_ma_from_storebuffer,
		      RDY_ma_from_storebuffer,

		      mv_release_info,
		      RDY_mv_release_info,

		      EN_ma_perform_release,
		      RDY_ma_perform_release,

		      mav_polling_response_address,
		      mav_polling_response_fill,
		      mav_polling_response_fbindex,
		      EN_mav_polling_response,
		      mav_polling_response,
		      RDY_mav_polling_response);
  parameter [31 : 0] id = 32'b0;
  input  CLK;
  input  RST_N;

  // value method mv_fbfull
  output mv_fbfull;

  // value method mv_fbempty
  output mv_fbempty;

  // value method mv_fbhead_valid
  output mv_fbhead_valid;

  // actionvalue method mav_allocate_line
  input  mav_allocate_line_from_ram;
  input  [511 : 0] mav_allocate_line_dataline;
  input  [31 : 0] mav_allocate_line_address;
  input  mav_allocate_line_dirty;
  input  EN_mav_allocate_line;
  output [2 : 0] mav_allocate_line;
  output RDY_mav_allocate_line;

  // action method ma_fill_from_memory
  input  [33 : 0] ma_fill_from_memory_mem_resp;
  input  [2 : 0] ma_fill_from_memory_fbindex;
  input  [3 : 0] ma_fill_from_memory_init_bank;
  input  EN_ma_fill_from_memory;
  output RDY_ma_fill_from_memory;

  // action method ma_from_storebuffer
  input  [31 : 0] ma_from_storebuffer_mask;
  input  [31 : 0] ma_from_storebuffer_dataword;
  input  [2 : 0] ma_from_storebuffer_fbindex;
  input  [31 : 0] ma_from_storebuffer_address;
  input  EN_ma_from_storebuffer;
  output RDY_ma_from_storebuffer;

  // value method mv_release_info
  output [545 : 0] mv_release_info;
  output RDY_mv_release_info;

  // action method ma_perform_release
  input  EN_ma_perform_release;
  output RDY_ma_perform_release;

  // actionvalue method mav_polling_response
  input  [31 : 0] mav_polling_response_address;
  input  mav_polling_response_fill;
  input  [2 : 0] mav_polling_response_fbindex;
  input  EN_mav_polling_response;
  output [42 : 0] mav_polling_response;
  output RDY_mav_polling_response;

  // signals for module outputs
  reg mv_fbhead_valid;
  wire [545 : 0] mv_release_info;
  wire [42 : 0] mav_polling_response;
  wire [2 : 0] mav_allocate_line;
  wire RDY_ma_fill_from_memory,
       RDY_ma_from_storebuffer,
       RDY_ma_perform_release,
       RDY_mav_allocate_line,
       RDY_mav_polling_response,
       RDY_mv_release_info,
       mv_fbempty,
       mv_fbfull;

  // register rg_fb_enables
  reg [15 : 0] rg_fb_enables;
  wire [15 : 0] rg_fb_enables_D_IN;
  wire rg_fb_enables_EN;

  // register rg_fbhead
  reg [2 : 0] rg_fbhead;
  wire [2 : 0] rg_fbhead_D_IN;
  wire rg_fbhead_EN;

  // register rg_fbtail
  reg [2 : 0] rg_fbtail;
  wire [2 : 0] rg_fbtail_D_IN;
  wire rg_fbtail_EN;

  // register rg_next_bank
  reg [3 : 0] rg_next_bank;
  wire [3 : 0] rg_next_bank_D_IN;
  wire rg_next_bank_EN;

  // register v_fb_addr_0
  reg [31 : 0] v_fb_addr_0;
  wire [31 : 0] v_fb_addr_0_D_IN;
  wire v_fb_addr_0_EN;

  // register v_fb_addr_1
  reg [31 : 0] v_fb_addr_1;
  wire [31 : 0] v_fb_addr_1_D_IN;
  wire v_fb_addr_1_EN;

  // register v_fb_addr_2
  reg [31 : 0] v_fb_addr_2;
  wire [31 : 0] v_fb_addr_2_D_IN;
  wire v_fb_addr_2_EN;

  // register v_fb_addr_3
  reg [31 : 0] v_fb_addr_3;
  wire [31 : 0] v_fb_addr_3_D_IN;
  wire v_fb_addr_3_EN;

  // register v_fb_addr_4
  reg [31 : 0] v_fb_addr_4;
  wire [31 : 0] v_fb_addr_4_D_IN;
  wire v_fb_addr_4_EN;

  // register v_fb_addr_5
  reg [31 : 0] v_fb_addr_5;
  wire [31 : 0] v_fb_addr_5_D_IN;
  wire v_fb_addr_5_EN;

  // register v_fb_addr_6
  reg [31 : 0] v_fb_addr_6;
  wire [31 : 0] v_fb_addr_6_D_IN;
  wire v_fb_addr_6_EN;

  // register v_fb_addr_7
  reg [31 : 0] v_fb_addr_7;
  wire [31 : 0] v_fb_addr_7_D_IN;
  wire v_fb_addr_7_EN;

  // register v_fb_addr_valid_0
  reg v_fb_addr_valid_0;
  wire v_fb_addr_valid_0_D_IN, v_fb_addr_valid_0_EN;

  // register v_fb_addr_valid_1
  reg v_fb_addr_valid_1;
  wire v_fb_addr_valid_1_D_IN, v_fb_addr_valid_1_EN;

  // register v_fb_addr_valid_2
  reg v_fb_addr_valid_2;
  wire v_fb_addr_valid_2_D_IN, v_fb_addr_valid_2_EN;

  // register v_fb_addr_valid_3
  reg v_fb_addr_valid_3;
  wire v_fb_addr_valid_3_D_IN, v_fb_addr_valid_3_EN;

  // register v_fb_addr_valid_4
  reg v_fb_addr_valid_4;
  wire v_fb_addr_valid_4_D_IN, v_fb_addr_valid_4_EN;

  // register v_fb_addr_valid_5
  reg v_fb_addr_valid_5;
  wire v_fb_addr_valid_5_D_IN, v_fb_addr_valid_5_EN;

  // register v_fb_addr_valid_6
  reg v_fb_addr_valid_6;
  wire v_fb_addr_valid_6_D_IN, v_fb_addr_valid_6_EN;

  // register v_fb_addr_valid_7
  reg v_fb_addr_valid_7;
  wire v_fb_addr_valid_7_D_IN, v_fb_addr_valid_7_EN;

  // register v_fb_data_0_0
  reg [31 : 0] v_fb_data_0_0;
  reg [31 : 0] v_fb_data_0_0_D_IN;
  wire v_fb_data_0_0_EN;

  // register v_fb_data_0_1
  reg [31 : 0] v_fb_data_0_1;
  reg [31 : 0] v_fb_data_0_1_D_IN;
  wire v_fb_data_0_1_EN;

  // register v_fb_data_0_10
  reg [31 : 0] v_fb_data_0_10;
  reg [31 : 0] v_fb_data_0_10_D_IN;
  wire v_fb_data_0_10_EN;

  // register v_fb_data_0_11
  reg [31 : 0] v_fb_data_0_11;
  reg [31 : 0] v_fb_data_0_11_D_IN;
  wire v_fb_data_0_11_EN;

  // register v_fb_data_0_12
  reg [31 : 0] v_fb_data_0_12;
  reg [31 : 0] v_fb_data_0_12_D_IN;
  wire v_fb_data_0_12_EN;

  // register v_fb_data_0_13
  reg [31 : 0] v_fb_data_0_13;
  reg [31 : 0] v_fb_data_0_13_D_IN;
  wire v_fb_data_0_13_EN;

  // register v_fb_data_0_14
  reg [31 : 0] v_fb_data_0_14;
  reg [31 : 0] v_fb_data_0_14_D_IN;
  wire v_fb_data_0_14_EN;

  // register v_fb_data_0_15
  reg [31 : 0] v_fb_data_0_15;
  reg [31 : 0] v_fb_data_0_15_D_IN;
  wire v_fb_data_0_15_EN;

  // register v_fb_data_0_2
  reg [31 : 0] v_fb_data_0_2;
  reg [31 : 0] v_fb_data_0_2_D_IN;
  wire v_fb_data_0_2_EN;

  // register v_fb_data_0_3
  reg [31 : 0] v_fb_data_0_3;
  reg [31 : 0] v_fb_data_0_3_D_IN;
  wire v_fb_data_0_3_EN;

  // register v_fb_data_0_4
  reg [31 : 0] v_fb_data_0_4;
  reg [31 : 0] v_fb_data_0_4_D_IN;
  wire v_fb_data_0_4_EN;

  // register v_fb_data_0_5
  reg [31 : 0] v_fb_data_0_5;
  reg [31 : 0] v_fb_data_0_5_D_IN;
  wire v_fb_data_0_5_EN;

  // register v_fb_data_0_6
  reg [31 : 0] v_fb_data_0_6;
  reg [31 : 0] v_fb_data_0_6_D_IN;
  wire v_fb_data_0_6_EN;

  // register v_fb_data_0_7
  reg [31 : 0] v_fb_data_0_7;
  reg [31 : 0] v_fb_data_0_7_D_IN;
  wire v_fb_data_0_7_EN;

  // register v_fb_data_0_8
  reg [31 : 0] v_fb_data_0_8;
  reg [31 : 0] v_fb_data_0_8_D_IN;
  wire v_fb_data_0_8_EN;

  // register v_fb_data_0_9
  reg [31 : 0] v_fb_data_0_9;
  reg [31 : 0] v_fb_data_0_9_D_IN;
  wire v_fb_data_0_9_EN;

  // register v_fb_data_1_0
  reg [31 : 0] v_fb_data_1_0;
  reg [31 : 0] v_fb_data_1_0_D_IN;
  wire v_fb_data_1_0_EN;

  // register v_fb_data_1_1
  reg [31 : 0] v_fb_data_1_1;
  reg [31 : 0] v_fb_data_1_1_D_IN;
  wire v_fb_data_1_1_EN;

  // register v_fb_data_1_10
  reg [31 : 0] v_fb_data_1_10;
  reg [31 : 0] v_fb_data_1_10_D_IN;
  wire v_fb_data_1_10_EN;

  // register v_fb_data_1_11
  reg [31 : 0] v_fb_data_1_11;
  reg [31 : 0] v_fb_data_1_11_D_IN;
  wire v_fb_data_1_11_EN;

  // register v_fb_data_1_12
  reg [31 : 0] v_fb_data_1_12;
  reg [31 : 0] v_fb_data_1_12_D_IN;
  wire v_fb_data_1_12_EN;

  // register v_fb_data_1_13
  reg [31 : 0] v_fb_data_1_13;
  reg [31 : 0] v_fb_data_1_13_D_IN;
  wire v_fb_data_1_13_EN;

  // register v_fb_data_1_14
  reg [31 : 0] v_fb_data_1_14;
  reg [31 : 0] v_fb_data_1_14_D_IN;
  wire v_fb_data_1_14_EN;

  // register v_fb_data_1_15
  reg [31 : 0] v_fb_data_1_15;
  reg [31 : 0] v_fb_data_1_15_D_IN;
  wire v_fb_data_1_15_EN;

  // register v_fb_data_1_2
  reg [31 : 0] v_fb_data_1_2;
  reg [31 : 0] v_fb_data_1_2_D_IN;
  wire v_fb_data_1_2_EN;

  // register v_fb_data_1_3
  reg [31 : 0] v_fb_data_1_3;
  reg [31 : 0] v_fb_data_1_3_D_IN;
  wire v_fb_data_1_3_EN;

  // register v_fb_data_1_4
  reg [31 : 0] v_fb_data_1_4;
  reg [31 : 0] v_fb_data_1_4_D_IN;
  wire v_fb_data_1_4_EN;

  // register v_fb_data_1_5
  reg [31 : 0] v_fb_data_1_5;
  reg [31 : 0] v_fb_data_1_5_D_IN;
  wire v_fb_data_1_5_EN;

  // register v_fb_data_1_6
  reg [31 : 0] v_fb_data_1_6;
  reg [31 : 0] v_fb_data_1_6_D_IN;
  wire v_fb_data_1_6_EN;

  // register v_fb_data_1_7
  reg [31 : 0] v_fb_data_1_7;
  reg [31 : 0] v_fb_data_1_7_D_IN;
  wire v_fb_data_1_7_EN;

  // register v_fb_data_1_8
  reg [31 : 0] v_fb_data_1_8;
  reg [31 : 0] v_fb_data_1_8_D_IN;
  wire v_fb_data_1_8_EN;

  // register v_fb_data_1_9
  reg [31 : 0] v_fb_data_1_9;
  reg [31 : 0] v_fb_data_1_9_D_IN;
  wire v_fb_data_1_9_EN;

  // register v_fb_data_2_0
  reg [31 : 0] v_fb_data_2_0;
  reg [31 : 0] v_fb_data_2_0_D_IN;
  wire v_fb_data_2_0_EN;

  // register v_fb_data_2_1
  reg [31 : 0] v_fb_data_2_1;
  reg [31 : 0] v_fb_data_2_1_D_IN;
  wire v_fb_data_2_1_EN;

  // register v_fb_data_2_10
  reg [31 : 0] v_fb_data_2_10;
  reg [31 : 0] v_fb_data_2_10_D_IN;
  wire v_fb_data_2_10_EN;

  // register v_fb_data_2_11
  reg [31 : 0] v_fb_data_2_11;
  reg [31 : 0] v_fb_data_2_11_D_IN;
  wire v_fb_data_2_11_EN;

  // register v_fb_data_2_12
  reg [31 : 0] v_fb_data_2_12;
  reg [31 : 0] v_fb_data_2_12_D_IN;
  wire v_fb_data_2_12_EN;

  // register v_fb_data_2_13
  reg [31 : 0] v_fb_data_2_13;
  reg [31 : 0] v_fb_data_2_13_D_IN;
  wire v_fb_data_2_13_EN;

  // register v_fb_data_2_14
  reg [31 : 0] v_fb_data_2_14;
  reg [31 : 0] v_fb_data_2_14_D_IN;
  wire v_fb_data_2_14_EN;

  // register v_fb_data_2_15
  reg [31 : 0] v_fb_data_2_15;
  reg [31 : 0] v_fb_data_2_15_D_IN;
  wire v_fb_data_2_15_EN;

  // register v_fb_data_2_2
  reg [31 : 0] v_fb_data_2_2;
  reg [31 : 0] v_fb_data_2_2_D_IN;
  wire v_fb_data_2_2_EN;

  // register v_fb_data_2_3
  reg [31 : 0] v_fb_data_2_3;
  reg [31 : 0] v_fb_data_2_3_D_IN;
  wire v_fb_data_2_3_EN;

  // register v_fb_data_2_4
  reg [31 : 0] v_fb_data_2_4;
  reg [31 : 0] v_fb_data_2_4_D_IN;
  wire v_fb_data_2_4_EN;

  // register v_fb_data_2_5
  reg [31 : 0] v_fb_data_2_5;
  reg [31 : 0] v_fb_data_2_5_D_IN;
  wire v_fb_data_2_5_EN;

  // register v_fb_data_2_6
  reg [31 : 0] v_fb_data_2_6;
  reg [31 : 0] v_fb_data_2_6_D_IN;
  wire v_fb_data_2_6_EN;

  // register v_fb_data_2_7
  reg [31 : 0] v_fb_data_2_7;
  reg [31 : 0] v_fb_data_2_7_D_IN;
  wire v_fb_data_2_7_EN;

  // register v_fb_data_2_8
  reg [31 : 0] v_fb_data_2_8;
  reg [31 : 0] v_fb_data_2_8_D_IN;
  wire v_fb_data_2_8_EN;

  // register v_fb_data_2_9
  reg [31 : 0] v_fb_data_2_9;
  reg [31 : 0] v_fb_data_2_9_D_IN;
  wire v_fb_data_2_9_EN;

  // register v_fb_data_3_0
  reg [31 : 0] v_fb_data_3_0;
  reg [31 : 0] v_fb_data_3_0_D_IN;
  wire v_fb_data_3_0_EN;

  // register v_fb_data_3_1
  reg [31 : 0] v_fb_data_3_1;
  reg [31 : 0] v_fb_data_3_1_D_IN;
  wire v_fb_data_3_1_EN;

  // register v_fb_data_3_10
  reg [31 : 0] v_fb_data_3_10;
  reg [31 : 0] v_fb_data_3_10_D_IN;
  wire v_fb_data_3_10_EN;

  // register v_fb_data_3_11
  reg [31 : 0] v_fb_data_3_11;
  reg [31 : 0] v_fb_data_3_11_D_IN;
  wire v_fb_data_3_11_EN;

  // register v_fb_data_3_12
  reg [31 : 0] v_fb_data_3_12;
  reg [31 : 0] v_fb_data_3_12_D_IN;
  wire v_fb_data_3_12_EN;

  // register v_fb_data_3_13
  reg [31 : 0] v_fb_data_3_13;
  reg [31 : 0] v_fb_data_3_13_D_IN;
  wire v_fb_data_3_13_EN;

  // register v_fb_data_3_14
  reg [31 : 0] v_fb_data_3_14;
  reg [31 : 0] v_fb_data_3_14_D_IN;
  wire v_fb_data_3_14_EN;

  // register v_fb_data_3_15
  reg [31 : 0] v_fb_data_3_15;
  reg [31 : 0] v_fb_data_3_15_D_IN;
  wire v_fb_data_3_15_EN;

  // register v_fb_data_3_2
  reg [31 : 0] v_fb_data_3_2;
  reg [31 : 0] v_fb_data_3_2_D_IN;
  wire v_fb_data_3_2_EN;

  // register v_fb_data_3_3
  reg [31 : 0] v_fb_data_3_3;
  reg [31 : 0] v_fb_data_3_3_D_IN;
  wire v_fb_data_3_3_EN;

  // register v_fb_data_3_4
  reg [31 : 0] v_fb_data_3_4;
  reg [31 : 0] v_fb_data_3_4_D_IN;
  wire v_fb_data_3_4_EN;

  // register v_fb_data_3_5
  reg [31 : 0] v_fb_data_3_5;
  reg [31 : 0] v_fb_data_3_5_D_IN;
  wire v_fb_data_3_5_EN;

  // register v_fb_data_3_6
  reg [31 : 0] v_fb_data_3_6;
  reg [31 : 0] v_fb_data_3_6_D_IN;
  wire v_fb_data_3_6_EN;

  // register v_fb_data_3_7
  reg [31 : 0] v_fb_data_3_7;
  reg [31 : 0] v_fb_data_3_7_D_IN;
  wire v_fb_data_3_7_EN;

  // register v_fb_data_3_8
  reg [31 : 0] v_fb_data_3_8;
  reg [31 : 0] v_fb_data_3_8_D_IN;
  wire v_fb_data_3_8_EN;

  // register v_fb_data_3_9
  reg [31 : 0] v_fb_data_3_9;
  reg [31 : 0] v_fb_data_3_9_D_IN;
  wire v_fb_data_3_9_EN;

  // register v_fb_data_4_0
  reg [31 : 0] v_fb_data_4_0;
  reg [31 : 0] v_fb_data_4_0_D_IN;
  wire v_fb_data_4_0_EN;

  // register v_fb_data_4_1
  reg [31 : 0] v_fb_data_4_1;
  reg [31 : 0] v_fb_data_4_1_D_IN;
  wire v_fb_data_4_1_EN;

  // register v_fb_data_4_10
  reg [31 : 0] v_fb_data_4_10;
  reg [31 : 0] v_fb_data_4_10_D_IN;
  wire v_fb_data_4_10_EN;

  // register v_fb_data_4_11
  reg [31 : 0] v_fb_data_4_11;
  reg [31 : 0] v_fb_data_4_11_D_IN;
  wire v_fb_data_4_11_EN;

  // register v_fb_data_4_12
  reg [31 : 0] v_fb_data_4_12;
  reg [31 : 0] v_fb_data_4_12_D_IN;
  wire v_fb_data_4_12_EN;

  // register v_fb_data_4_13
  reg [31 : 0] v_fb_data_4_13;
  reg [31 : 0] v_fb_data_4_13_D_IN;
  wire v_fb_data_4_13_EN;

  // register v_fb_data_4_14
  reg [31 : 0] v_fb_data_4_14;
  reg [31 : 0] v_fb_data_4_14_D_IN;
  wire v_fb_data_4_14_EN;

  // register v_fb_data_4_15
  reg [31 : 0] v_fb_data_4_15;
  reg [31 : 0] v_fb_data_4_15_D_IN;
  wire v_fb_data_4_15_EN;

  // register v_fb_data_4_2
  reg [31 : 0] v_fb_data_4_2;
  reg [31 : 0] v_fb_data_4_2_D_IN;
  wire v_fb_data_4_2_EN;

  // register v_fb_data_4_3
  reg [31 : 0] v_fb_data_4_3;
  reg [31 : 0] v_fb_data_4_3_D_IN;
  wire v_fb_data_4_3_EN;

  // register v_fb_data_4_4
  reg [31 : 0] v_fb_data_4_4;
  reg [31 : 0] v_fb_data_4_4_D_IN;
  wire v_fb_data_4_4_EN;

  // register v_fb_data_4_5
  reg [31 : 0] v_fb_data_4_5;
  reg [31 : 0] v_fb_data_4_5_D_IN;
  wire v_fb_data_4_5_EN;

  // register v_fb_data_4_6
  reg [31 : 0] v_fb_data_4_6;
  reg [31 : 0] v_fb_data_4_6_D_IN;
  wire v_fb_data_4_6_EN;

  // register v_fb_data_4_7
  reg [31 : 0] v_fb_data_4_7;
  reg [31 : 0] v_fb_data_4_7_D_IN;
  wire v_fb_data_4_7_EN;

  // register v_fb_data_4_8
  reg [31 : 0] v_fb_data_4_8;
  reg [31 : 0] v_fb_data_4_8_D_IN;
  wire v_fb_data_4_8_EN;

  // register v_fb_data_4_9
  reg [31 : 0] v_fb_data_4_9;
  reg [31 : 0] v_fb_data_4_9_D_IN;
  wire v_fb_data_4_9_EN;

  // register v_fb_data_5_0
  reg [31 : 0] v_fb_data_5_0;
  reg [31 : 0] v_fb_data_5_0_D_IN;
  wire v_fb_data_5_0_EN;

  // register v_fb_data_5_1
  reg [31 : 0] v_fb_data_5_1;
  reg [31 : 0] v_fb_data_5_1_D_IN;
  wire v_fb_data_5_1_EN;

  // register v_fb_data_5_10
  reg [31 : 0] v_fb_data_5_10;
  reg [31 : 0] v_fb_data_5_10_D_IN;
  wire v_fb_data_5_10_EN;

  // register v_fb_data_5_11
  reg [31 : 0] v_fb_data_5_11;
  reg [31 : 0] v_fb_data_5_11_D_IN;
  wire v_fb_data_5_11_EN;

  // register v_fb_data_5_12
  reg [31 : 0] v_fb_data_5_12;
  reg [31 : 0] v_fb_data_5_12_D_IN;
  wire v_fb_data_5_12_EN;

  // register v_fb_data_5_13
  reg [31 : 0] v_fb_data_5_13;
  reg [31 : 0] v_fb_data_5_13_D_IN;
  wire v_fb_data_5_13_EN;

  // register v_fb_data_5_14
  reg [31 : 0] v_fb_data_5_14;
  reg [31 : 0] v_fb_data_5_14_D_IN;
  wire v_fb_data_5_14_EN;

  // register v_fb_data_5_15
  reg [31 : 0] v_fb_data_5_15;
  reg [31 : 0] v_fb_data_5_15_D_IN;
  wire v_fb_data_5_15_EN;

  // register v_fb_data_5_2
  reg [31 : 0] v_fb_data_5_2;
  reg [31 : 0] v_fb_data_5_2_D_IN;
  wire v_fb_data_5_2_EN;

  // register v_fb_data_5_3
  reg [31 : 0] v_fb_data_5_3;
  reg [31 : 0] v_fb_data_5_3_D_IN;
  wire v_fb_data_5_3_EN;

  // register v_fb_data_5_4
  reg [31 : 0] v_fb_data_5_4;
  reg [31 : 0] v_fb_data_5_4_D_IN;
  wire v_fb_data_5_4_EN;

  // register v_fb_data_5_5
  reg [31 : 0] v_fb_data_5_5;
  reg [31 : 0] v_fb_data_5_5_D_IN;
  wire v_fb_data_5_5_EN;

  // register v_fb_data_5_6
  reg [31 : 0] v_fb_data_5_6;
  reg [31 : 0] v_fb_data_5_6_D_IN;
  wire v_fb_data_5_6_EN;

  // register v_fb_data_5_7
  reg [31 : 0] v_fb_data_5_7;
  reg [31 : 0] v_fb_data_5_7_D_IN;
  wire v_fb_data_5_7_EN;

  // register v_fb_data_5_8
  reg [31 : 0] v_fb_data_5_8;
  reg [31 : 0] v_fb_data_5_8_D_IN;
  wire v_fb_data_5_8_EN;

  // register v_fb_data_5_9
  reg [31 : 0] v_fb_data_5_9;
  reg [31 : 0] v_fb_data_5_9_D_IN;
  wire v_fb_data_5_9_EN;

  // register v_fb_data_6_0
  reg [31 : 0] v_fb_data_6_0;
  reg [31 : 0] v_fb_data_6_0_D_IN;
  wire v_fb_data_6_0_EN;

  // register v_fb_data_6_1
  reg [31 : 0] v_fb_data_6_1;
  reg [31 : 0] v_fb_data_6_1_D_IN;
  wire v_fb_data_6_1_EN;

  // register v_fb_data_6_10
  reg [31 : 0] v_fb_data_6_10;
  reg [31 : 0] v_fb_data_6_10_D_IN;
  wire v_fb_data_6_10_EN;

  // register v_fb_data_6_11
  reg [31 : 0] v_fb_data_6_11;
  reg [31 : 0] v_fb_data_6_11_D_IN;
  wire v_fb_data_6_11_EN;

  // register v_fb_data_6_12
  reg [31 : 0] v_fb_data_6_12;
  reg [31 : 0] v_fb_data_6_12_D_IN;
  wire v_fb_data_6_12_EN;

  // register v_fb_data_6_13
  reg [31 : 0] v_fb_data_6_13;
  reg [31 : 0] v_fb_data_6_13_D_IN;
  wire v_fb_data_6_13_EN;

  // register v_fb_data_6_14
  reg [31 : 0] v_fb_data_6_14;
  reg [31 : 0] v_fb_data_6_14_D_IN;
  wire v_fb_data_6_14_EN;

  // register v_fb_data_6_15
  reg [31 : 0] v_fb_data_6_15;
  reg [31 : 0] v_fb_data_6_15_D_IN;
  wire v_fb_data_6_15_EN;

  // register v_fb_data_6_2
  reg [31 : 0] v_fb_data_6_2;
  reg [31 : 0] v_fb_data_6_2_D_IN;
  wire v_fb_data_6_2_EN;

  // register v_fb_data_6_3
  reg [31 : 0] v_fb_data_6_3;
  reg [31 : 0] v_fb_data_6_3_D_IN;
  wire v_fb_data_6_3_EN;

  // register v_fb_data_6_4
  reg [31 : 0] v_fb_data_6_4;
  reg [31 : 0] v_fb_data_6_4_D_IN;
  wire v_fb_data_6_4_EN;

  // register v_fb_data_6_5
  reg [31 : 0] v_fb_data_6_5;
  reg [31 : 0] v_fb_data_6_5_D_IN;
  wire v_fb_data_6_5_EN;

  // register v_fb_data_6_6
  reg [31 : 0] v_fb_data_6_6;
  reg [31 : 0] v_fb_data_6_6_D_IN;
  wire v_fb_data_6_6_EN;

  // register v_fb_data_6_7
  reg [31 : 0] v_fb_data_6_7;
  reg [31 : 0] v_fb_data_6_7_D_IN;
  wire v_fb_data_6_7_EN;

  // register v_fb_data_6_8
  reg [31 : 0] v_fb_data_6_8;
  reg [31 : 0] v_fb_data_6_8_D_IN;
  wire v_fb_data_6_8_EN;

  // register v_fb_data_6_9
  reg [31 : 0] v_fb_data_6_9;
  reg [31 : 0] v_fb_data_6_9_D_IN;
  wire v_fb_data_6_9_EN;

  // register v_fb_data_7_0
  reg [31 : 0] v_fb_data_7_0;
  reg [31 : 0] v_fb_data_7_0_D_IN;
  wire v_fb_data_7_0_EN;

  // register v_fb_data_7_1
  reg [31 : 0] v_fb_data_7_1;
  reg [31 : 0] v_fb_data_7_1_D_IN;
  wire v_fb_data_7_1_EN;

  // register v_fb_data_7_10
  reg [31 : 0] v_fb_data_7_10;
  reg [31 : 0] v_fb_data_7_10_D_IN;
  wire v_fb_data_7_10_EN;

  // register v_fb_data_7_11
  reg [31 : 0] v_fb_data_7_11;
  reg [31 : 0] v_fb_data_7_11_D_IN;
  wire v_fb_data_7_11_EN;

  // register v_fb_data_7_12
  reg [31 : 0] v_fb_data_7_12;
  reg [31 : 0] v_fb_data_7_12_D_IN;
  wire v_fb_data_7_12_EN;

  // register v_fb_data_7_13
  reg [31 : 0] v_fb_data_7_13;
  reg [31 : 0] v_fb_data_7_13_D_IN;
  wire v_fb_data_7_13_EN;

  // register v_fb_data_7_14
  reg [31 : 0] v_fb_data_7_14;
  reg [31 : 0] v_fb_data_7_14_D_IN;
  wire v_fb_data_7_14_EN;

  // register v_fb_data_7_15
  reg [31 : 0] v_fb_data_7_15;
  reg [31 : 0] v_fb_data_7_15_D_IN;
  wire v_fb_data_7_15_EN;

  // register v_fb_data_7_2
  reg [31 : 0] v_fb_data_7_2;
  reg [31 : 0] v_fb_data_7_2_D_IN;
  wire v_fb_data_7_2_EN;

  // register v_fb_data_7_3
  reg [31 : 0] v_fb_data_7_3;
  reg [31 : 0] v_fb_data_7_3_D_IN;
  wire v_fb_data_7_3_EN;

  // register v_fb_data_7_4
  reg [31 : 0] v_fb_data_7_4;
  reg [31 : 0] v_fb_data_7_4_D_IN;
  wire v_fb_data_7_4_EN;

  // register v_fb_data_7_5
  reg [31 : 0] v_fb_data_7_5;
  reg [31 : 0] v_fb_data_7_5_D_IN;
  wire v_fb_data_7_5_EN;

  // register v_fb_data_7_6
  reg [31 : 0] v_fb_data_7_6;
  reg [31 : 0] v_fb_data_7_6_D_IN;
  wire v_fb_data_7_6_EN;

  // register v_fb_data_7_7
  reg [31 : 0] v_fb_data_7_7;
  reg [31 : 0] v_fb_data_7_7_D_IN;
  wire v_fb_data_7_7_EN;

  // register v_fb_data_7_8
  reg [31 : 0] v_fb_data_7_8;
  reg [31 : 0] v_fb_data_7_8_D_IN;
  wire v_fb_data_7_8_EN;

  // register v_fb_data_7_9
  reg [31 : 0] v_fb_data_7_9;
  reg [31 : 0] v_fb_data_7_9_D_IN;
  wire v_fb_data_7_9_EN;

  // register v_fb_dirty_0
  reg v_fb_dirty_0;
  wire v_fb_dirty_0_D_IN, v_fb_dirty_0_EN;

  // register v_fb_dirty_1
  reg v_fb_dirty_1;
  wire v_fb_dirty_1_D_IN, v_fb_dirty_1_EN;

  // register v_fb_dirty_2
  reg v_fb_dirty_2;
  wire v_fb_dirty_2_D_IN, v_fb_dirty_2_EN;

  // register v_fb_dirty_3
  reg v_fb_dirty_3;
  wire v_fb_dirty_3_D_IN, v_fb_dirty_3_EN;

  // register v_fb_dirty_4
  reg v_fb_dirty_4;
  wire v_fb_dirty_4_D_IN, v_fb_dirty_4_EN;

  // register v_fb_dirty_5
  reg v_fb_dirty_5;
  wire v_fb_dirty_5_D_IN, v_fb_dirty_5_EN;

  // register v_fb_dirty_6
  reg v_fb_dirty_6;
  wire v_fb_dirty_6_D_IN, v_fb_dirty_6_EN;

  // register v_fb_dirty_7
  reg v_fb_dirty_7;
  wire v_fb_dirty_7_D_IN, v_fb_dirty_7_EN;

  // register v_fb_err_0
  reg v_fb_err_0;
  wire v_fb_err_0_D_IN, v_fb_err_0_EN;

  // register v_fb_err_1
  reg v_fb_err_1;
  wire v_fb_err_1_D_IN, v_fb_err_1_EN;

  // register v_fb_err_2
  reg v_fb_err_2;
  wire v_fb_err_2_D_IN, v_fb_err_2_EN;

  // register v_fb_err_3
  reg v_fb_err_3;
  wire v_fb_err_3_D_IN, v_fb_err_3_EN;

  // register v_fb_err_4
  reg v_fb_err_4;
  wire v_fb_err_4_D_IN, v_fb_err_4_EN;

  // register v_fb_err_5
  reg v_fb_err_5;
  wire v_fb_err_5_D_IN, v_fb_err_5_EN;

  // register v_fb_err_6
  reg v_fb_err_6;
  wire v_fb_err_6_D_IN, v_fb_err_6_EN;

  // register v_fb_err_7
  reg v_fb_err_7;
  wire v_fb_err_7_D_IN, v_fb_err_7_EN;

  // register v_fb_line_valid_0
  reg v_fb_line_valid_0;
  reg v_fb_line_valid_0_D_IN;
  wire v_fb_line_valid_0_EN;

  // register v_fb_line_valid_1
  reg v_fb_line_valid_1;
  reg v_fb_line_valid_1_D_IN;
  wire v_fb_line_valid_1_EN;

  // register v_fb_line_valid_2
  reg v_fb_line_valid_2;
  reg v_fb_line_valid_2_D_IN;
  wire v_fb_line_valid_2_EN;

  // register v_fb_line_valid_3
  reg v_fb_line_valid_3;
  reg v_fb_line_valid_3_D_IN;
  wire v_fb_line_valid_3_EN;

  // register v_fb_line_valid_4
  reg v_fb_line_valid_4;
  reg v_fb_line_valid_4_D_IN;
  wire v_fb_line_valid_4_EN;

  // register v_fb_line_valid_5
  reg v_fb_line_valid_5;
  reg v_fb_line_valid_5_D_IN;
  wire v_fb_line_valid_5_EN;

  // register v_fb_line_valid_6
  reg v_fb_line_valid_6;
  reg v_fb_line_valid_6_D_IN;
  wire v_fb_line_valid_6_EN;

  // register v_fb_line_valid_7
  reg v_fb_line_valid_7;
  reg v_fb_line_valid_7_D_IN;
  wire v_fb_line_valid_7_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_print_stats,
       CAN_FIRE_ma_fill_from_memory,
       CAN_FIRE_ma_from_storebuffer,
       CAN_FIRE_ma_perform_release,
       CAN_FIRE_mav_allocate_line,
       CAN_FIRE_mav_polling_response,
       WILL_FIRE_RL_rl_print_stats,
       WILL_FIRE_ma_fill_from_memory,
       WILL_FIRE_ma_from_storebuffer,
       WILL_FIRE_ma_perform_release,
       WILL_FIRE_mav_allocate_line,
       WILL_FIRE_mav_polling_response;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_v_fb_data_0_0_write_1__VAL_2;
  wire MUX_v_fb_addr_valid_0_write_1__SEL_1,
       MUX_v_fb_addr_valid_0_write_1__SEL_2,
       MUX_v_fb_addr_valid_1_write_1__SEL_1,
       MUX_v_fb_addr_valid_1_write_1__SEL_2,
       MUX_v_fb_addr_valid_2_write_1__SEL_1,
       MUX_v_fb_addr_valid_2_write_1__SEL_2,
       MUX_v_fb_addr_valid_3_write_1__SEL_1,
       MUX_v_fb_addr_valid_3_write_1__SEL_2,
       MUX_v_fb_addr_valid_4_write_1__SEL_1,
       MUX_v_fb_addr_valid_4_write_1__SEL_2,
       MUX_v_fb_addr_valid_5_write_1__SEL_1,
       MUX_v_fb_addr_valid_5_write_1__SEL_2,
       MUX_v_fb_addr_valid_6_write_1__SEL_1,
       MUX_v_fb_addr_valid_6_write_1__SEL_2,
       MUX_v_fb_addr_valid_7_write_1__SEL_1,
       MUX_v_fb_addr_valid_7_write_1__SEL_2,
       MUX_v_fb_data_0_0_write_1__SEL_2,
       MUX_v_fb_data_0_0_write_1__SEL_3,
       MUX_v_fb_data_0_1_write_1__SEL_2,
       MUX_v_fb_data_0_1_write_1__SEL_3,
       MUX_v_fb_data_0_10_write_1__SEL_2,
       MUX_v_fb_data_0_10_write_1__SEL_3,
       MUX_v_fb_data_0_11_write_1__SEL_2,
       MUX_v_fb_data_0_11_write_1__SEL_3,
       MUX_v_fb_data_0_12_write_1__SEL_2,
       MUX_v_fb_data_0_12_write_1__SEL_3,
       MUX_v_fb_data_0_13_write_1__SEL_2,
       MUX_v_fb_data_0_13_write_1__SEL_3,
       MUX_v_fb_data_0_14_write_1__SEL_2,
       MUX_v_fb_data_0_14_write_1__SEL_3,
       MUX_v_fb_data_0_15_write_1__SEL_2,
       MUX_v_fb_data_0_15_write_1__SEL_3,
       MUX_v_fb_data_0_2_write_1__SEL_2,
       MUX_v_fb_data_0_2_write_1__SEL_3,
       MUX_v_fb_data_0_3_write_1__SEL_2,
       MUX_v_fb_data_0_3_write_1__SEL_3,
       MUX_v_fb_data_0_4_write_1__SEL_2,
       MUX_v_fb_data_0_4_write_1__SEL_3,
       MUX_v_fb_data_0_5_write_1__SEL_2,
       MUX_v_fb_data_0_5_write_1__SEL_3,
       MUX_v_fb_data_0_6_write_1__SEL_2,
       MUX_v_fb_data_0_6_write_1__SEL_3,
       MUX_v_fb_data_0_7_write_1__SEL_2,
       MUX_v_fb_data_0_7_write_1__SEL_3,
       MUX_v_fb_data_0_8_write_1__SEL_2,
       MUX_v_fb_data_0_8_write_1__SEL_3,
       MUX_v_fb_data_0_9_write_1__SEL_2,
       MUX_v_fb_data_0_9_write_1__SEL_3,
       MUX_v_fb_data_1_0_write_1__SEL_2,
       MUX_v_fb_data_1_0_write_1__SEL_3,
       MUX_v_fb_data_1_1_write_1__SEL_2,
       MUX_v_fb_data_1_1_write_1__SEL_3,
       MUX_v_fb_data_1_10_write_1__SEL_2,
       MUX_v_fb_data_1_10_write_1__SEL_3,
       MUX_v_fb_data_1_11_write_1__SEL_2,
       MUX_v_fb_data_1_11_write_1__SEL_3,
       MUX_v_fb_data_1_12_write_1__SEL_2,
       MUX_v_fb_data_1_12_write_1__SEL_3,
       MUX_v_fb_data_1_13_write_1__SEL_2,
       MUX_v_fb_data_1_13_write_1__SEL_3,
       MUX_v_fb_data_1_14_write_1__SEL_2,
       MUX_v_fb_data_1_14_write_1__SEL_3,
       MUX_v_fb_data_1_15_write_1__SEL_2,
       MUX_v_fb_data_1_15_write_1__SEL_3,
       MUX_v_fb_data_1_2_write_1__SEL_2,
       MUX_v_fb_data_1_2_write_1__SEL_3,
       MUX_v_fb_data_1_3_write_1__SEL_2,
       MUX_v_fb_data_1_3_write_1__SEL_3,
       MUX_v_fb_data_1_4_write_1__SEL_2,
       MUX_v_fb_data_1_4_write_1__SEL_3,
       MUX_v_fb_data_1_5_write_1__SEL_2,
       MUX_v_fb_data_1_5_write_1__SEL_3,
       MUX_v_fb_data_1_6_write_1__SEL_2,
       MUX_v_fb_data_1_6_write_1__SEL_3,
       MUX_v_fb_data_1_7_write_1__SEL_2,
       MUX_v_fb_data_1_7_write_1__SEL_3,
       MUX_v_fb_data_1_8_write_1__SEL_2,
       MUX_v_fb_data_1_8_write_1__SEL_3,
       MUX_v_fb_data_1_9_write_1__SEL_2,
       MUX_v_fb_data_1_9_write_1__SEL_3,
       MUX_v_fb_data_2_0_write_1__SEL_2,
       MUX_v_fb_data_2_0_write_1__SEL_3,
       MUX_v_fb_data_2_1_write_1__SEL_2,
       MUX_v_fb_data_2_1_write_1__SEL_3,
       MUX_v_fb_data_2_10_write_1__SEL_2,
       MUX_v_fb_data_2_10_write_1__SEL_3,
       MUX_v_fb_data_2_11_write_1__SEL_2,
       MUX_v_fb_data_2_11_write_1__SEL_3,
       MUX_v_fb_data_2_12_write_1__SEL_2,
       MUX_v_fb_data_2_12_write_1__SEL_3,
       MUX_v_fb_data_2_13_write_1__SEL_2,
       MUX_v_fb_data_2_13_write_1__SEL_3,
       MUX_v_fb_data_2_14_write_1__SEL_2,
       MUX_v_fb_data_2_14_write_1__SEL_3,
       MUX_v_fb_data_2_15_write_1__SEL_2,
       MUX_v_fb_data_2_15_write_1__SEL_3,
       MUX_v_fb_data_2_2_write_1__SEL_2,
       MUX_v_fb_data_2_2_write_1__SEL_3,
       MUX_v_fb_data_2_3_write_1__SEL_2,
       MUX_v_fb_data_2_3_write_1__SEL_3,
       MUX_v_fb_data_2_4_write_1__SEL_2,
       MUX_v_fb_data_2_4_write_1__SEL_3,
       MUX_v_fb_data_2_5_write_1__SEL_2,
       MUX_v_fb_data_2_5_write_1__SEL_3,
       MUX_v_fb_data_2_6_write_1__SEL_2,
       MUX_v_fb_data_2_6_write_1__SEL_3,
       MUX_v_fb_data_2_7_write_1__SEL_2,
       MUX_v_fb_data_2_7_write_1__SEL_3,
       MUX_v_fb_data_2_8_write_1__SEL_2,
       MUX_v_fb_data_2_8_write_1__SEL_3,
       MUX_v_fb_data_2_9_write_1__SEL_2,
       MUX_v_fb_data_2_9_write_1__SEL_3,
       MUX_v_fb_data_3_0_write_1__SEL_2,
       MUX_v_fb_data_3_0_write_1__SEL_3,
       MUX_v_fb_data_3_1_write_1__SEL_2,
       MUX_v_fb_data_3_1_write_1__SEL_3,
       MUX_v_fb_data_3_10_write_1__SEL_2,
       MUX_v_fb_data_3_10_write_1__SEL_3,
       MUX_v_fb_data_3_11_write_1__SEL_2,
       MUX_v_fb_data_3_11_write_1__SEL_3,
       MUX_v_fb_data_3_12_write_1__SEL_2,
       MUX_v_fb_data_3_12_write_1__SEL_3,
       MUX_v_fb_data_3_13_write_1__SEL_2,
       MUX_v_fb_data_3_13_write_1__SEL_3,
       MUX_v_fb_data_3_14_write_1__SEL_2,
       MUX_v_fb_data_3_14_write_1__SEL_3,
       MUX_v_fb_data_3_15_write_1__SEL_2,
       MUX_v_fb_data_3_15_write_1__SEL_3,
       MUX_v_fb_data_3_2_write_1__SEL_2,
       MUX_v_fb_data_3_2_write_1__SEL_3,
       MUX_v_fb_data_3_3_write_1__SEL_2,
       MUX_v_fb_data_3_3_write_1__SEL_3,
       MUX_v_fb_data_3_4_write_1__SEL_2,
       MUX_v_fb_data_3_4_write_1__SEL_3,
       MUX_v_fb_data_3_5_write_1__SEL_2,
       MUX_v_fb_data_3_5_write_1__SEL_3,
       MUX_v_fb_data_3_6_write_1__SEL_2,
       MUX_v_fb_data_3_6_write_1__SEL_3,
       MUX_v_fb_data_3_7_write_1__SEL_2,
       MUX_v_fb_data_3_7_write_1__SEL_3,
       MUX_v_fb_data_3_8_write_1__SEL_2,
       MUX_v_fb_data_3_8_write_1__SEL_3,
       MUX_v_fb_data_3_9_write_1__SEL_2,
       MUX_v_fb_data_3_9_write_1__SEL_3,
       MUX_v_fb_data_4_0_write_1__SEL_2,
       MUX_v_fb_data_4_0_write_1__SEL_3,
       MUX_v_fb_data_4_1_write_1__SEL_2,
       MUX_v_fb_data_4_1_write_1__SEL_3,
       MUX_v_fb_data_4_10_write_1__SEL_2,
       MUX_v_fb_data_4_10_write_1__SEL_3,
       MUX_v_fb_data_4_11_write_1__SEL_2,
       MUX_v_fb_data_4_11_write_1__SEL_3,
       MUX_v_fb_data_4_12_write_1__SEL_2,
       MUX_v_fb_data_4_12_write_1__SEL_3,
       MUX_v_fb_data_4_13_write_1__SEL_2,
       MUX_v_fb_data_4_13_write_1__SEL_3,
       MUX_v_fb_data_4_14_write_1__SEL_2,
       MUX_v_fb_data_4_14_write_1__SEL_3,
       MUX_v_fb_data_4_15_write_1__SEL_2,
       MUX_v_fb_data_4_15_write_1__SEL_3,
       MUX_v_fb_data_4_2_write_1__SEL_2,
       MUX_v_fb_data_4_2_write_1__SEL_3,
       MUX_v_fb_data_4_3_write_1__SEL_2,
       MUX_v_fb_data_4_3_write_1__SEL_3,
       MUX_v_fb_data_4_4_write_1__SEL_2,
       MUX_v_fb_data_4_4_write_1__SEL_3,
       MUX_v_fb_data_4_5_write_1__SEL_2,
       MUX_v_fb_data_4_5_write_1__SEL_3,
       MUX_v_fb_data_4_6_write_1__SEL_2,
       MUX_v_fb_data_4_6_write_1__SEL_3,
       MUX_v_fb_data_4_7_write_1__SEL_2,
       MUX_v_fb_data_4_7_write_1__SEL_3,
       MUX_v_fb_data_4_8_write_1__SEL_2,
       MUX_v_fb_data_4_8_write_1__SEL_3,
       MUX_v_fb_data_4_9_write_1__SEL_2,
       MUX_v_fb_data_4_9_write_1__SEL_3,
       MUX_v_fb_data_5_0_write_1__SEL_2,
       MUX_v_fb_data_5_0_write_1__SEL_3,
       MUX_v_fb_data_5_1_write_1__SEL_2,
       MUX_v_fb_data_5_1_write_1__SEL_3,
       MUX_v_fb_data_5_10_write_1__SEL_2,
       MUX_v_fb_data_5_10_write_1__SEL_3,
       MUX_v_fb_data_5_11_write_1__SEL_2,
       MUX_v_fb_data_5_11_write_1__SEL_3,
       MUX_v_fb_data_5_12_write_1__SEL_2,
       MUX_v_fb_data_5_12_write_1__SEL_3,
       MUX_v_fb_data_5_13_write_1__SEL_2,
       MUX_v_fb_data_5_13_write_1__SEL_3,
       MUX_v_fb_data_5_14_write_1__SEL_2,
       MUX_v_fb_data_5_14_write_1__SEL_3,
       MUX_v_fb_data_5_15_write_1__SEL_2,
       MUX_v_fb_data_5_15_write_1__SEL_3,
       MUX_v_fb_data_5_2_write_1__SEL_2,
       MUX_v_fb_data_5_2_write_1__SEL_3,
       MUX_v_fb_data_5_3_write_1__SEL_2,
       MUX_v_fb_data_5_3_write_1__SEL_3,
       MUX_v_fb_data_5_4_write_1__SEL_2,
       MUX_v_fb_data_5_4_write_1__SEL_3,
       MUX_v_fb_data_5_5_write_1__SEL_2,
       MUX_v_fb_data_5_5_write_1__SEL_3,
       MUX_v_fb_data_5_6_write_1__SEL_2,
       MUX_v_fb_data_5_6_write_1__SEL_3,
       MUX_v_fb_data_5_7_write_1__SEL_2,
       MUX_v_fb_data_5_7_write_1__SEL_3,
       MUX_v_fb_data_5_8_write_1__SEL_2,
       MUX_v_fb_data_5_8_write_1__SEL_3,
       MUX_v_fb_data_5_9_write_1__SEL_2,
       MUX_v_fb_data_5_9_write_1__SEL_3,
       MUX_v_fb_data_6_0_write_1__SEL_2,
       MUX_v_fb_data_6_0_write_1__SEL_3,
       MUX_v_fb_data_6_1_write_1__SEL_2,
       MUX_v_fb_data_6_1_write_1__SEL_3,
       MUX_v_fb_data_6_10_write_1__SEL_2,
       MUX_v_fb_data_6_10_write_1__SEL_3,
       MUX_v_fb_data_6_11_write_1__SEL_2,
       MUX_v_fb_data_6_11_write_1__SEL_3,
       MUX_v_fb_data_6_12_write_1__SEL_2,
       MUX_v_fb_data_6_12_write_1__SEL_3,
       MUX_v_fb_data_6_13_write_1__SEL_2,
       MUX_v_fb_data_6_13_write_1__SEL_3,
       MUX_v_fb_data_6_14_write_1__SEL_2,
       MUX_v_fb_data_6_14_write_1__SEL_3,
       MUX_v_fb_data_6_15_write_1__SEL_2,
       MUX_v_fb_data_6_15_write_1__SEL_3,
       MUX_v_fb_data_6_2_write_1__SEL_2,
       MUX_v_fb_data_6_2_write_1__SEL_3,
       MUX_v_fb_data_6_3_write_1__SEL_2,
       MUX_v_fb_data_6_3_write_1__SEL_3,
       MUX_v_fb_data_6_4_write_1__SEL_2,
       MUX_v_fb_data_6_4_write_1__SEL_3,
       MUX_v_fb_data_6_5_write_1__SEL_2,
       MUX_v_fb_data_6_5_write_1__SEL_3,
       MUX_v_fb_data_6_6_write_1__SEL_2,
       MUX_v_fb_data_6_6_write_1__SEL_3,
       MUX_v_fb_data_6_7_write_1__SEL_2,
       MUX_v_fb_data_6_7_write_1__SEL_3,
       MUX_v_fb_data_6_8_write_1__SEL_2,
       MUX_v_fb_data_6_8_write_1__SEL_3,
       MUX_v_fb_data_6_9_write_1__SEL_2,
       MUX_v_fb_data_6_9_write_1__SEL_3,
       MUX_v_fb_data_7_0_write_1__SEL_2,
       MUX_v_fb_data_7_0_write_1__SEL_3,
       MUX_v_fb_data_7_1_write_1__SEL_2,
       MUX_v_fb_data_7_1_write_1__SEL_3,
       MUX_v_fb_data_7_10_write_1__SEL_2,
       MUX_v_fb_data_7_10_write_1__SEL_3,
       MUX_v_fb_data_7_11_write_1__SEL_2,
       MUX_v_fb_data_7_11_write_1__SEL_3,
       MUX_v_fb_data_7_12_write_1__SEL_2,
       MUX_v_fb_data_7_12_write_1__SEL_3,
       MUX_v_fb_data_7_13_write_1__SEL_2,
       MUX_v_fb_data_7_13_write_1__SEL_3,
       MUX_v_fb_data_7_14_write_1__SEL_2,
       MUX_v_fb_data_7_14_write_1__SEL_3,
       MUX_v_fb_data_7_15_write_1__SEL_2,
       MUX_v_fb_data_7_15_write_1__SEL_3,
       MUX_v_fb_data_7_2_write_1__SEL_2,
       MUX_v_fb_data_7_2_write_1__SEL_3,
       MUX_v_fb_data_7_3_write_1__SEL_2,
       MUX_v_fb_data_7_3_write_1__SEL_3,
       MUX_v_fb_data_7_4_write_1__SEL_2,
       MUX_v_fb_data_7_4_write_1__SEL_3,
       MUX_v_fb_data_7_5_write_1__SEL_2,
       MUX_v_fb_data_7_5_write_1__SEL_3,
       MUX_v_fb_data_7_6_write_1__SEL_2,
       MUX_v_fb_data_7_6_write_1__SEL_3,
       MUX_v_fb_data_7_7_write_1__SEL_2,
       MUX_v_fb_data_7_7_write_1__SEL_3,
       MUX_v_fb_data_7_8_write_1__SEL_2,
       MUX_v_fb_data_7_8_write_1__SEL_3,
       MUX_v_fb_data_7_9_write_1__SEL_2,
       MUX_v_fb_data_7_9_write_1__SEL_3,
       MUX_v_fb_dirty_0_write_1__VAL_1,
       MUX_v_fb_line_valid_0_write_1__SEL_3,
       MUX_v_fb_line_valid_1_write_1__SEL_3,
       MUX_v_fb_line_valid_2_write_1__SEL_3,
       MUX_v_fb_line_valid_3_write_1__SEL_3,
       MUX_v_fb_line_valid_4_write_1__SEL_3,
       MUX_v_fb_line_valid_5_write_1__SEL_3,
       MUX_v_fb_line_valid_6_write_1__SEL_3,
       MUX_v_fb_line_valid_7_write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d259;
  reg TASK_testplusargs___d260;
  reg TASK_testplusargs___d261;
  reg [63 : 0] v__h24503;
  reg TASK_testplusargs___d649;
  reg TASK_testplusargs___d650;
  reg TASK_testplusargs___d651;
  reg [63 : 0] v__h51216;
  reg TASK_testplusargs___d1;
  reg TASK_testplusargs___d2;
  reg TASK_testplusargs___d3;
  reg [63 : 0] v__h7418;
  reg TASK_testplusargs___d76;
  reg TASK_testplusargs___d77;
  reg TASK_testplusargs___d78;
  reg [63 : 0] v__h21037;
  reg TASK_testplusargs___d82;
  reg TASK_testplusargs___d83;
  reg TASK_testplusargs___d84;
  reg [63 : 0] v__h21176;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286,
	       SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304,
	       SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322,
	       SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340,
	       SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358,
	       SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376,
	       SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394,
	       SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412,
	       lv_selected_word__h51965,
	       lv_selected_word__h52018,
	       lv_selected_word__h52071,
	       lv_selected_word__h52124,
	       lv_selected_word__h52177,
	       lv_selected_word__h52230,
	       lv_selected_word__h52283,
	       lv_selected_word__h52336,
	       spliced_bits__h49276,
	       spliced_bits__h49305,
	       spliced_bits__h49334,
	       spliced_bits__h49363,
	       spliced_bits__h49392,
	       spliced_bits__h49421,
	       spliced_bits__h49450,
	       spliced_bits__h49479,
	       spliced_bits__h49508,
	       spliced_bits__h49537,
	       spliced_bits__h49566,
	       spliced_bits__h49595,
	       spliced_bits__h49624,
	       spliced_bits__h49653,
	       spliced_bits__h49682,
	       spliced_bits__h49711,
	       x__h48937,
	       x_mv_release_info_address__h49168;
  reg x__h50740, x__h50767;
  wire [511 : 0] x_mv_release_info_dataline__h49167;
  wire [31 : 0] IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d708,
		IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d709,
		IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d710,
		IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d711,
		IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d712,
		IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d713,
		x__h48935,
		y__h48936,
		y__h48938,
		y_avValue_word__h52400;
  wire [15 : 0] x__h24197, x__h24220;
  wire [7 : 0] IF_v_fb_addr_0_read__08_BITS_31_TO_6_77_EQ_mav_ETC___d680,
	       _theResult____h51144;
  wire [3 : 0] lv_current_bank__h21268;
  wire [2 : 0] x__h20940, x__h50864;
  wire IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d683,
       IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d692,
       IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d684,
       IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d693,
       IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d685,
       IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d694,
       IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d686,
       IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d695,
       IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d687,
       IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d696,
       IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d688,
       IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d697,
       IF_v_fb_addr_7_read__15_BITS_31_TO_6_55_EQ_mav_ETC___d689,
       NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35,
       mav_polling_response_fill_AND_v_fb_addr_7_read_ETC___d724,
       v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20,
       y_avValue_err__h52399;

  // value method mv_fbfull
  assign mv_fbfull =
	     v_fb_addr_valid_0 &&
	     v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20 ;

  // value method mv_fbempty
  assign mv_fbempty =
	     !v_fb_addr_valid_0 &&
	     NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35 ;

  // value method mv_fbhead_valid
  always@(rg_fbhead or
	  v_fb_line_valid_0 or
	  v_fb_line_valid_1 or
	  v_fb_line_valid_2 or
	  v_fb_line_valid_3 or
	  v_fb_line_valid_4 or
	  v_fb_line_valid_5 or v_fb_line_valid_6 or v_fb_line_valid_7)
  begin
    case (rg_fbhead)
      3'd0: mv_fbhead_valid = v_fb_line_valid_0;
      3'd1: mv_fbhead_valid = v_fb_line_valid_1;
      3'd2: mv_fbhead_valid = v_fb_line_valid_2;
      3'd3: mv_fbhead_valid = v_fb_line_valid_3;
      3'd4: mv_fbhead_valid = v_fb_line_valid_4;
      3'd5: mv_fbhead_valid = v_fb_line_valid_5;
      3'd6: mv_fbhead_valid = v_fb_line_valid_6;
      3'd7: mv_fbhead_valid = v_fb_line_valid_7;
    endcase
  end

  // actionvalue method mav_allocate_line
  assign mav_allocate_line = rg_fbtail ;
  assign RDY_mav_allocate_line = 1'd1 ;
  assign CAN_FIRE_mav_allocate_line = 1'd1 ;
  assign WILL_FIRE_mav_allocate_line = EN_mav_allocate_line ;

  // action method ma_fill_from_memory
  assign RDY_ma_fill_from_memory = 1'd1 ;
  assign CAN_FIRE_ma_fill_from_memory = 1'd1 ;
  assign WILL_FIRE_ma_fill_from_memory = EN_ma_fill_from_memory ;

  // action method ma_from_storebuffer
  assign RDY_ma_from_storebuffer = 1'd1 ;
  assign CAN_FIRE_ma_from_storebuffer = 1'd1 ;
  assign WILL_FIRE_ma_from_storebuffer = EN_ma_from_storebuffer ;

  // value method mv_release_info
  assign mv_release_info =
	     { x_mv_release_info_dataline__h49167,
	       x_mv_release_info_address__h49168,
	       x__h50740,
	       x__h50767 } ;
  assign RDY_mv_release_info = 1'd1 ;

  // action method ma_perform_release
  assign RDY_ma_perform_release = 1'd1 ;
  assign CAN_FIRE_ma_perform_release = 1'd1 ;
  assign WILL_FIRE_ma_perform_release = EN_ma_perform_release ;

  // actionvalue method mav_polling_response
  assign mav_polling_response =
	     { y_avValue_err__h52399,
	       y_avValue_word__h52400,
	       _theResult____h51144,
	       _theResult____h51144 != 8'd0,
	       IF_v_fb_addr_7_read__15_BITS_31_TO_6_55_EQ_mav_ETC___d689 ||
	       mav_polling_response_fill_AND_v_fb_addr_7_read_ETC___d724 } ;
  assign RDY_mav_polling_response = 1'd1 ;
  assign CAN_FIRE_mav_polling_response = 1'd1 ;
  assign WILL_FIRE_mav_polling_response = EN_mav_polling_response ;

  // rule RL_rl_print_stats
  assign CAN_FIRE_RL_rl_print_stats = 1'd1 ;
  assign WILL_FIRE_RL_rl_print_stats = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_v_fb_addr_valid_0_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd0 ;
  assign MUX_v_fb_addr_valid_0_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ;
  assign MUX_v_fb_addr_valid_1_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd1 ;
  assign MUX_v_fb_addr_valid_1_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ;
  assign MUX_v_fb_addr_valid_2_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd2 ;
  assign MUX_v_fb_addr_valid_2_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ;
  assign MUX_v_fb_addr_valid_3_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd3 ;
  assign MUX_v_fb_addr_valid_3_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ;
  assign MUX_v_fb_addr_valid_4_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd4 ;
  assign MUX_v_fb_addr_valid_4_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ;
  assign MUX_v_fb_addr_valid_5_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd5 ;
  assign MUX_v_fb_addr_valid_5_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ;
  assign MUX_v_fb_addr_valid_6_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd6 ;
  assign MUX_v_fb_addr_valid_6_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ;
  assign MUX_v_fb_addr_valid_7_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 3'd7 ;
  assign MUX_v_fb_addr_valid_7_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ;
  assign MUX_v_fb_data_0_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;
  assign MUX_v_fb_data_0_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd0 ;
  assign MUX_v_fb_data_1_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;
  assign MUX_v_fb_data_1_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd1 ;
  assign MUX_v_fb_data_2_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;
  assign MUX_v_fb_data_2_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd2 ;
  assign MUX_v_fb_data_3_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;
  assign MUX_v_fb_data_3_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd3 ;
  assign MUX_v_fb_data_4_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;
  assign MUX_v_fb_data_4_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd4 ;
  assign MUX_v_fb_data_5_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;
  assign MUX_v_fb_data_5_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd5 ;
  assign MUX_v_fb_data_6_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;
  assign MUX_v_fb_data_6_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd6 ;
  assign MUX_v_fb_data_7_0_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_1_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_10_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_10_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_11_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_11_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_12_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_12_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_13_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_13_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_14_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_14_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_15_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_15_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_2_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_3_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_4_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_5_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_6_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_7_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_8_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_8_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_9_write_1__SEL_2 =
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;
  assign MUX_v_fb_data_7_9_write_1__SEL_3 =
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd7 ;
  assign MUX_v_fb_line_valid_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd0 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd1 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd2 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd3 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_4_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd4 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_5_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd5 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_6_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd6 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_7_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd7 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_data_0_0_write_1__VAL_2 = x__h48935 | y__h48936 ;
  assign MUX_v_fb_dirty_0_write_1__VAL_1 =
	     mav_allocate_line_from_ram & mav_allocate_line_dirty ;

  // register rg_fb_enables
  assign rg_fb_enables_D_IN =
	     ma_fill_from_memory_mem_resp[1] ? 16'd0 : x__h24197 ;
  assign rg_fb_enables_EN = EN_ma_fill_from_memory ;

  // register rg_fbhead
  assign rg_fbhead_D_IN = (rg_fbhead == 3'd7) ? 3'd0 : x__h50864 ;
  assign rg_fbhead_EN = EN_ma_perform_release ;

  // register rg_fbtail
  assign rg_fbtail_D_IN = (rg_fbtail == 3'd7) ? 3'd0 : x__h20940 ;
  assign rg_fbtail_EN = EN_mav_allocate_line ;

  // register rg_next_bank
  assign rg_next_bank_D_IN = lv_current_bank__h21268 + 4'd1 ;
  assign rg_next_bank_EN = EN_ma_fill_from_memory ;

  // register v_fb_addr_0
  assign v_fb_addr_0_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_0_EN = MUX_v_fb_addr_valid_0_write_1__SEL_2 ;

  // register v_fb_addr_1
  assign v_fb_addr_1_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_1_EN = MUX_v_fb_addr_valid_1_write_1__SEL_2 ;

  // register v_fb_addr_2
  assign v_fb_addr_2_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_2_EN = MUX_v_fb_addr_valid_2_write_1__SEL_2 ;

  // register v_fb_addr_3
  assign v_fb_addr_3_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_3_EN = MUX_v_fb_addr_valid_3_write_1__SEL_2 ;

  // register v_fb_addr_4
  assign v_fb_addr_4_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_4_EN = MUX_v_fb_addr_valid_4_write_1__SEL_2 ;

  // register v_fb_addr_5
  assign v_fb_addr_5_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_5_EN = MUX_v_fb_addr_valid_5_write_1__SEL_2 ;

  // register v_fb_addr_6
  assign v_fb_addr_6_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_6_EN = MUX_v_fb_addr_valid_6_write_1__SEL_2 ;

  // register v_fb_addr_7
  assign v_fb_addr_7_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_7_EN = MUX_v_fb_addr_valid_7_write_1__SEL_2 ;

  // register v_fb_addr_valid_0
  assign v_fb_addr_valid_0_D_IN = !MUX_v_fb_addr_valid_0_write_1__SEL_1 ;
  assign v_fb_addr_valid_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_perform_release && rg_fbhead == 3'd0 ;

  // register v_fb_addr_valid_1
  assign v_fb_addr_valid_1_D_IN = !MUX_v_fb_addr_valid_1_write_1__SEL_1 ;
  assign v_fb_addr_valid_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_perform_release && rg_fbhead == 3'd1 ;

  // register v_fb_addr_valid_2
  assign v_fb_addr_valid_2_D_IN = !MUX_v_fb_addr_valid_2_write_1__SEL_1 ;
  assign v_fb_addr_valid_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_perform_release && rg_fbhead == 3'd2 ;

  // register v_fb_addr_valid_3
  assign v_fb_addr_valid_3_D_IN = !MUX_v_fb_addr_valid_3_write_1__SEL_1 ;
  assign v_fb_addr_valid_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_perform_release && rg_fbhead == 3'd3 ;

  // register v_fb_addr_valid_4
  assign v_fb_addr_valid_4_D_IN = !MUX_v_fb_addr_valid_4_write_1__SEL_1 ;
  assign v_fb_addr_valid_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_perform_release && rg_fbhead == 3'd4 ;

  // register v_fb_addr_valid_5
  assign v_fb_addr_valid_5_D_IN = !MUX_v_fb_addr_valid_5_write_1__SEL_1 ;
  assign v_fb_addr_valid_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_perform_release && rg_fbhead == 3'd5 ;

  // register v_fb_addr_valid_6
  assign v_fb_addr_valid_6_D_IN = !MUX_v_fb_addr_valid_6_write_1__SEL_1 ;
  assign v_fb_addr_valid_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_perform_release && rg_fbhead == 3'd6 ;

  // register v_fb_addr_valid_7
  assign v_fb_addr_valid_7_D_IN = !MUX_v_fb_addr_valid_7_write_1__SEL_1 ;
  assign v_fb_addr_valid_7_EN =
	     EN_ma_perform_release && rg_fbhead == 3'd7 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ;

  // register v_fb_data_0_0
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_0_0_write_1__SEL_2:
	v_fb_data_0_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_0_write_1__SEL_3:
	v_fb_data_0_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_1
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_0_1_write_1__SEL_2:
	v_fb_data_0_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_1_write_1__SEL_3:
	v_fb_data_0_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_10
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_0_10_write_1__SEL_2:
	v_fb_data_0_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_10_write_1__SEL_3:
	v_fb_data_0_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_11
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_0_11_write_1__SEL_2:
	v_fb_data_0_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_11_write_1__SEL_3:
	v_fb_data_0_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_12
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_0_12_write_1__SEL_2:
	v_fb_data_0_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_12_write_1__SEL_3:
	v_fb_data_0_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_13
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_0_13_write_1__SEL_2:
	v_fb_data_0_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_13_write_1__SEL_3:
	v_fb_data_0_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_14
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_0_14_write_1__SEL_2:
	v_fb_data_0_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_14_write_1__SEL_3:
	v_fb_data_0_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_15
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_0_15_write_1__SEL_2:
	v_fb_data_0_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_15_write_1__SEL_3:
	v_fb_data_0_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_2
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_0_2_write_1__SEL_2:
	v_fb_data_0_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_2_write_1__SEL_3:
	v_fb_data_0_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_3
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_0_3_write_1__SEL_2:
	v_fb_data_0_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_3_write_1__SEL_3:
	v_fb_data_0_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_4
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_0_4_write_1__SEL_2:
	v_fb_data_0_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_4_write_1__SEL_3:
	v_fb_data_0_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_5
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_0_5_write_1__SEL_2:
	v_fb_data_0_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_5_write_1__SEL_3:
	v_fb_data_0_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_6
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_0_6_write_1__SEL_2:
	v_fb_data_0_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_6_write_1__SEL_3:
	v_fb_data_0_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_7
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_0_7_write_1__SEL_2:
	v_fb_data_0_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_7_write_1__SEL_3:
	v_fb_data_0_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_8
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_0_8_write_1__SEL_2:
	v_fb_data_0_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_8_write_1__SEL_3:
	v_fb_data_0_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_0_9
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_0_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_0_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_data_0_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_0_9_write_1__SEL_2:
	v_fb_data_0_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_0_9_write_1__SEL_3:
	v_fb_data_0_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_0_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_0_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd0 ;

  // register v_fb_data_1_0
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_1_0_write_1__SEL_2:
	v_fb_data_1_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_0_write_1__SEL_3:
	v_fb_data_1_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_1
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_1_1_write_1__SEL_2:
	v_fb_data_1_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_1_write_1__SEL_3:
	v_fb_data_1_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_10
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_1_10_write_1__SEL_2:
	v_fb_data_1_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_10_write_1__SEL_3:
	v_fb_data_1_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_11
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_1_11_write_1__SEL_2:
	v_fb_data_1_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_11_write_1__SEL_3:
	v_fb_data_1_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_12
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_1_12_write_1__SEL_2:
	v_fb_data_1_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_12_write_1__SEL_3:
	v_fb_data_1_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_13
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_1_13_write_1__SEL_2:
	v_fb_data_1_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_13_write_1__SEL_3:
	v_fb_data_1_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_14
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_1_14_write_1__SEL_2:
	v_fb_data_1_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_14_write_1__SEL_3:
	v_fb_data_1_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_15
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_1_15_write_1__SEL_2:
	v_fb_data_1_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_15_write_1__SEL_3:
	v_fb_data_1_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_2
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_1_2_write_1__SEL_2:
	v_fb_data_1_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_2_write_1__SEL_3:
	v_fb_data_1_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_3
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_1_3_write_1__SEL_2:
	v_fb_data_1_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_3_write_1__SEL_3:
	v_fb_data_1_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_4
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_1_4_write_1__SEL_2:
	v_fb_data_1_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_4_write_1__SEL_3:
	v_fb_data_1_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_5
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_1_5_write_1__SEL_2:
	v_fb_data_1_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_5_write_1__SEL_3:
	v_fb_data_1_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_6
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_1_6_write_1__SEL_2:
	v_fb_data_1_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_6_write_1__SEL_3:
	v_fb_data_1_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_7
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_1_7_write_1__SEL_2:
	v_fb_data_1_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_7_write_1__SEL_3:
	v_fb_data_1_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_8
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_1_8_write_1__SEL_2:
	v_fb_data_1_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_8_write_1__SEL_3:
	v_fb_data_1_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_1_9
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_1_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_1_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_data_1_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_1_9_write_1__SEL_2:
	v_fb_data_1_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_1_9_write_1__SEL_3:
	v_fb_data_1_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_1_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_1_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd1 ;

  // register v_fb_data_2_0
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_2_0_write_1__SEL_2:
	v_fb_data_2_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_0_write_1__SEL_3:
	v_fb_data_2_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_1
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_2_1_write_1__SEL_2:
	v_fb_data_2_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_1_write_1__SEL_3:
	v_fb_data_2_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_10
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_2_10_write_1__SEL_2:
	v_fb_data_2_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_10_write_1__SEL_3:
	v_fb_data_2_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_11
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_2_11_write_1__SEL_2:
	v_fb_data_2_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_11_write_1__SEL_3:
	v_fb_data_2_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_12
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_2_12_write_1__SEL_2:
	v_fb_data_2_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_12_write_1__SEL_3:
	v_fb_data_2_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_13
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_2_13_write_1__SEL_2:
	v_fb_data_2_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_13_write_1__SEL_3:
	v_fb_data_2_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_14
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_2_14_write_1__SEL_2:
	v_fb_data_2_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_14_write_1__SEL_3:
	v_fb_data_2_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_15
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_2_15_write_1__SEL_2:
	v_fb_data_2_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_15_write_1__SEL_3:
	v_fb_data_2_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_2
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_2_2_write_1__SEL_2:
	v_fb_data_2_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_2_write_1__SEL_3:
	v_fb_data_2_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_3
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_2_3_write_1__SEL_2:
	v_fb_data_2_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_3_write_1__SEL_3:
	v_fb_data_2_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_4
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_2_4_write_1__SEL_2:
	v_fb_data_2_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_4_write_1__SEL_3:
	v_fb_data_2_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_5
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_2_5_write_1__SEL_2:
	v_fb_data_2_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_5_write_1__SEL_3:
	v_fb_data_2_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_6
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_2_6_write_1__SEL_2:
	v_fb_data_2_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_6_write_1__SEL_3:
	v_fb_data_2_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_7
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_2_7_write_1__SEL_2:
	v_fb_data_2_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_7_write_1__SEL_3:
	v_fb_data_2_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_8
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_2_8_write_1__SEL_2:
	v_fb_data_2_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_8_write_1__SEL_3:
	v_fb_data_2_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_2_9
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_2_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_2_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_data_2_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_2_9_write_1__SEL_2:
	v_fb_data_2_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_2_9_write_1__SEL_3:
	v_fb_data_2_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_2_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_2_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd2 ;

  // register v_fb_data_3_0
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_3_0_write_1__SEL_2:
	v_fb_data_3_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_0_write_1__SEL_3:
	v_fb_data_3_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_1
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_3_1_write_1__SEL_2:
	v_fb_data_3_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_1_write_1__SEL_3:
	v_fb_data_3_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_10
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_3_10_write_1__SEL_2:
	v_fb_data_3_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_10_write_1__SEL_3:
	v_fb_data_3_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_11
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_3_11_write_1__SEL_2:
	v_fb_data_3_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_11_write_1__SEL_3:
	v_fb_data_3_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_12
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_3_12_write_1__SEL_2:
	v_fb_data_3_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_12_write_1__SEL_3:
	v_fb_data_3_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_13
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_3_13_write_1__SEL_2:
	v_fb_data_3_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_13_write_1__SEL_3:
	v_fb_data_3_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_14
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_3_14_write_1__SEL_2:
	v_fb_data_3_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_14_write_1__SEL_3:
	v_fb_data_3_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_15
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_3_15_write_1__SEL_2:
	v_fb_data_3_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_15_write_1__SEL_3:
	v_fb_data_3_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_2
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_3_2_write_1__SEL_2:
	v_fb_data_3_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_2_write_1__SEL_3:
	v_fb_data_3_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_3
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_3_3_write_1__SEL_2:
	v_fb_data_3_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_3_write_1__SEL_3:
	v_fb_data_3_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_4
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_3_4_write_1__SEL_2:
	v_fb_data_3_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_4_write_1__SEL_3:
	v_fb_data_3_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_5
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_3_5_write_1__SEL_2:
	v_fb_data_3_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_5_write_1__SEL_3:
	v_fb_data_3_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_6
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_3_6_write_1__SEL_2:
	v_fb_data_3_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_6_write_1__SEL_3:
	v_fb_data_3_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_7
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_3_7_write_1__SEL_2:
	v_fb_data_3_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_7_write_1__SEL_3:
	v_fb_data_3_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_8
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_3_8_write_1__SEL_2:
	v_fb_data_3_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_8_write_1__SEL_3:
	v_fb_data_3_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_3_9
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_3_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_3_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_data_3_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_3_9_write_1__SEL_2:
	v_fb_data_3_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_3_9_write_1__SEL_3:
	v_fb_data_3_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_3_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_3_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd3 ;

  // register v_fb_data_4_0
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_4_0_write_1__SEL_2:
	v_fb_data_4_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_0_write_1__SEL_3:
	v_fb_data_4_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_1
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_4_1_write_1__SEL_2:
	v_fb_data_4_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_1_write_1__SEL_3:
	v_fb_data_4_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_10
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_4_10_write_1__SEL_2:
	v_fb_data_4_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_10_write_1__SEL_3:
	v_fb_data_4_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_11
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_4_11_write_1__SEL_2:
	v_fb_data_4_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_11_write_1__SEL_3:
	v_fb_data_4_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_12
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_4_12_write_1__SEL_2:
	v_fb_data_4_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_12_write_1__SEL_3:
	v_fb_data_4_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_13
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_4_13_write_1__SEL_2:
	v_fb_data_4_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_13_write_1__SEL_3:
	v_fb_data_4_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_14
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_4_14_write_1__SEL_2:
	v_fb_data_4_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_14_write_1__SEL_3:
	v_fb_data_4_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_15
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_4_15_write_1__SEL_2:
	v_fb_data_4_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_15_write_1__SEL_3:
	v_fb_data_4_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_2
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_4_2_write_1__SEL_2:
	v_fb_data_4_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_2_write_1__SEL_3:
	v_fb_data_4_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_3
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_4_3_write_1__SEL_2:
	v_fb_data_4_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_3_write_1__SEL_3:
	v_fb_data_4_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_4
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_4_4_write_1__SEL_2:
	v_fb_data_4_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_4_write_1__SEL_3:
	v_fb_data_4_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_5
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_4_5_write_1__SEL_2:
	v_fb_data_4_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_5_write_1__SEL_3:
	v_fb_data_4_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_6
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_4_6_write_1__SEL_2:
	v_fb_data_4_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_6_write_1__SEL_3:
	v_fb_data_4_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_7
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_4_7_write_1__SEL_2:
	v_fb_data_4_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_7_write_1__SEL_3:
	v_fb_data_4_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_8
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_4_8_write_1__SEL_2:
	v_fb_data_4_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_8_write_1__SEL_3:
	v_fb_data_4_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_4_9
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_4_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_4_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_data_4_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_4_9_write_1__SEL_2:
	v_fb_data_4_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_4_9_write_1__SEL_3:
	v_fb_data_4_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_4_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_4_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd4 ;

  // register v_fb_data_5_0
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_5_0_write_1__SEL_2:
	v_fb_data_5_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_0_write_1__SEL_3:
	v_fb_data_5_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_1
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_5_1_write_1__SEL_2:
	v_fb_data_5_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_1_write_1__SEL_3:
	v_fb_data_5_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_10
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_5_10_write_1__SEL_2:
	v_fb_data_5_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_10_write_1__SEL_3:
	v_fb_data_5_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_11
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_5_11_write_1__SEL_2:
	v_fb_data_5_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_11_write_1__SEL_3:
	v_fb_data_5_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_12
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_5_12_write_1__SEL_2:
	v_fb_data_5_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_12_write_1__SEL_3:
	v_fb_data_5_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_13
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_5_13_write_1__SEL_2:
	v_fb_data_5_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_13_write_1__SEL_3:
	v_fb_data_5_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_14
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_5_14_write_1__SEL_2:
	v_fb_data_5_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_14_write_1__SEL_3:
	v_fb_data_5_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_15
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_5_15_write_1__SEL_2:
	v_fb_data_5_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_15_write_1__SEL_3:
	v_fb_data_5_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_2
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_5_2_write_1__SEL_2:
	v_fb_data_5_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_2_write_1__SEL_3:
	v_fb_data_5_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_3
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_5_3_write_1__SEL_2:
	v_fb_data_5_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_3_write_1__SEL_3:
	v_fb_data_5_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_4
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_5_4_write_1__SEL_2:
	v_fb_data_5_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_4_write_1__SEL_3:
	v_fb_data_5_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_5
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_5_5_write_1__SEL_2:
	v_fb_data_5_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_5_write_1__SEL_3:
	v_fb_data_5_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_6
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_5_6_write_1__SEL_2:
	v_fb_data_5_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_6_write_1__SEL_3:
	v_fb_data_5_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_7
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_5_7_write_1__SEL_2:
	v_fb_data_5_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_7_write_1__SEL_3:
	v_fb_data_5_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_8
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_5_8_write_1__SEL_2:
	v_fb_data_5_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_8_write_1__SEL_3:
	v_fb_data_5_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_5_9
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_5_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_5_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_data_5_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_5_9_write_1__SEL_2:
	v_fb_data_5_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_5_9_write_1__SEL_3:
	v_fb_data_5_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_5_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_5_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd5 ;

  // register v_fb_data_6_0
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_6_0_write_1__SEL_2:
	v_fb_data_6_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_0_write_1__SEL_3:
	v_fb_data_6_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_1
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_6_1_write_1__SEL_2:
	v_fb_data_6_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_1_write_1__SEL_3:
	v_fb_data_6_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_10
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_6_10_write_1__SEL_2:
	v_fb_data_6_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_10_write_1__SEL_3:
	v_fb_data_6_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_11
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_6_11_write_1__SEL_2:
	v_fb_data_6_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_11_write_1__SEL_3:
	v_fb_data_6_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_12
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_6_12_write_1__SEL_2:
	v_fb_data_6_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_12_write_1__SEL_3:
	v_fb_data_6_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_13
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_6_13_write_1__SEL_2:
	v_fb_data_6_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_13_write_1__SEL_3:
	v_fb_data_6_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_14
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_6_14_write_1__SEL_2:
	v_fb_data_6_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_14_write_1__SEL_3:
	v_fb_data_6_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_15
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_6_15_write_1__SEL_2:
	v_fb_data_6_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_15_write_1__SEL_3:
	v_fb_data_6_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_2
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_6_2_write_1__SEL_2:
	v_fb_data_6_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_2_write_1__SEL_3:
	v_fb_data_6_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_3
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_6_3_write_1__SEL_2:
	v_fb_data_6_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_3_write_1__SEL_3:
	v_fb_data_6_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_4
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_6_4_write_1__SEL_2:
	v_fb_data_6_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_4_write_1__SEL_3:
	v_fb_data_6_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_5
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_6_5_write_1__SEL_2:
	v_fb_data_6_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_5_write_1__SEL_3:
	v_fb_data_6_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_6
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_6_6_write_1__SEL_2:
	v_fb_data_6_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_6_write_1__SEL_3:
	v_fb_data_6_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_7
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_6_7_write_1__SEL_2:
	v_fb_data_6_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_7_write_1__SEL_3:
	v_fb_data_6_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_8
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_6_8_write_1__SEL_2:
	v_fb_data_6_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_8_write_1__SEL_3:
	v_fb_data_6_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_6_9
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_6_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_6_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_data_6_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_6_9_write_1__SEL_2:
	v_fb_data_6_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_6_9_write_1__SEL_3:
	v_fb_data_6_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_6_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_6_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd6 ;

  // register v_fb_data_7_0
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_0_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_0_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_0_D_IN = mav_allocate_line_dataline[31:0];
    MUX_v_fb_data_7_0_write_1__SEL_2:
	v_fb_data_7_0_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_0_write_1__SEL_3:
	v_fb_data_7_0_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_0_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd0 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_1
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_1_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_1_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_1_D_IN = mav_allocate_line_dataline[63:32];
    MUX_v_fb_data_7_1_write_1__SEL_2:
	v_fb_data_7_1_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_1_write_1__SEL_3:
	v_fb_data_7_1_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_1_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd1 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_10
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_10_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_10_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_10_D_IN = mav_allocate_line_dataline[351:320];
    MUX_v_fb_data_7_10_write_1__SEL_2:
	v_fb_data_7_10_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_10_write_1__SEL_3:
	v_fb_data_7_10_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_10_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd10 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_11
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_11_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_11_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_11_D_IN = mav_allocate_line_dataline[383:352];
    MUX_v_fb_data_7_11_write_1__SEL_2:
	v_fb_data_7_11_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_11_write_1__SEL_3:
	v_fb_data_7_11_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_11_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd11 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_12
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_12_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_12_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_12_D_IN = mav_allocate_line_dataline[415:384];
    MUX_v_fb_data_7_12_write_1__SEL_2:
	v_fb_data_7_12_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_12_write_1__SEL_3:
	v_fb_data_7_12_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_12_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd12 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_13
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_13_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_13_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_13_D_IN = mav_allocate_line_dataline[447:416];
    MUX_v_fb_data_7_13_write_1__SEL_2:
	v_fb_data_7_13_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_13_write_1__SEL_3:
	v_fb_data_7_13_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_13_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd13 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_14
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_14_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_14_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_14_D_IN = mav_allocate_line_dataline[479:448];
    MUX_v_fb_data_7_14_write_1__SEL_2:
	v_fb_data_7_14_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_14_write_1__SEL_3:
	v_fb_data_7_14_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_14_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd14 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_15
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_15_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_15_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_15_D_IN = mav_allocate_line_dataline[511:480];
    MUX_v_fb_data_7_15_write_1__SEL_2:
	v_fb_data_7_15_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_15_write_1__SEL_3:
	v_fb_data_7_15_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_15_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd15 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_2
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_2_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_2_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_2_D_IN = mav_allocate_line_dataline[95:64];
    MUX_v_fb_data_7_2_write_1__SEL_2:
	v_fb_data_7_2_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_2_write_1__SEL_3:
	v_fb_data_7_2_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_2_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd2 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_3
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_3_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_3_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_3_D_IN = mav_allocate_line_dataline[127:96];
    MUX_v_fb_data_7_3_write_1__SEL_2:
	v_fb_data_7_3_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_3_write_1__SEL_3:
	v_fb_data_7_3_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_3_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd3 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_4
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_4_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_4_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_4_D_IN = mav_allocate_line_dataline[159:128];
    MUX_v_fb_data_7_4_write_1__SEL_2:
	v_fb_data_7_4_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_4_write_1__SEL_3:
	v_fb_data_7_4_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_4_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd4 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_5
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_5_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_5_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_5_D_IN = mav_allocate_line_dataline[191:160];
    MUX_v_fb_data_7_5_write_1__SEL_2:
	v_fb_data_7_5_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_5_write_1__SEL_3:
	v_fb_data_7_5_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_5_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd5 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_6
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_6_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_6_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_6_D_IN = mav_allocate_line_dataline[223:192];
    MUX_v_fb_data_7_6_write_1__SEL_2:
	v_fb_data_7_6_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_6_write_1__SEL_3:
	v_fb_data_7_6_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_6_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd6 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_7
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_7_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_7_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_7_D_IN = mav_allocate_line_dataline[255:224];
    MUX_v_fb_data_7_7_write_1__SEL_2:
	v_fb_data_7_7_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_7_write_1__SEL_3:
	v_fb_data_7_7_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_7_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd7 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_8
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_8_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_8_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_8_D_IN = mav_allocate_line_dataline[287:256];
    MUX_v_fb_data_7_8_write_1__SEL_2:
	v_fb_data_7_8_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_8_write_1__SEL_3:
	v_fb_data_7_8_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_8_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd8 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_data_7_9
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_dataline or
	  MUX_v_fb_data_7_9_write_1__SEL_2 or
	  MUX_v_fb_data_0_0_write_1__VAL_2 or
	  MUX_v_fb_data_7_9_write_1__SEL_3 or ma_fill_from_memory_mem_resp)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_data_7_9_D_IN = mav_allocate_line_dataline[319:288];
    MUX_v_fb_data_7_9_write_1__SEL_2:
	v_fb_data_7_9_D_IN = MUX_v_fb_data_0_0_write_1__VAL_2;
    MUX_v_fb_data_7_9_write_1__SEL_3:
	v_fb_data_7_9_D_IN = ma_fill_from_memory_mem_resp[33:2];
    default: v_fb_data_7_9_D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign v_fb_data_7_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && lv_current_bank__h21268 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_ma_from_storebuffer &&
	     ma_from_storebuffer_address[5:2] == 4'd9 &&
	     ma_from_storebuffer_fbindex == 3'd7 ;

  // register v_fb_dirty_0
  assign v_fb_dirty_0_D_IN =
	     !MUX_v_fb_addr_valid_0_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_0_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd0 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ;

  // register v_fb_dirty_1
  assign v_fb_dirty_1_D_IN =
	     !MUX_v_fb_addr_valid_1_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_1_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd1 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ;

  // register v_fb_dirty_2
  assign v_fb_dirty_2_D_IN =
	     !MUX_v_fb_addr_valid_2_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_2_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd2 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ;

  // register v_fb_dirty_3
  assign v_fb_dirty_3_D_IN =
	     !MUX_v_fb_addr_valid_3_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_3_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd3 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ;

  // register v_fb_dirty_4
  assign v_fb_dirty_4_D_IN =
	     !MUX_v_fb_addr_valid_4_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_4_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd4 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ;

  // register v_fb_dirty_5
  assign v_fb_dirty_5_D_IN =
	     !MUX_v_fb_addr_valid_5_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_5_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd5 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ;

  // register v_fb_dirty_6
  assign v_fb_dirty_6_D_IN =
	     !MUX_v_fb_addr_valid_6_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_6_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd6 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ;

  // register v_fb_dirty_7
  assign v_fb_dirty_7_D_IN =
	     !MUX_v_fb_addr_valid_7_write_1__SEL_2 ||
	     MUX_v_fb_dirty_0_write_1__VAL_1 ;
  assign v_fb_dirty_7_EN =
	     EN_ma_from_storebuffer && ma_from_storebuffer_fbindex == 3'd7 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ;

  // register v_fb_err_0
  assign v_fb_err_0_D_IN =
	     !MUX_v_fb_addr_valid_0_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_0_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd0 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ;

  // register v_fb_err_1
  assign v_fb_err_1_D_IN =
	     !MUX_v_fb_addr_valid_1_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_1_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd1 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ;

  // register v_fb_err_2
  assign v_fb_err_2_D_IN =
	     !MUX_v_fb_addr_valid_2_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_2_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd2 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ;

  // register v_fb_err_3
  assign v_fb_err_3_D_IN =
	     !MUX_v_fb_addr_valid_3_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_3_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd3 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ;

  // register v_fb_err_4
  assign v_fb_err_4_D_IN =
	     !MUX_v_fb_addr_valid_4_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_4_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd4 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ;

  // register v_fb_err_5
  assign v_fb_err_5_D_IN =
	     !MUX_v_fb_addr_valid_5_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_5_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd5 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ;

  // register v_fb_err_6
  assign v_fb_err_6_D_IN =
	     !MUX_v_fb_addr_valid_6_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_6_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd6 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ;

  // register v_fb_err_7
  assign v_fb_err_7_D_IN =
	     !MUX_v_fb_addr_valid_7_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_7_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd7 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ;

  // register v_fb_line_valid_0
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_0_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_1: v_fb_line_valid_0_D_IN = 1'd0;
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_line_valid_0_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_0_write_1__SEL_3: v_fb_line_valid_0_D_IN = 1'd1;
    default: v_fb_line_valid_0_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd0 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd0 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd0 ;

  // register v_fb_line_valid_1
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_1_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_1: v_fb_line_valid_1_D_IN = 1'd0;
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_line_valid_1_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_1_write_1__SEL_3: v_fb_line_valid_1_D_IN = 1'd1;
    default: v_fb_line_valid_1_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd1 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd1 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd1 ;

  // register v_fb_line_valid_2
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_2_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_1: v_fb_line_valid_2_D_IN = 1'd0;
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_line_valid_2_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_2_write_1__SEL_3: v_fb_line_valid_2_D_IN = 1'd1;
    default: v_fb_line_valid_2_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd2 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd2 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd2 ;

  // register v_fb_line_valid_3
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_3_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_1: v_fb_line_valid_3_D_IN = 1'd0;
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_line_valid_3_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_3_write_1__SEL_3: v_fb_line_valid_3_D_IN = 1'd1;
    default: v_fb_line_valid_3_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd3 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd3 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd3 ;

  // register v_fb_line_valid_4
  always@(MUX_v_fb_addr_valid_4_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_4_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_4_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_4_write_1__SEL_1: v_fb_line_valid_4_D_IN = 1'd0;
    MUX_v_fb_addr_valid_4_write_1__SEL_2:
	v_fb_line_valid_4_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_4_write_1__SEL_3: v_fb_line_valid_4_D_IN = 1'd1;
    default: v_fb_line_valid_4_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd4 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd4 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd4 ;

  // register v_fb_line_valid_5
  always@(MUX_v_fb_addr_valid_5_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_5_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_5_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_5_write_1__SEL_1: v_fb_line_valid_5_D_IN = 1'd0;
    MUX_v_fb_addr_valid_5_write_1__SEL_2:
	v_fb_line_valid_5_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_5_write_1__SEL_3: v_fb_line_valid_5_D_IN = 1'd1;
    default: v_fb_line_valid_5_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd5 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd5 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd5 ;

  // register v_fb_line_valid_6
  always@(MUX_v_fb_addr_valid_6_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_6_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_6_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_6_write_1__SEL_1: v_fb_line_valid_6_D_IN = 1'd0;
    MUX_v_fb_addr_valid_6_write_1__SEL_2:
	v_fb_line_valid_6_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_6_write_1__SEL_3: v_fb_line_valid_6_D_IN = 1'd1;
    default: v_fb_line_valid_6_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 3'd6 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd6 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 3'd6 ;

  // register v_fb_line_valid_7
  always@(MUX_v_fb_addr_valid_7_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_7_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_7_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_7_write_1__SEL_1: v_fb_line_valid_7_D_IN = 1'd0;
    MUX_v_fb_addr_valid_7_write_1__SEL_2:
	v_fb_line_valid_7_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_7_write_1__SEL_3: v_fb_line_valid_7_D_IN = 1'd1;
    default: v_fb_line_valid_7_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_7_EN =
	     EN_ma_perform_release && rg_fbhead == 3'd7 ||
	     EN_mav_allocate_line && rg_fbtail == 3'd7 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 3'd7 &&
	     ma_fill_from_memory_mem_resp[1] ;

  // remaining internal signals
  assign IF_v_fb_addr_0_read__08_BITS_31_TO_6_77_EQ_mav_ETC___d680 =
	     (v_fb_addr_0[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_0) ?
	       8'd1 :
	       8'd0 ;
  assign IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d683 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       v_fb_line_valid_1 :
	       IF_v_fb_addr_0_read__08_BITS_31_TO_6_77_EQ_mav_ETC___d680[0] &&
	       v_fb_line_valid_0 ;
  assign IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d692 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       v_fb_err_1 :
	       v_fb_err_0 ;
  assign IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d708 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       lv_selected_word__h52283 :
	       lv_selected_word__h52336 ;
  assign IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d684 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       v_fb_line_valid_2 :
	       IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d683 ;
  assign IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d693 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       v_fb_err_2 :
	       IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d692 ;
  assign IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d709 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       lv_selected_word__h52230 :
	       IF_v_fb_addr_1_read__09_BITS_31_TO_6_74_EQ_mav_ETC___d708 ;
  assign IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d685 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       v_fb_line_valid_3 :
	       IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d684 ;
  assign IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d694 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       v_fb_err_3 :
	       IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d693 ;
  assign IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d710 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       lv_selected_word__h52177 :
	       IF_v_fb_addr_2_read__10_BITS_31_TO_6_71_EQ_mav_ETC___d709 ;
  assign IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d686 =
	     (v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_4) ?
	       v_fb_line_valid_4 :
	       IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d685 ;
  assign IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d695 =
	     (v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_4) ?
	       v_fb_err_4 :
	       IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d694 ;
  assign IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d711 =
	     (v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_4) ?
	       lv_selected_word__h52124 :
	       IF_v_fb_addr_3_read__11_BITS_31_TO_6_68_EQ_mav_ETC___d710 ;
  assign IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d687 =
	     (v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_5) ?
	       v_fb_line_valid_5 :
	       IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d686 ;
  assign IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d696 =
	     (v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_5) ?
	       v_fb_err_5 :
	       IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d695 ;
  assign IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d712 =
	     (v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_5) ?
	       lv_selected_word__h52071 :
	       IF_v_fb_addr_4_read__12_BITS_31_TO_6_65_EQ_mav_ETC___d711 ;
  assign IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d688 =
	     (v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_6) ?
	       v_fb_line_valid_6 :
	       IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d687 ;
  assign IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d697 =
	     (v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_6) ?
	       v_fb_err_6 :
	       IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d696 ;
  assign IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d713 =
	     (v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_6) ?
	       lv_selected_word__h52018 :
	       IF_v_fb_addr_5_read__13_BITS_31_TO_6_62_EQ_mav_ETC___d712 ;
  assign IF_v_fb_addr_7_read__15_BITS_31_TO_6_55_EQ_mav_ETC___d689 =
	     (v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_7) ?
	       v_fb_line_valid_7 :
	       IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d688 ;
  assign NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35 =
	     !v_fb_addr_valid_1 && !v_fb_addr_valid_2 && !v_fb_addr_valid_3 &&
	     !v_fb_addr_valid_4 &&
	     !v_fb_addr_valid_5 &&
	     !v_fb_addr_valid_6 &&
	     !v_fb_addr_valid_7 ;
  assign _theResult____h51144 =
	     { v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_7,
	       v_fb_addr_6[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_6,
	       v_fb_addr_5[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_5,
	       v_fb_addr_4[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_4,
	       v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_3,
	       v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_2,
	       v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_1,
	       IF_v_fb_addr_0_read__08_BITS_31_TO_6_77_EQ_mav_ETC___d680[0] } ;
  assign lv_current_bank__h21268 =
	     (rg_fb_enables == 16'd0) ?
	       ma_fill_from_memory_init_bank :
	       rg_next_bank ;
  assign mav_polling_response_fill_AND_v_fb_addr_7_read_ETC___d724 =
	     mav_polling_response_fill &&
	     _theResult____h51144[mav_polling_response_fbindex] &&
	     rg_fb_enables[mav_polling_response_address[5:2]] ;
  assign v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20 =
	     v_fb_addr_valid_1 && v_fb_addr_valid_2 && v_fb_addr_valid_3 &&
	     v_fb_addr_valid_4 &&
	     v_fb_addr_valid_5 &&
	     v_fb_addr_valid_6 &&
	     v_fb_addr_valid_7 ;
  assign x__h20940 = rg_fbtail + 3'd1 ;
  assign x__h24197 = rg_fb_enables | x__h24220 ;
  assign x__h24220 = 16'd1 << lv_current_bank__h21268 ;
  assign x__h48935 = x__h48937 & y__h48938 ;
  assign x__h50864 = rg_fbhead + 3'd1 ;
  assign x_mv_release_info_dataline__h49167 =
	     { spliced_bits__h49276,
	       spliced_bits__h49305,
	       spliced_bits__h49334,
	       spliced_bits__h49363,
	       spliced_bits__h49392,
	       spliced_bits__h49421,
	       spliced_bits__h49450,
	       spliced_bits__h49479,
	       spliced_bits__h49508,
	       spliced_bits__h49537,
	       spliced_bits__h49566,
	       spliced_bits__h49595,
	       spliced_bits__h49624,
	       spliced_bits__h49653,
	       spliced_bits__h49682,
	       spliced_bits__h49711 } ;
  assign y__h48936 = ma_from_storebuffer_mask & ma_from_storebuffer_dataword ;
  assign y__h48938 = ~ma_from_storebuffer_mask ;
  assign y_avValue_err__h52399 =
	     (v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_7) ?
	       v_fb_err_7 :
	       IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d697 ;
  assign y_avValue_word__h52400 =
	     (v_fb_addr_7[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_7) ?
	       lv_selected_word__h51965 :
	       IF_v_fb_addr_6_read__14_BITS_31_TO_6_59_EQ_mav_ETC___d713 ;
  always@(rg_fbhead or
	  v_fb_data_0_0 or
	  v_fb_data_1_0 or
	  v_fb_data_2_0 or
	  v_fb_data_3_0 or
	  v_fb_data_4_0 or v_fb_data_5_0 or v_fb_data_6_0 or v_fb_data_7_0)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49711 = v_fb_data_0_0;
      3'd1: spliced_bits__h49711 = v_fb_data_1_0;
      3'd2: spliced_bits__h49711 = v_fb_data_2_0;
      3'd3: spliced_bits__h49711 = v_fb_data_3_0;
      3'd4: spliced_bits__h49711 = v_fb_data_4_0;
      3'd5: spliced_bits__h49711 = v_fb_data_5_0;
      3'd6: spliced_bits__h49711 = v_fb_data_6_0;
      3'd7: spliced_bits__h49711 = v_fb_data_7_0;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_14 or
	  v_fb_data_1_14 or
	  v_fb_data_2_14 or
	  v_fb_data_3_14 or
	  v_fb_data_4_14 or
	  v_fb_data_5_14 or v_fb_data_6_14 or v_fb_data_7_14)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49305 = v_fb_data_0_14;
      3'd1: spliced_bits__h49305 = v_fb_data_1_14;
      3'd2: spliced_bits__h49305 = v_fb_data_2_14;
      3'd3: spliced_bits__h49305 = v_fb_data_3_14;
      3'd4: spliced_bits__h49305 = v_fb_data_4_14;
      3'd5: spliced_bits__h49305 = v_fb_data_5_14;
      3'd6: spliced_bits__h49305 = v_fb_data_6_14;
      3'd7: spliced_bits__h49305 = v_fb_data_7_14;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_13 or
	  v_fb_data_1_13 or
	  v_fb_data_2_13 or
	  v_fb_data_3_13 or
	  v_fb_data_4_13 or
	  v_fb_data_5_13 or v_fb_data_6_13 or v_fb_data_7_13)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49334 = v_fb_data_0_13;
      3'd1: spliced_bits__h49334 = v_fb_data_1_13;
      3'd2: spliced_bits__h49334 = v_fb_data_2_13;
      3'd3: spliced_bits__h49334 = v_fb_data_3_13;
      3'd4: spliced_bits__h49334 = v_fb_data_4_13;
      3'd5: spliced_bits__h49334 = v_fb_data_5_13;
      3'd6: spliced_bits__h49334 = v_fb_data_6_13;
      3'd7: spliced_bits__h49334 = v_fb_data_7_13;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_12 or
	  v_fb_data_1_12 or
	  v_fb_data_2_12 or
	  v_fb_data_3_12 or
	  v_fb_data_4_12 or
	  v_fb_data_5_12 or v_fb_data_6_12 or v_fb_data_7_12)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49363 = v_fb_data_0_12;
      3'd1: spliced_bits__h49363 = v_fb_data_1_12;
      3'd2: spliced_bits__h49363 = v_fb_data_2_12;
      3'd3: spliced_bits__h49363 = v_fb_data_3_12;
      3'd4: spliced_bits__h49363 = v_fb_data_4_12;
      3'd5: spliced_bits__h49363 = v_fb_data_5_12;
      3'd6: spliced_bits__h49363 = v_fb_data_6_12;
      3'd7: spliced_bits__h49363 = v_fb_data_7_12;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_11 or
	  v_fb_data_1_11 or
	  v_fb_data_2_11 or
	  v_fb_data_3_11 or
	  v_fb_data_4_11 or
	  v_fb_data_5_11 or v_fb_data_6_11 or v_fb_data_7_11)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49392 = v_fb_data_0_11;
      3'd1: spliced_bits__h49392 = v_fb_data_1_11;
      3'd2: spliced_bits__h49392 = v_fb_data_2_11;
      3'd3: spliced_bits__h49392 = v_fb_data_3_11;
      3'd4: spliced_bits__h49392 = v_fb_data_4_11;
      3'd5: spliced_bits__h49392 = v_fb_data_5_11;
      3'd6: spliced_bits__h49392 = v_fb_data_6_11;
      3'd7: spliced_bits__h49392 = v_fb_data_7_11;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_10 or
	  v_fb_data_1_10 or
	  v_fb_data_2_10 or
	  v_fb_data_3_10 or
	  v_fb_data_4_10 or
	  v_fb_data_5_10 or v_fb_data_6_10 or v_fb_data_7_10)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49421 = v_fb_data_0_10;
      3'd1: spliced_bits__h49421 = v_fb_data_1_10;
      3'd2: spliced_bits__h49421 = v_fb_data_2_10;
      3'd3: spliced_bits__h49421 = v_fb_data_3_10;
      3'd4: spliced_bits__h49421 = v_fb_data_4_10;
      3'd5: spliced_bits__h49421 = v_fb_data_5_10;
      3'd6: spliced_bits__h49421 = v_fb_data_6_10;
      3'd7: spliced_bits__h49421 = v_fb_data_7_10;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_9 or
	  v_fb_data_1_9 or
	  v_fb_data_2_9 or
	  v_fb_data_3_9 or
	  v_fb_data_4_9 or v_fb_data_5_9 or v_fb_data_6_9 or v_fb_data_7_9)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49450 = v_fb_data_0_9;
      3'd1: spliced_bits__h49450 = v_fb_data_1_9;
      3'd2: spliced_bits__h49450 = v_fb_data_2_9;
      3'd3: spliced_bits__h49450 = v_fb_data_3_9;
      3'd4: spliced_bits__h49450 = v_fb_data_4_9;
      3'd5: spliced_bits__h49450 = v_fb_data_5_9;
      3'd6: spliced_bits__h49450 = v_fb_data_6_9;
      3'd7: spliced_bits__h49450 = v_fb_data_7_9;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_8 or
	  v_fb_data_1_8 or
	  v_fb_data_2_8 or
	  v_fb_data_3_8 or
	  v_fb_data_4_8 or v_fb_data_5_8 or v_fb_data_6_8 or v_fb_data_7_8)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49479 = v_fb_data_0_8;
      3'd1: spliced_bits__h49479 = v_fb_data_1_8;
      3'd2: spliced_bits__h49479 = v_fb_data_2_8;
      3'd3: spliced_bits__h49479 = v_fb_data_3_8;
      3'd4: spliced_bits__h49479 = v_fb_data_4_8;
      3'd5: spliced_bits__h49479 = v_fb_data_5_8;
      3'd6: spliced_bits__h49479 = v_fb_data_6_8;
      3'd7: spliced_bits__h49479 = v_fb_data_7_8;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_7 or
	  v_fb_data_1_7 or
	  v_fb_data_2_7 or
	  v_fb_data_3_7 or
	  v_fb_data_4_7 or v_fb_data_5_7 or v_fb_data_6_7 or v_fb_data_7_7)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49508 = v_fb_data_0_7;
      3'd1: spliced_bits__h49508 = v_fb_data_1_7;
      3'd2: spliced_bits__h49508 = v_fb_data_2_7;
      3'd3: spliced_bits__h49508 = v_fb_data_3_7;
      3'd4: spliced_bits__h49508 = v_fb_data_4_7;
      3'd5: spliced_bits__h49508 = v_fb_data_5_7;
      3'd6: spliced_bits__h49508 = v_fb_data_6_7;
      3'd7: spliced_bits__h49508 = v_fb_data_7_7;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_6 or
	  v_fb_data_1_6 or
	  v_fb_data_2_6 or
	  v_fb_data_3_6 or
	  v_fb_data_4_6 or v_fb_data_5_6 or v_fb_data_6_6 or v_fb_data_7_6)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49537 = v_fb_data_0_6;
      3'd1: spliced_bits__h49537 = v_fb_data_1_6;
      3'd2: spliced_bits__h49537 = v_fb_data_2_6;
      3'd3: spliced_bits__h49537 = v_fb_data_3_6;
      3'd4: spliced_bits__h49537 = v_fb_data_4_6;
      3'd5: spliced_bits__h49537 = v_fb_data_5_6;
      3'd6: spliced_bits__h49537 = v_fb_data_6_6;
      3'd7: spliced_bits__h49537 = v_fb_data_7_6;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_5 or
	  v_fb_data_1_5 or
	  v_fb_data_2_5 or
	  v_fb_data_3_5 or
	  v_fb_data_4_5 or v_fb_data_5_5 or v_fb_data_6_5 or v_fb_data_7_5)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49566 = v_fb_data_0_5;
      3'd1: spliced_bits__h49566 = v_fb_data_1_5;
      3'd2: spliced_bits__h49566 = v_fb_data_2_5;
      3'd3: spliced_bits__h49566 = v_fb_data_3_5;
      3'd4: spliced_bits__h49566 = v_fb_data_4_5;
      3'd5: spliced_bits__h49566 = v_fb_data_5_5;
      3'd6: spliced_bits__h49566 = v_fb_data_6_5;
      3'd7: spliced_bits__h49566 = v_fb_data_7_5;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_4 or
	  v_fb_data_1_4 or
	  v_fb_data_2_4 or
	  v_fb_data_3_4 or
	  v_fb_data_4_4 or v_fb_data_5_4 or v_fb_data_6_4 or v_fb_data_7_4)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49595 = v_fb_data_0_4;
      3'd1: spliced_bits__h49595 = v_fb_data_1_4;
      3'd2: spliced_bits__h49595 = v_fb_data_2_4;
      3'd3: spliced_bits__h49595 = v_fb_data_3_4;
      3'd4: spliced_bits__h49595 = v_fb_data_4_4;
      3'd5: spliced_bits__h49595 = v_fb_data_5_4;
      3'd6: spliced_bits__h49595 = v_fb_data_6_4;
      3'd7: spliced_bits__h49595 = v_fb_data_7_4;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_3 or
	  v_fb_data_1_3 or
	  v_fb_data_2_3 or
	  v_fb_data_3_3 or
	  v_fb_data_4_3 or v_fb_data_5_3 or v_fb_data_6_3 or v_fb_data_7_3)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49624 = v_fb_data_0_3;
      3'd1: spliced_bits__h49624 = v_fb_data_1_3;
      3'd2: spliced_bits__h49624 = v_fb_data_2_3;
      3'd3: spliced_bits__h49624 = v_fb_data_3_3;
      3'd4: spliced_bits__h49624 = v_fb_data_4_3;
      3'd5: spliced_bits__h49624 = v_fb_data_5_3;
      3'd6: spliced_bits__h49624 = v_fb_data_6_3;
      3'd7: spliced_bits__h49624 = v_fb_data_7_3;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_1 or
	  v_fb_data_1_1 or
	  v_fb_data_2_1 or
	  v_fb_data_3_1 or
	  v_fb_data_4_1 or v_fb_data_5_1 or v_fb_data_6_1 or v_fb_data_7_1)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49682 = v_fb_data_0_1;
      3'd1: spliced_bits__h49682 = v_fb_data_1_1;
      3'd2: spliced_bits__h49682 = v_fb_data_2_1;
      3'd3: spliced_bits__h49682 = v_fb_data_3_1;
      3'd4: spliced_bits__h49682 = v_fb_data_4_1;
      3'd5: spliced_bits__h49682 = v_fb_data_5_1;
      3'd6: spliced_bits__h49682 = v_fb_data_6_1;
      3'd7: spliced_bits__h49682 = v_fb_data_7_1;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_2 or
	  v_fb_data_1_2 or
	  v_fb_data_2_2 or
	  v_fb_data_3_2 or
	  v_fb_data_4_2 or v_fb_data_5_2 or v_fb_data_6_2 or v_fb_data_7_2)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49653 = v_fb_data_0_2;
      3'd1: spliced_bits__h49653 = v_fb_data_1_2;
      3'd2: spliced_bits__h49653 = v_fb_data_2_2;
      3'd3: spliced_bits__h49653 = v_fb_data_3_2;
      3'd4: spliced_bits__h49653 = v_fb_data_4_2;
      3'd5: spliced_bits__h49653 = v_fb_data_5_2;
      3'd6: spliced_bits__h49653 = v_fb_data_6_2;
      3'd7: spliced_bits__h49653 = v_fb_data_7_2;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_addr_0 or
	  v_fb_addr_1 or
	  v_fb_addr_2 or
	  v_fb_addr_3 or
	  v_fb_addr_4 or v_fb_addr_5 or v_fb_addr_6 or v_fb_addr_7)
  begin
    case (rg_fbhead)
      3'd0: x_mv_release_info_address__h49168 = v_fb_addr_0;
      3'd1: x_mv_release_info_address__h49168 = v_fb_addr_1;
      3'd2: x_mv_release_info_address__h49168 = v_fb_addr_2;
      3'd3: x_mv_release_info_address__h49168 = v_fb_addr_3;
      3'd4: x_mv_release_info_address__h49168 = v_fb_addr_4;
      3'd5: x_mv_release_info_address__h49168 = v_fb_addr_5;
      3'd6: x_mv_release_info_address__h49168 = v_fb_addr_6;
      3'd7: x_mv_release_info_address__h49168 = v_fb_addr_7;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_15 or
	  v_fb_data_1_15 or
	  v_fb_data_2_15 or
	  v_fb_data_3_15 or
	  v_fb_data_4_15 or
	  v_fb_data_5_15 or v_fb_data_6_15 or v_fb_data_7_15)
  begin
    case (rg_fbhead)
      3'd0: spliced_bits__h49276 = v_fb_data_0_15;
      3'd1: spliced_bits__h49276 = v_fb_data_1_15;
      3'd2: spliced_bits__h49276 = v_fb_data_2_15;
      3'd3: spliced_bits__h49276 = v_fb_data_3_15;
      3'd4: spliced_bits__h49276 = v_fb_data_4_15;
      3'd5: spliced_bits__h49276 = v_fb_data_5_15;
      3'd6: spliced_bits__h49276 = v_fb_data_6_15;
      3'd7: spliced_bits__h49276 = v_fb_data_7_15;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_err_0 or
	  v_fb_err_1 or
	  v_fb_err_2 or
	  v_fb_err_3 or v_fb_err_4 or v_fb_err_5 or v_fb_err_6 or v_fb_err_7)
  begin
    case (rg_fbhead)
      3'd0: x__h50740 = v_fb_err_0;
      3'd1: x__h50740 = v_fb_err_1;
      3'd2: x__h50740 = v_fb_err_2;
      3'd3: x__h50740 = v_fb_err_3;
      3'd4: x__h50740 = v_fb_err_4;
      3'd5: x__h50740 = v_fb_err_5;
      3'd6: x__h50740 = v_fb_err_6;
      3'd7: x__h50740 = v_fb_err_7;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_dirty_0 or
	  v_fb_dirty_1 or
	  v_fb_dirty_2 or
	  v_fb_dirty_3 or
	  v_fb_dirty_4 or v_fb_dirty_5 or v_fb_dirty_6 or v_fb_dirty_7)
  begin
    case (rg_fbhead)
      3'd0: x__h50767 = v_fb_dirty_0;
      3'd1: x__h50767 = v_fb_dirty_1;
      3'd2: x__h50767 = v_fb_dirty_2;
      3'd3: x__h50767 = v_fb_dirty_3;
      3'd4: x__h50767 = v_fb_dirty_4;
      3'd5: x__h50767 = v_fb_dirty_5;
      3'd6: x__h50767 = v_fb_dirty_6;
      3'd7: x__h50767 = v_fb_dirty_7;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_7_0 or
	  v_fb_data_7_1 or
	  v_fb_data_7_2 or
	  v_fb_data_7_3 or
	  v_fb_data_7_4 or
	  v_fb_data_7_5 or
	  v_fb_data_7_6 or
	  v_fb_data_7_7 or
	  v_fb_data_7_8 or
	  v_fb_data_7_9 or
	  v_fb_data_7_10 or
	  v_fb_data_7_11 or
	  v_fb_data_7_12 or
	  v_fb_data_7_13 or v_fb_data_7_14 or v_fb_data_7_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h51965 = v_fb_data_7_0;
      4'd1: lv_selected_word__h51965 = v_fb_data_7_1;
      4'd2: lv_selected_word__h51965 = v_fb_data_7_2;
      4'd3: lv_selected_word__h51965 = v_fb_data_7_3;
      4'd4: lv_selected_word__h51965 = v_fb_data_7_4;
      4'd5: lv_selected_word__h51965 = v_fb_data_7_5;
      4'd6: lv_selected_word__h51965 = v_fb_data_7_6;
      4'd7: lv_selected_word__h51965 = v_fb_data_7_7;
      4'd8: lv_selected_word__h51965 = v_fb_data_7_8;
      4'd9: lv_selected_word__h51965 = v_fb_data_7_9;
      4'd10: lv_selected_word__h51965 = v_fb_data_7_10;
      4'd11: lv_selected_word__h51965 = v_fb_data_7_11;
      4'd12: lv_selected_word__h51965 = v_fb_data_7_12;
      4'd13: lv_selected_word__h51965 = v_fb_data_7_13;
      4'd14: lv_selected_word__h51965 = v_fb_data_7_14;
      4'd15: lv_selected_word__h51965 = v_fb_data_7_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_6_0 or
	  v_fb_data_6_1 or
	  v_fb_data_6_2 or
	  v_fb_data_6_3 or
	  v_fb_data_6_4 or
	  v_fb_data_6_5 or
	  v_fb_data_6_6 or
	  v_fb_data_6_7 or
	  v_fb_data_6_8 or
	  v_fb_data_6_9 or
	  v_fb_data_6_10 or
	  v_fb_data_6_11 or
	  v_fb_data_6_12 or
	  v_fb_data_6_13 or v_fb_data_6_14 or v_fb_data_6_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h52018 = v_fb_data_6_0;
      4'd1: lv_selected_word__h52018 = v_fb_data_6_1;
      4'd2: lv_selected_word__h52018 = v_fb_data_6_2;
      4'd3: lv_selected_word__h52018 = v_fb_data_6_3;
      4'd4: lv_selected_word__h52018 = v_fb_data_6_4;
      4'd5: lv_selected_word__h52018 = v_fb_data_6_5;
      4'd6: lv_selected_word__h52018 = v_fb_data_6_6;
      4'd7: lv_selected_word__h52018 = v_fb_data_6_7;
      4'd8: lv_selected_word__h52018 = v_fb_data_6_8;
      4'd9: lv_selected_word__h52018 = v_fb_data_6_9;
      4'd10: lv_selected_word__h52018 = v_fb_data_6_10;
      4'd11: lv_selected_word__h52018 = v_fb_data_6_11;
      4'd12: lv_selected_word__h52018 = v_fb_data_6_12;
      4'd13: lv_selected_word__h52018 = v_fb_data_6_13;
      4'd14: lv_selected_word__h52018 = v_fb_data_6_14;
      4'd15: lv_selected_word__h52018 = v_fb_data_6_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_5_0 or
	  v_fb_data_5_1 or
	  v_fb_data_5_2 or
	  v_fb_data_5_3 or
	  v_fb_data_5_4 or
	  v_fb_data_5_5 or
	  v_fb_data_5_6 or
	  v_fb_data_5_7 or
	  v_fb_data_5_8 or
	  v_fb_data_5_9 or
	  v_fb_data_5_10 or
	  v_fb_data_5_11 or
	  v_fb_data_5_12 or
	  v_fb_data_5_13 or v_fb_data_5_14 or v_fb_data_5_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h52071 = v_fb_data_5_0;
      4'd1: lv_selected_word__h52071 = v_fb_data_5_1;
      4'd2: lv_selected_word__h52071 = v_fb_data_5_2;
      4'd3: lv_selected_word__h52071 = v_fb_data_5_3;
      4'd4: lv_selected_word__h52071 = v_fb_data_5_4;
      4'd5: lv_selected_word__h52071 = v_fb_data_5_5;
      4'd6: lv_selected_word__h52071 = v_fb_data_5_6;
      4'd7: lv_selected_word__h52071 = v_fb_data_5_7;
      4'd8: lv_selected_word__h52071 = v_fb_data_5_8;
      4'd9: lv_selected_word__h52071 = v_fb_data_5_9;
      4'd10: lv_selected_word__h52071 = v_fb_data_5_10;
      4'd11: lv_selected_word__h52071 = v_fb_data_5_11;
      4'd12: lv_selected_word__h52071 = v_fb_data_5_12;
      4'd13: lv_selected_word__h52071 = v_fb_data_5_13;
      4'd14: lv_selected_word__h52071 = v_fb_data_5_14;
      4'd15: lv_selected_word__h52071 = v_fb_data_5_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_4_0 or
	  v_fb_data_4_1 or
	  v_fb_data_4_2 or
	  v_fb_data_4_3 or
	  v_fb_data_4_4 or
	  v_fb_data_4_5 or
	  v_fb_data_4_6 or
	  v_fb_data_4_7 or
	  v_fb_data_4_8 or
	  v_fb_data_4_9 or
	  v_fb_data_4_10 or
	  v_fb_data_4_11 or
	  v_fb_data_4_12 or
	  v_fb_data_4_13 or v_fb_data_4_14 or v_fb_data_4_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h52124 = v_fb_data_4_0;
      4'd1: lv_selected_word__h52124 = v_fb_data_4_1;
      4'd2: lv_selected_word__h52124 = v_fb_data_4_2;
      4'd3: lv_selected_word__h52124 = v_fb_data_4_3;
      4'd4: lv_selected_word__h52124 = v_fb_data_4_4;
      4'd5: lv_selected_word__h52124 = v_fb_data_4_5;
      4'd6: lv_selected_word__h52124 = v_fb_data_4_6;
      4'd7: lv_selected_word__h52124 = v_fb_data_4_7;
      4'd8: lv_selected_word__h52124 = v_fb_data_4_8;
      4'd9: lv_selected_word__h52124 = v_fb_data_4_9;
      4'd10: lv_selected_word__h52124 = v_fb_data_4_10;
      4'd11: lv_selected_word__h52124 = v_fb_data_4_11;
      4'd12: lv_selected_word__h52124 = v_fb_data_4_12;
      4'd13: lv_selected_word__h52124 = v_fb_data_4_13;
      4'd14: lv_selected_word__h52124 = v_fb_data_4_14;
      4'd15: lv_selected_word__h52124 = v_fb_data_4_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_3_0 or
	  v_fb_data_3_1 or
	  v_fb_data_3_2 or
	  v_fb_data_3_3 or
	  v_fb_data_3_4 or
	  v_fb_data_3_5 or
	  v_fb_data_3_6 or
	  v_fb_data_3_7 or
	  v_fb_data_3_8 or
	  v_fb_data_3_9 or
	  v_fb_data_3_10 or
	  v_fb_data_3_11 or
	  v_fb_data_3_12 or
	  v_fb_data_3_13 or v_fb_data_3_14 or v_fb_data_3_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h52177 = v_fb_data_3_0;
      4'd1: lv_selected_word__h52177 = v_fb_data_3_1;
      4'd2: lv_selected_word__h52177 = v_fb_data_3_2;
      4'd3: lv_selected_word__h52177 = v_fb_data_3_3;
      4'd4: lv_selected_word__h52177 = v_fb_data_3_4;
      4'd5: lv_selected_word__h52177 = v_fb_data_3_5;
      4'd6: lv_selected_word__h52177 = v_fb_data_3_6;
      4'd7: lv_selected_word__h52177 = v_fb_data_3_7;
      4'd8: lv_selected_word__h52177 = v_fb_data_3_8;
      4'd9: lv_selected_word__h52177 = v_fb_data_3_9;
      4'd10: lv_selected_word__h52177 = v_fb_data_3_10;
      4'd11: lv_selected_word__h52177 = v_fb_data_3_11;
      4'd12: lv_selected_word__h52177 = v_fb_data_3_12;
      4'd13: lv_selected_word__h52177 = v_fb_data_3_13;
      4'd14: lv_selected_word__h52177 = v_fb_data_3_14;
      4'd15: lv_selected_word__h52177 = v_fb_data_3_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_2_0 or
	  v_fb_data_2_1 or
	  v_fb_data_2_2 or
	  v_fb_data_2_3 or
	  v_fb_data_2_4 or
	  v_fb_data_2_5 or
	  v_fb_data_2_6 or
	  v_fb_data_2_7 or
	  v_fb_data_2_8 or
	  v_fb_data_2_9 or
	  v_fb_data_2_10 or
	  v_fb_data_2_11 or
	  v_fb_data_2_12 or
	  v_fb_data_2_13 or v_fb_data_2_14 or v_fb_data_2_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h52230 = v_fb_data_2_0;
      4'd1: lv_selected_word__h52230 = v_fb_data_2_1;
      4'd2: lv_selected_word__h52230 = v_fb_data_2_2;
      4'd3: lv_selected_word__h52230 = v_fb_data_2_3;
      4'd4: lv_selected_word__h52230 = v_fb_data_2_4;
      4'd5: lv_selected_word__h52230 = v_fb_data_2_5;
      4'd6: lv_selected_word__h52230 = v_fb_data_2_6;
      4'd7: lv_selected_word__h52230 = v_fb_data_2_7;
      4'd8: lv_selected_word__h52230 = v_fb_data_2_8;
      4'd9: lv_selected_word__h52230 = v_fb_data_2_9;
      4'd10: lv_selected_word__h52230 = v_fb_data_2_10;
      4'd11: lv_selected_word__h52230 = v_fb_data_2_11;
      4'd12: lv_selected_word__h52230 = v_fb_data_2_12;
      4'd13: lv_selected_word__h52230 = v_fb_data_2_13;
      4'd14: lv_selected_word__h52230 = v_fb_data_2_14;
      4'd15: lv_selected_word__h52230 = v_fb_data_2_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_1_0 or
	  v_fb_data_1_1 or
	  v_fb_data_1_2 or
	  v_fb_data_1_3 or
	  v_fb_data_1_4 or
	  v_fb_data_1_5 or
	  v_fb_data_1_6 or
	  v_fb_data_1_7 or
	  v_fb_data_1_8 or
	  v_fb_data_1_9 or
	  v_fb_data_1_10 or
	  v_fb_data_1_11 or
	  v_fb_data_1_12 or
	  v_fb_data_1_13 or v_fb_data_1_14 or v_fb_data_1_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h52283 = v_fb_data_1_0;
      4'd1: lv_selected_word__h52283 = v_fb_data_1_1;
      4'd2: lv_selected_word__h52283 = v_fb_data_1_2;
      4'd3: lv_selected_word__h52283 = v_fb_data_1_3;
      4'd4: lv_selected_word__h52283 = v_fb_data_1_4;
      4'd5: lv_selected_word__h52283 = v_fb_data_1_5;
      4'd6: lv_selected_word__h52283 = v_fb_data_1_6;
      4'd7: lv_selected_word__h52283 = v_fb_data_1_7;
      4'd8: lv_selected_word__h52283 = v_fb_data_1_8;
      4'd9: lv_selected_word__h52283 = v_fb_data_1_9;
      4'd10: lv_selected_word__h52283 = v_fb_data_1_10;
      4'd11: lv_selected_word__h52283 = v_fb_data_1_11;
      4'd12: lv_selected_word__h52283 = v_fb_data_1_12;
      4'd13: lv_selected_word__h52283 = v_fb_data_1_13;
      4'd14: lv_selected_word__h52283 = v_fb_data_1_14;
      4'd15: lv_selected_word__h52283 = v_fb_data_1_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_0_0 or
	  v_fb_data_0_1 or
	  v_fb_data_0_2 or
	  v_fb_data_0_3 or
	  v_fb_data_0_4 or
	  v_fb_data_0_5 or
	  v_fb_data_0_6 or
	  v_fb_data_0_7 or
	  v_fb_data_0_8 or
	  v_fb_data_0_9 or
	  v_fb_data_0_10 or
	  v_fb_data_0_11 or
	  v_fb_data_0_12 or
	  v_fb_data_0_13 or v_fb_data_0_14 or v_fb_data_0_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h52336 = v_fb_data_0_0;
      4'd1: lv_selected_word__h52336 = v_fb_data_0_1;
      4'd2: lv_selected_word__h52336 = v_fb_data_0_2;
      4'd3: lv_selected_word__h52336 = v_fb_data_0_3;
      4'd4: lv_selected_word__h52336 = v_fb_data_0_4;
      4'd5: lv_selected_word__h52336 = v_fb_data_0_5;
      4'd6: lv_selected_word__h52336 = v_fb_data_0_6;
      4'd7: lv_selected_word__h52336 = v_fb_data_0_7;
      4'd8: lv_selected_word__h52336 = v_fb_data_0_8;
      4'd9: lv_selected_word__h52336 = v_fb_data_0_9;
      4'd10: lv_selected_word__h52336 = v_fb_data_0_10;
      4'd11: lv_selected_word__h52336 = v_fb_data_0_11;
      4'd12: lv_selected_word__h52336 = v_fb_data_0_12;
      4'd13: lv_selected_word__h52336 = v_fb_data_0_13;
      4'd14: lv_selected_word__h52336 = v_fb_data_0_14;
      4'd15: lv_selected_word__h52336 = v_fb_data_0_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_0_0 or
	  v_fb_data_0_1 or
	  v_fb_data_0_2 or
	  v_fb_data_0_3 or
	  v_fb_data_0_4 or
	  v_fb_data_0_5 or
	  v_fb_data_0_6 or
	  v_fb_data_0_7 or
	  v_fb_data_0_8 or
	  v_fb_data_0_9 or
	  v_fb_data_0_10 or
	  v_fb_data_0_11 or
	  v_fb_data_0_12 or
	  v_fb_data_0_13 or v_fb_data_0_14 or v_fb_data_0_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_0;
      4'd1:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_1;
      4'd2:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_2;
      4'd3:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_3;
      4'd4:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_4;
      4'd5:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_5;
      4'd6:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_6;
      4'd7:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_7;
      4'd8:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_8;
      4'd9:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_9;
      4'd10:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_10;
      4'd11:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_11;
      4'd12:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_12;
      4'd13:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_13;
      4'd14:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_14;
      4'd15:
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 =
	      v_fb_data_0_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_1_0 or
	  v_fb_data_1_1 or
	  v_fb_data_1_2 or
	  v_fb_data_1_3 or
	  v_fb_data_1_4 or
	  v_fb_data_1_5 or
	  v_fb_data_1_6 or
	  v_fb_data_1_7 or
	  v_fb_data_1_8 or
	  v_fb_data_1_9 or
	  v_fb_data_1_10 or
	  v_fb_data_1_11 or
	  v_fb_data_1_12 or
	  v_fb_data_1_13 or v_fb_data_1_14 or v_fb_data_1_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_0;
      4'd1:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_1;
      4'd2:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_2;
      4'd3:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_3;
      4'd4:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_4;
      4'd5:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_5;
      4'd6:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_6;
      4'd7:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_7;
      4'd8:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_8;
      4'd9:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_9;
      4'd10:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_10;
      4'd11:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_11;
      4'd12:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_12;
      4'd13:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_13;
      4'd14:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_14;
      4'd15:
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 =
	      v_fb_data_1_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_2_0 or
	  v_fb_data_2_1 or
	  v_fb_data_2_2 or
	  v_fb_data_2_3 or
	  v_fb_data_2_4 or
	  v_fb_data_2_5 or
	  v_fb_data_2_6 or
	  v_fb_data_2_7 or
	  v_fb_data_2_8 or
	  v_fb_data_2_9 or
	  v_fb_data_2_10 or
	  v_fb_data_2_11 or
	  v_fb_data_2_12 or
	  v_fb_data_2_13 or v_fb_data_2_14 or v_fb_data_2_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_0;
      4'd1:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_1;
      4'd2:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_2;
      4'd3:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_3;
      4'd4:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_4;
      4'd5:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_5;
      4'd6:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_6;
      4'd7:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_7;
      4'd8:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_8;
      4'd9:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_9;
      4'd10:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_10;
      4'd11:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_11;
      4'd12:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_12;
      4'd13:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_13;
      4'd14:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_14;
      4'd15:
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 =
	      v_fb_data_2_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_3_0 or
	  v_fb_data_3_1 or
	  v_fb_data_3_2 or
	  v_fb_data_3_3 or
	  v_fb_data_3_4 or
	  v_fb_data_3_5 or
	  v_fb_data_3_6 or
	  v_fb_data_3_7 or
	  v_fb_data_3_8 or
	  v_fb_data_3_9 or
	  v_fb_data_3_10 or
	  v_fb_data_3_11 or
	  v_fb_data_3_12 or
	  v_fb_data_3_13 or v_fb_data_3_14 or v_fb_data_3_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_0;
      4'd1:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_1;
      4'd2:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_2;
      4'd3:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_3;
      4'd4:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_4;
      4'd5:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_5;
      4'd6:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_6;
      4'd7:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_7;
      4'd8:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_8;
      4'd9:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_9;
      4'd10:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_10;
      4'd11:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_11;
      4'd12:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_12;
      4'd13:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_13;
      4'd14:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_14;
      4'd15:
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 =
	      v_fb_data_3_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_4_0 or
	  v_fb_data_4_1 or
	  v_fb_data_4_2 or
	  v_fb_data_4_3 or
	  v_fb_data_4_4 or
	  v_fb_data_4_5 or
	  v_fb_data_4_6 or
	  v_fb_data_4_7 or
	  v_fb_data_4_8 or
	  v_fb_data_4_9 or
	  v_fb_data_4_10 or
	  v_fb_data_4_11 or
	  v_fb_data_4_12 or
	  v_fb_data_4_13 or v_fb_data_4_14 or v_fb_data_4_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_0;
      4'd1:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_1;
      4'd2:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_2;
      4'd3:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_3;
      4'd4:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_4;
      4'd5:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_5;
      4'd6:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_6;
      4'd7:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_7;
      4'd8:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_8;
      4'd9:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_9;
      4'd10:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_10;
      4'd11:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_11;
      4'd12:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_12;
      4'd13:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_13;
      4'd14:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_14;
      4'd15:
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 =
	      v_fb_data_4_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_6_0 or
	  v_fb_data_6_1 or
	  v_fb_data_6_2 or
	  v_fb_data_6_3 or
	  v_fb_data_6_4 or
	  v_fb_data_6_5 or
	  v_fb_data_6_6 or
	  v_fb_data_6_7 or
	  v_fb_data_6_8 or
	  v_fb_data_6_9 or
	  v_fb_data_6_10 or
	  v_fb_data_6_11 or
	  v_fb_data_6_12 or
	  v_fb_data_6_13 or v_fb_data_6_14 or v_fb_data_6_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_0;
      4'd1:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_1;
      4'd2:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_2;
      4'd3:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_3;
      4'd4:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_4;
      4'd5:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_5;
      4'd6:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_6;
      4'd7:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_7;
      4'd8:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_8;
      4'd9:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_9;
      4'd10:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_10;
      4'd11:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_11;
      4'd12:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_12;
      4'd13:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_13;
      4'd14:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_14;
      4'd15:
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 =
	      v_fb_data_6_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_5_0 or
	  v_fb_data_5_1 or
	  v_fb_data_5_2 or
	  v_fb_data_5_3 or
	  v_fb_data_5_4 or
	  v_fb_data_5_5 or
	  v_fb_data_5_6 or
	  v_fb_data_5_7 or
	  v_fb_data_5_8 or
	  v_fb_data_5_9 or
	  v_fb_data_5_10 or
	  v_fb_data_5_11 or
	  v_fb_data_5_12 or
	  v_fb_data_5_13 or v_fb_data_5_14 or v_fb_data_5_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_0;
      4'd1:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_1;
      4'd2:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_2;
      4'd3:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_3;
      4'd4:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_4;
      4'd5:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_5;
      4'd6:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_6;
      4'd7:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_7;
      4'd8:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_8;
      4'd9:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_9;
      4'd10:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_10;
      4'd11:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_11;
      4'd12:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_12;
      4'd13:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_13;
      4'd14:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_14;
      4'd15:
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 =
	      v_fb_data_5_15;
    endcase
  end
  always@(ma_from_storebuffer_address or
	  v_fb_data_7_0 or
	  v_fb_data_7_1 or
	  v_fb_data_7_2 or
	  v_fb_data_7_3 or
	  v_fb_data_7_4 or
	  v_fb_data_7_5 or
	  v_fb_data_7_6 or
	  v_fb_data_7_7 or
	  v_fb_data_7_8 or
	  v_fb_data_7_9 or
	  v_fb_data_7_10 or
	  v_fb_data_7_11 or
	  v_fb_data_7_12 or
	  v_fb_data_7_13 or v_fb_data_7_14 or v_fb_data_7_15)
  begin
    case (ma_from_storebuffer_address[5:2])
      4'd0:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_0;
      4'd1:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_1;
      4'd2:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_2;
      4'd3:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_3;
      4'd4:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_4;
      4'd5:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_5;
      4'd6:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_6;
      4'd7:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_7;
      4'd8:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_8;
      4'd9:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_9;
      4'd10:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_10;
      4'd11:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_11;
      4'd12:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_12;
      4'd13:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_13;
      4'd14:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_14;
      4'd15:
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412 =
	      v_fb_data_7_15;
    endcase
  end
  always@(ma_from_storebuffer_fbindex or
	  SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286 or
	  SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304 or
	  SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322 or
	  SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340 or
	  SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358 or
	  SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376 or
	  SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394 or
	  SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412)
  begin
    case (ma_from_storebuffer_fbindex)
      3'd0:
	  x__h48937 =
	      SEL_ARR_v_fb_data_0_0_read__69_v_fb_data_0_1_r_ETC___d286;
      3'd1:
	  x__h48937 =
	      SEL_ARR_v_fb_data_1_0_read__87_v_fb_data_1_1_r_ETC___d304;
      3'd2:
	  x__h48937 =
	      SEL_ARR_v_fb_data_2_0_read__05_v_fb_data_2_1_r_ETC___d322;
      3'd3:
	  x__h48937 =
	      SEL_ARR_v_fb_data_3_0_read__23_v_fb_data_3_1_r_ETC___d340;
      3'd4:
	  x__h48937 =
	      SEL_ARR_v_fb_data_4_0_read__41_v_fb_data_4_1_r_ETC___d358;
      3'd5:
	  x__h48937 =
	      SEL_ARR_v_fb_data_5_0_read__59_v_fb_data_5_1_r_ETC___d376;
      3'd6:
	  x__h48937 =
	      SEL_ARR_v_fb_data_6_0_read__77_v_fb_data_6_1_r_ETC___d394;
      3'd7:
	  x__h48937 =
	      SEL_ARR_v_fb_data_7_0_read__95_v_fb_data_7_1_r_ETC___d412;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_fb_enables <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_fbhead <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_fbtail <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_next_bank <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_fb_addr_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_data_0_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_4_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_5_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_6_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_7_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_dirty_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_dirty_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_fb_enables_EN)
	  rg_fb_enables <= `BSV_ASSIGNMENT_DELAY rg_fb_enables_D_IN;
	if (rg_fbhead_EN) rg_fbhead <= `BSV_ASSIGNMENT_DELAY rg_fbhead_D_IN;
	if (rg_fbtail_EN) rg_fbtail <= `BSV_ASSIGNMENT_DELAY rg_fbtail_D_IN;
	if (rg_next_bank_EN)
	  rg_next_bank <= `BSV_ASSIGNMENT_DELAY rg_next_bank_D_IN;
	if (v_fb_addr_0_EN)
	  v_fb_addr_0 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_0_D_IN;
	if (v_fb_addr_1_EN)
	  v_fb_addr_1 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_1_D_IN;
	if (v_fb_addr_2_EN)
	  v_fb_addr_2 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_2_D_IN;
	if (v_fb_addr_3_EN)
	  v_fb_addr_3 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_3_D_IN;
	if (v_fb_addr_4_EN)
	  v_fb_addr_4 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_4_D_IN;
	if (v_fb_addr_5_EN)
	  v_fb_addr_5 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_5_D_IN;
	if (v_fb_addr_6_EN)
	  v_fb_addr_6 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_6_D_IN;
	if (v_fb_addr_7_EN)
	  v_fb_addr_7 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_7_D_IN;
	if (v_fb_addr_valid_0_EN)
	  v_fb_addr_valid_0 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_0_D_IN;
	if (v_fb_addr_valid_1_EN)
	  v_fb_addr_valid_1 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_1_D_IN;
	if (v_fb_addr_valid_2_EN)
	  v_fb_addr_valid_2 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_2_D_IN;
	if (v_fb_addr_valid_3_EN)
	  v_fb_addr_valid_3 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_3_D_IN;
	if (v_fb_addr_valid_4_EN)
	  v_fb_addr_valid_4 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_4_D_IN;
	if (v_fb_addr_valid_5_EN)
	  v_fb_addr_valid_5 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_5_D_IN;
	if (v_fb_addr_valid_6_EN)
	  v_fb_addr_valid_6 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_6_D_IN;
	if (v_fb_addr_valid_7_EN)
	  v_fb_addr_valid_7 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_7_D_IN;
	if (v_fb_data_0_0_EN)
	  v_fb_data_0_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_0_D_IN;
	if (v_fb_data_0_1_EN)
	  v_fb_data_0_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_1_D_IN;
	if (v_fb_data_0_10_EN)
	  v_fb_data_0_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_10_D_IN;
	if (v_fb_data_0_11_EN)
	  v_fb_data_0_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_11_D_IN;
	if (v_fb_data_0_12_EN)
	  v_fb_data_0_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_12_D_IN;
	if (v_fb_data_0_13_EN)
	  v_fb_data_0_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_13_D_IN;
	if (v_fb_data_0_14_EN)
	  v_fb_data_0_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_14_D_IN;
	if (v_fb_data_0_15_EN)
	  v_fb_data_0_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_15_D_IN;
	if (v_fb_data_0_2_EN)
	  v_fb_data_0_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_2_D_IN;
	if (v_fb_data_0_3_EN)
	  v_fb_data_0_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_3_D_IN;
	if (v_fb_data_0_4_EN)
	  v_fb_data_0_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_4_D_IN;
	if (v_fb_data_0_5_EN)
	  v_fb_data_0_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_5_D_IN;
	if (v_fb_data_0_6_EN)
	  v_fb_data_0_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_6_D_IN;
	if (v_fb_data_0_7_EN)
	  v_fb_data_0_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_7_D_IN;
	if (v_fb_data_0_8_EN)
	  v_fb_data_0_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_8_D_IN;
	if (v_fb_data_0_9_EN)
	  v_fb_data_0_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_9_D_IN;
	if (v_fb_data_1_0_EN)
	  v_fb_data_1_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_0_D_IN;
	if (v_fb_data_1_1_EN)
	  v_fb_data_1_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_1_D_IN;
	if (v_fb_data_1_10_EN)
	  v_fb_data_1_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_10_D_IN;
	if (v_fb_data_1_11_EN)
	  v_fb_data_1_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_11_D_IN;
	if (v_fb_data_1_12_EN)
	  v_fb_data_1_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_12_D_IN;
	if (v_fb_data_1_13_EN)
	  v_fb_data_1_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_13_D_IN;
	if (v_fb_data_1_14_EN)
	  v_fb_data_1_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_14_D_IN;
	if (v_fb_data_1_15_EN)
	  v_fb_data_1_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_15_D_IN;
	if (v_fb_data_1_2_EN)
	  v_fb_data_1_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_2_D_IN;
	if (v_fb_data_1_3_EN)
	  v_fb_data_1_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_3_D_IN;
	if (v_fb_data_1_4_EN)
	  v_fb_data_1_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_4_D_IN;
	if (v_fb_data_1_5_EN)
	  v_fb_data_1_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_5_D_IN;
	if (v_fb_data_1_6_EN)
	  v_fb_data_1_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_6_D_IN;
	if (v_fb_data_1_7_EN)
	  v_fb_data_1_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_7_D_IN;
	if (v_fb_data_1_8_EN)
	  v_fb_data_1_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_8_D_IN;
	if (v_fb_data_1_9_EN)
	  v_fb_data_1_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_9_D_IN;
	if (v_fb_data_2_0_EN)
	  v_fb_data_2_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_0_D_IN;
	if (v_fb_data_2_1_EN)
	  v_fb_data_2_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_1_D_IN;
	if (v_fb_data_2_10_EN)
	  v_fb_data_2_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_10_D_IN;
	if (v_fb_data_2_11_EN)
	  v_fb_data_2_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_11_D_IN;
	if (v_fb_data_2_12_EN)
	  v_fb_data_2_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_12_D_IN;
	if (v_fb_data_2_13_EN)
	  v_fb_data_2_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_13_D_IN;
	if (v_fb_data_2_14_EN)
	  v_fb_data_2_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_14_D_IN;
	if (v_fb_data_2_15_EN)
	  v_fb_data_2_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_15_D_IN;
	if (v_fb_data_2_2_EN)
	  v_fb_data_2_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_2_D_IN;
	if (v_fb_data_2_3_EN)
	  v_fb_data_2_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_3_D_IN;
	if (v_fb_data_2_4_EN)
	  v_fb_data_2_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_4_D_IN;
	if (v_fb_data_2_5_EN)
	  v_fb_data_2_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_5_D_IN;
	if (v_fb_data_2_6_EN)
	  v_fb_data_2_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_6_D_IN;
	if (v_fb_data_2_7_EN)
	  v_fb_data_2_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_7_D_IN;
	if (v_fb_data_2_8_EN)
	  v_fb_data_2_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_8_D_IN;
	if (v_fb_data_2_9_EN)
	  v_fb_data_2_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_9_D_IN;
	if (v_fb_data_3_0_EN)
	  v_fb_data_3_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_0_D_IN;
	if (v_fb_data_3_1_EN)
	  v_fb_data_3_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_1_D_IN;
	if (v_fb_data_3_10_EN)
	  v_fb_data_3_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_10_D_IN;
	if (v_fb_data_3_11_EN)
	  v_fb_data_3_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_11_D_IN;
	if (v_fb_data_3_12_EN)
	  v_fb_data_3_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_12_D_IN;
	if (v_fb_data_3_13_EN)
	  v_fb_data_3_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_13_D_IN;
	if (v_fb_data_3_14_EN)
	  v_fb_data_3_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_14_D_IN;
	if (v_fb_data_3_15_EN)
	  v_fb_data_3_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_15_D_IN;
	if (v_fb_data_3_2_EN)
	  v_fb_data_3_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_2_D_IN;
	if (v_fb_data_3_3_EN)
	  v_fb_data_3_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_3_D_IN;
	if (v_fb_data_3_4_EN)
	  v_fb_data_3_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_4_D_IN;
	if (v_fb_data_3_5_EN)
	  v_fb_data_3_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_5_D_IN;
	if (v_fb_data_3_6_EN)
	  v_fb_data_3_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_6_D_IN;
	if (v_fb_data_3_7_EN)
	  v_fb_data_3_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_7_D_IN;
	if (v_fb_data_3_8_EN)
	  v_fb_data_3_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_8_D_IN;
	if (v_fb_data_3_9_EN)
	  v_fb_data_3_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_9_D_IN;
	if (v_fb_data_4_0_EN)
	  v_fb_data_4_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_0_D_IN;
	if (v_fb_data_4_1_EN)
	  v_fb_data_4_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_1_D_IN;
	if (v_fb_data_4_10_EN)
	  v_fb_data_4_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_10_D_IN;
	if (v_fb_data_4_11_EN)
	  v_fb_data_4_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_11_D_IN;
	if (v_fb_data_4_12_EN)
	  v_fb_data_4_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_12_D_IN;
	if (v_fb_data_4_13_EN)
	  v_fb_data_4_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_13_D_IN;
	if (v_fb_data_4_14_EN)
	  v_fb_data_4_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_14_D_IN;
	if (v_fb_data_4_15_EN)
	  v_fb_data_4_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_15_D_IN;
	if (v_fb_data_4_2_EN)
	  v_fb_data_4_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_2_D_IN;
	if (v_fb_data_4_3_EN)
	  v_fb_data_4_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_3_D_IN;
	if (v_fb_data_4_4_EN)
	  v_fb_data_4_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_4_D_IN;
	if (v_fb_data_4_5_EN)
	  v_fb_data_4_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_5_D_IN;
	if (v_fb_data_4_6_EN)
	  v_fb_data_4_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_6_D_IN;
	if (v_fb_data_4_7_EN)
	  v_fb_data_4_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_7_D_IN;
	if (v_fb_data_4_8_EN)
	  v_fb_data_4_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_8_D_IN;
	if (v_fb_data_4_9_EN)
	  v_fb_data_4_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_4_9_D_IN;
	if (v_fb_data_5_0_EN)
	  v_fb_data_5_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_0_D_IN;
	if (v_fb_data_5_1_EN)
	  v_fb_data_5_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_1_D_IN;
	if (v_fb_data_5_10_EN)
	  v_fb_data_5_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_10_D_IN;
	if (v_fb_data_5_11_EN)
	  v_fb_data_5_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_11_D_IN;
	if (v_fb_data_5_12_EN)
	  v_fb_data_5_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_12_D_IN;
	if (v_fb_data_5_13_EN)
	  v_fb_data_5_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_13_D_IN;
	if (v_fb_data_5_14_EN)
	  v_fb_data_5_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_14_D_IN;
	if (v_fb_data_5_15_EN)
	  v_fb_data_5_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_15_D_IN;
	if (v_fb_data_5_2_EN)
	  v_fb_data_5_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_2_D_IN;
	if (v_fb_data_5_3_EN)
	  v_fb_data_5_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_3_D_IN;
	if (v_fb_data_5_4_EN)
	  v_fb_data_5_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_4_D_IN;
	if (v_fb_data_5_5_EN)
	  v_fb_data_5_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_5_D_IN;
	if (v_fb_data_5_6_EN)
	  v_fb_data_5_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_6_D_IN;
	if (v_fb_data_5_7_EN)
	  v_fb_data_5_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_7_D_IN;
	if (v_fb_data_5_8_EN)
	  v_fb_data_5_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_8_D_IN;
	if (v_fb_data_5_9_EN)
	  v_fb_data_5_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_5_9_D_IN;
	if (v_fb_data_6_0_EN)
	  v_fb_data_6_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_0_D_IN;
	if (v_fb_data_6_1_EN)
	  v_fb_data_6_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_1_D_IN;
	if (v_fb_data_6_10_EN)
	  v_fb_data_6_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_10_D_IN;
	if (v_fb_data_6_11_EN)
	  v_fb_data_6_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_11_D_IN;
	if (v_fb_data_6_12_EN)
	  v_fb_data_6_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_12_D_IN;
	if (v_fb_data_6_13_EN)
	  v_fb_data_6_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_13_D_IN;
	if (v_fb_data_6_14_EN)
	  v_fb_data_6_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_14_D_IN;
	if (v_fb_data_6_15_EN)
	  v_fb_data_6_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_15_D_IN;
	if (v_fb_data_6_2_EN)
	  v_fb_data_6_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_2_D_IN;
	if (v_fb_data_6_3_EN)
	  v_fb_data_6_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_3_D_IN;
	if (v_fb_data_6_4_EN)
	  v_fb_data_6_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_4_D_IN;
	if (v_fb_data_6_5_EN)
	  v_fb_data_6_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_5_D_IN;
	if (v_fb_data_6_6_EN)
	  v_fb_data_6_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_6_D_IN;
	if (v_fb_data_6_7_EN)
	  v_fb_data_6_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_7_D_IN;
	if (v_fb_data_6_8_EN)
	  v_fb_data_6_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_8_D_IN;
	if (v_fb_data_6_9_EN)
	  v_fb_data_6_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_6_9_D_IN;
	if (v_fb_data_7_0_EN)
	  v_fb_data_7_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_0_D_IN;
	if (v_fb_data_7_1_EN)
	  v_fb_data_7_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_1_D_IN;
	if (v_fb_data_7_10_EN)
	  v_fb_data_7_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_10_D_IN;
	if (v_fb_data_7_11_EN)
	  v_fb_data_7_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_11_D_IN;
	if (v_fb_data_7_12_EN)
	  v_fb_data_7_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_12_D_IN;
	if (v_fb_data_7_13_EN)
	  v_fb_data_7_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_13_D_IN;
	if (v_fb_data_7_14_EN)
	  v_fb_data_7_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_14_D_IN;
	if (v_fb_data_7_15_EN)
	  v_fb_data_7_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_15_D_IN;
	if (v_fb_data_7_2_EN)
	  v_fb_data_7_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_2_D_IN;
	if (v_fb_data_7_3_EN)
	  v_fb_data_7_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_3_D_IN;
	if (v_fb_data_7_4_EN)
	  v_fb_data_7_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_4_D_IN;
	if (v_fb_data_7_5_EN)
	  v_fb_data_7_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_5_D_IN;
	if (v_fb_data_7_6_EN)
	  v_fb_data_7_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_6_D_IN;
	if (v_fb_data_7_7_EN)
	  v_fb_data_7_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_7_D_IN;
	if (v_fb_data_7_8_EN)
	  v_fb_data_7_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_8_D_IN;
	if (v_fb_data_7_9_EN)
	  v_fb_data_7_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_7_9_D_IN;
	if (v_fb_dirty_0_EN)
	  v_fb_dirty_0 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_0_D_IN;
	if (v_fb_dirty_1_EN)
	  v_fb_dirty_1 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_1_D_IN;
	if (v_fb_dirty_2_EN)
	  v_fb_dirty_2 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_2_D_IN;
	if (v_fb_dirty_3_EN)
	  v_fb_dirty_3 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_3_D_IN;
	if (v_fb_dirty_4_EN)
	  v_fb_dirty_4 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_4_D_IN;
	if (v_fb_dirty_5_EN)
	  v_fb_dirty_5 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_5_D_IN;
	if (v_fb_dirty_6_EN)
	  v_fb_dirty_6 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_6_D_IN;
	if (v_fb_dirty_7_EN)
	  v_fb_dirty_7 <= `BSV_ASSIGNMENT_DELAY v_fb_dirty_7_D_IN;
	if (v_fb_err_0_EN)
	  v_fb_err_0 <= `BSV_ASSIGNMENT_DELAY v_fb_err_0_D_IN;
	if (v_fb_err_1_EN)
	  v_fb_err_1 <= `BSV_ASSIGNMENT_DELAY v_fb_err_1_D_IN;
	if (v_fb_err_2_EN)
	  v_fb_err_2 <= `BSV_ASSIGNMENT_DELAY v_fb_err_2_D_IN;
	if (v_fb_err_3_EN)
	  v_fb_err_3 <= `BSV_ASSIGNMENT_DELAY v_fb_err_3_D_IN;
	if (v_fb_err_4_EN)
	  v_fb_err_4 <= `BSV_ASSIGNMENT_DELAY v_fb_err_4_D_IN;
	if (v_fb_err_5_EN)
	  v_fb_err_5 <= `BSV_ASSIGNMENT_DELAY v_fb_err_5_D_IN;
	if (v_fb_err_6_EN)
	  v_fb_err_6 <= `BSV_ASSIGNMENT_DELAY v_fb_err_6_D_IN;
	if (v_fb_err_7_EN)
	  v_fb_err_7 <= `BSV_ASSIGNMENT_DELAY v_fb_err_7_D_IN;
	if (v_fb_line_valid_0_EN)
	  v_fb_line_valid_0 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_0_D_IN;
	if (v_fb_line_valid_1_EN)
	  v_fb_line_valid_1 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_1_D_IN;
	if (v_fb_line_valid_2_EN)
	  v_fb_line_valid_2 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_2_D_IN;
	if (v_fb_line_valid_3_EN)
	  v_fb_line_valid_3 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_3_D_IN;
	if (v_fb_line_valid_4_EN)
	  v_fb_line_valid_4 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_4_D_IN;
	if (v_fb_line_valid_5_EN)
	  v_fb_line_valid_5 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_5_D_IN;
	if (v_fb_line_valid_6_EN)
	  v_fb_line_valid_6 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_6_D_IN;
	if (v_fb_line_valid_7_EN)
	  v_fb_line_valid_7 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_7_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_fb_enables = 16'hAAAA;
    rg_fbhead = 3'h2;
    rg_fbtail = 3'h2;
    rg_next_bank = 4'hA;
    v_fb_addr_0 = 32'hAAAAAAAA;
    v_fb_addr_1 = 32'hAAAAAAAA;
    v_fb_addr_2 = 32'hAAAAAAAA;
    v_fb_addr_3 = 32'hAAAAAAAA;
    v_fb_addr_4 = 32'hAAAAAAAA;
    v_fb_addr_5 = 32'hAAAAAAAA;
    v_fb_addr_6 = 32'hAAAAAAAA;
    v_fb_addr_7 = 32'hAAAAAAAA;
    v_fb_addr_valid_0 = 1'h0;
    v_fb_addr_valid_1 = 1'h0;
    v_fb_addr_valid_2 = 1'h0;
    v_fb_addr_valid_3 = 1'h0;
    v_fb_addr_valid_4 = 1'h0;
    v_fb_addr_valid_5 = 1'h0;
    v_fb_addr_valid_6 = 1'h0;
    v_fb_addr_valid_7 = 1'h0;
    v_fb_data_0_0 = 32'hAAAAAAAA;
    v_fb_data_0_1 = 32'hAAAAAAAA;
    v_fb_data_0_10 = 32'hAAAAAAAA;
    v_fb_data_0_11 = 32'hAAAAAAAA;
    v_fb_data_0_12 = 32'hAAAAAAAA;
    v_fb_data_0_13 = 32'hAAAAAAAA;
    v_fb_data_0_14 = 32'hAAAAAAAA;
    v_fb_data_0_15 = 32'hAAAAAAAA;
    v_fb_data_0_2 = 32'hAAAAAAAA;
    v_fb_data_0_3 = 32'hAAAAAAAA;
    v_fb_data_0_4 = 32'hAAAAAAAA;
    v_fb_data_0_5 = 32'hAAAAAAAA;
    v_fb_data_0_6 = 32'hAAAAAAAA;
    v_fb_data_0_7 = 32'hAAAAAAAA;
    v_fb_data_0_8 = 32'hAAAAAAAA;
    v_fb_data_0_9 = 32'hAAAAAAAA;
    v_fb_data_1_0 = 32'hAAAAAAAA;
    v_fb_data_1_1 = 32'hAAAAAAAA;
    v_fb_data_1_10 = 32'hAAAAAAAA;
    v_fb_data_1_11 = 32'hAAAAAAAA;
    v_fb_data_1_12 = 32'hAAAAAAAA;
    v_fb_data_1_13 = 32'hAAAAAAAA;
    v_fb_data_1_14 = 32'hAAAAAAAA;
    v_fb_data_1_15 = 32'hAAAAAAAA;
    v_fb_data_1_2 = 32'hAAAAAAAA;
    v_fb_data_1_3 = 32'hAAAAAAAA;
    v_fb_data_1_4 = 32'hAAAAAAAA;
    v_fb_data_1_5 = 32'hAAAAAAAA;
    v_fb_data_1_6 = 32'hAAAAAAAA;
    v_fb_data_1_7 = 32'hAAAAAAAA;
    v_fb_data_1_8 = 32'hAAAAAAAA;
    v_fb_data_1_9 = 32'hAAAAAAAA;
    v_fb_data_2_0 = 32'hAAAAAAAA;
    v_fb_data_2_1 = 32'hAAAAAAAA;
    v_fb_data_2_10 = 32'hAAAAAAAA;
    v_fb_data_2_11 = 32'hAAAAAAAA;
    v_fb_data_2_12 = 32'hAAAAAAAA;
    v_fb_data_2_13 = 32'hAAAAAAAA;
    v_fb_data_2_14 = 32'hAAAAAAAA;
    v_fb_data_2_15 = 32'hAAAAAAAA;
    v_fb_data_2_2 = 32'hAAAAAAAA;
    v_fb_data_2_3 = 32'hAAAAAAAA;
    v_fb_data_2_4 = 32'hAAAAAAAA;
    v_fb_data_2_5 = 32'hAAAAAAAA;
    v_fb_data_2_6 = 32'hAAAAAAAA;
    v_fb_data_2_7 = 32'hAAAAAAAA;
    v_fb_data_2_8 = 32'hAAAAAAAA;
    v_fb_data_2_9 = 32'hAAAAAAAA;
    v_fb_data_3_0 = 32'hAAAAAAAA;
    v_fb_data_3_1 = 32'hAAAAAAAA;
    v_fb_data_3_10 = 32'hAAAAAAAA;
    v_fb_data_3_11 = 32'hAAAAAAAA;
    v_fb_data_3_12 = 32'hAAAAAAAA;
    v_fb_data_3_13 = 32'hAAAAAAAA;
    v_fb_data_3_14 = 32'hAAAAAAAA;
    v_fb_data_3_15 = 32'hAAAAAAAA;
    v_fb_data_3_2 = 32'hAAAAAAAA;
    v_fb_data_3_3 = 32'hAAAAAAAA;
    v_fb_data_3_4 = 32'hAAAAAAAA;
    v_fb_data_3_5 = 32'hAAAAAAAA;
    v_fb_data_3_6 = 32'hAAAAAAAA;
    v_fb_data_3_7 = 32'hAAAAAAAA;
    v_fb_data_3_8 = 32'hAAAAAAAA;
    v_fb_data_3_9 = 32'hAAAAAAAA;
    v_fb_data_4_0 = 32'hAAAAAAAA;
    v_fb_data_4_1 = 32'hAAAAAAAA;
    v_fb_data_4_10 = 32'hAAAAAAAA;
    v_fb_data_4_11 = 32'hAAAAAAAA;
    v_fb_data_4_12 = 32'hAAAAAAAA;
    v_fb_data_4_13 = 32'hAAAAAAAA;
    v_fb_data_4_14 = 32'hAAAAAAAA;
    v_fb_data_4_15 = 32'hAAAAAAAA;
    v_fb_data_4_2 = 32'hAAAAAAAA;
    v_fb_data_4_3 = 32'hAAAAAAAA;
    v_fb_data_4_4 = 32'hAAAAAAAA;
    v_fb_data_4_5 = 32'hAAAAAAAA;
    v_fb_data_4_6 = 32'hAAAAAAAA;
    v_fb_data_4_7 = 32'hAAAAAAAA;
    v_fb_data_4_8 = 32'hAAAAAAAA;
    v_fb_data_4_9 = 32'hAAAAAAAA;
    v_fb_data_5_0 = 32'hAAAAAAAA;
    v_fb_data_5_1 = 32'hAAAAAAAA;
    v_fb_data_5_10 = 32'hAAAAAAAA;
    v_fb_data_5_11 = 32'hAAAAAAAA;
    v_fb_data_5_12 = 32'hAAAAAAAA;
    v_fb_data_5_13 = 32'hAAAAAAAA;
    v_fb_data_5_14 = 32'hAAAAAAAA;
    v_fb_data_5_15 = 32'hAAAAAAAA;
    v_fb_data_5_2 = 32'hAAAAAAAA;
    v_fb_data_5_3 = 32'hAAAAAAAA;
    v_fb_data_5_4 = 32'hAAAAAAAA;
    v_fb_data_5_5 = 32'hAAAAAAAA;
    v_fb_data_5_6 = 32'hAAAAAAAA;
    v_fb_data_5_7 = 32'hAAAAAAAA;
    v_fb_data_5_8 = 32'hAAAAAAAA;
    v_fb_data_5_9 = 32'hAAAAAAAA;
    v_fb_data_6_0 = 32'hAAAAAAAA;
    v_fb_data_6_1 = 32'hAAAAAAAA;
    v_fb_data_6_10 = 32'hAAAAAAAA;
    v_fb_data_6_11 = 32'hAAAAAAAA;
    v_fb_data_6_12 = 32'hAAAAAAAA;
    v_fb_data_6_13 = 32'hAAAAAAAA;
    v_fb_data_6_14 = 32'hAAAAAAAA;
    v_fb_data_6_15 = 32'hAAAAAAAA;
    v_fb_data_6_2 = 32'hAAAAAAAA;
    v_fb_data_6_3 = 32'hAAAAAAAA;
    v_fb_data_6_4 = 32'hAAAAAAAA;
    v_fb_data_6_5 = 32'hAAAAAAAA;
    v_fb_data_6_6 = 32'hAAAAAAAA;
    v_fb_data_6_7 = 32'hAAAAAAAA;
    v_fb_data_6_8 = 32'hAAAAAAAA;
    v_fb_data_6_9 = 32'hAAAAAAAA;
    v_fb_data_7_0 = 32'hAAAAAAAA;
    v_fb_data_7_1 = 32'hAAAAAAAA;
    v_fb_data_7_10 = 32'hAAAAAAAA;
    v_fb_data_7_11 = 32'hAAAAAAAA;
    v_fb_data_7_12 = 32'hAAAAAAAA;
    v_fb_data_7_13 = 32'hAAAAAAAA;
    v_fb_data_7_14 = 32'hAAAAAAAA;
    v_fb_data_7_15 = 32'hAAAAAAAA;
    v_fb_data_7_2 = 32'hAAAAAAAA;
    v_fb_data_7_3 = 32'hAAAAAAAA;
    v_fb_data_7_4 = 32'hAAAAAAAA;
    v_fb_data_7_5 = 32'hAAAAAAAA;
    v_fb_data_7_6 = 32'hAAAAAAAA;
    v_fb_data_7_7 = 32'hAAAAAAAA;
    v_fb_data_7_8 = 32'hAAAAAAAA;
    v_fb_data_7_9 = 32'hAAAAAAAA;
    v_fb_dirty_0 = 1'h0;
    v_fb_dirty_1 = 1'h0;
    v_fb_dirty_2 = 1'h0;
    v_fb_dirty_3 = 1'h0;
    v_fb_dirty_4 = 1'h0;
    v_fb_dirty_5 = 1'h0;
    v_fb_dirty_6 = 1'h0;
    v_fb_dirty_7 = 1'h0;
    v_fb_err_0 = 1'h0;
    v_fb_err_1 = 1'h0;
    v_fb_err_2 = 1'h0;
    v_fb_err_3 = 1'h0;
    v_fb_err_4 = 1'h0;
    v_fb_err_5 = 1'h0;
    v_fb_err_6 = 1'h0;
    v_fb_err_7 = 1'h0;
    v_fb_line_valid_0 = 1'h0;
    v_fb_line_valid_1 = 1'h0;
    v_fb_line_valid_2 = 1'h0;
    v_fb_line_valid_3 = 1'h0;
    v_fb_line_valid_4 = 1'h0;
    v_fb_line_valid_5 = 1'h0;
    v_fb_line_valid_6 = 1'h0;
    v_fb_line_valid_7 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d259 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d260 = $test$plusargs("mdcache ");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d261 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  v__h24503 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d259 ||
	   TASK_testplusargs___d260 && TASK_testplusargs___d261))
	$write("[%10d", v__h24503, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d259 ||
	   TASK_testplusargs___d260 && TASK_testplusargs___d261))
	$write("[%2d]DCACHE: FB Fill: fbindex:%d ibank:%d cbank:%d fben:%b",
	       id,
	       ma_fill_from_memory_fbindex,
	       ma_fill_from_memory_init_bank,
	       lv_current_bank__h21268,
	       rg_fb_enables);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d259 ||
	   TASK_testplusargs___d260 && TASK_testplusargs___d261))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d649 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d650 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d651 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  v__h51216 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d649 ||
	   TASK_testplusargs___d650 && TASK_testplusargs___d651))
	$write("[%10d", v__h51216, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d649 ||
	   TASK_testplusargs___d650 && TASK_testplusargs___d651))
	$write("[%2d]DCACHE: FB: Polling: linevalid:%b blockoffset:%d",
	       id,
	       IF_v_fb_addr_7_read__15_BITS_31_TO_6_55_EQ_mav_ETC___d689,
	       mav_polling_response_address[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d649 ||
	   TASK_testplusargs___d650 && TASK_testplusargs___d651))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d1 = $test$plusargs("fullverbose");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d2 = $test$plusargs("mdcache");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d3 = $test$plusargs("l3");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h7418 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%10d", v__h7418, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%2d]DCACHE: fb_full:%b fb_empty:%b fbhead:%d fbtail:%d fbheadvalid:%b",
	       id,
	       v_fb_addr_valid_0 &&
	       v_fb_addr_valid_1_read_AND_v_fb_addr_valid_2_r_ETC___d20,
	       !v_fb_addr_valid_0 &&
	       NOT_v_fb_addr_valid_1_read_3_AND_NOT_v_fb_addr_ETC___d35,
	       rg_fbhead,
	       rg_fbtail,
	       mv_fbhead_valid);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d76 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d77 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d78 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  v__h21037 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("[%10d", v__h21037, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("[%2d]DCACHE: FB: Allocating: fromram:%b address:%h dirty:%b",
	       id,
	       mav_allocate_line_from_ram,
	       mav_allocate_line_address,
	       mav_allocate_line_dirty);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d76 ||
	   TASK_testplusargs___d77 && TASK_testplusargs___d78))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d82 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d83 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d84 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  v__h21176 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write("[%10d", v__h21176, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write("[%2d]DCACHE: FB: Allocating fbindex:%d", id, rg_fbtail);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d82 ||
	   TASK_testplusargs___d83 && TASK_testplusargs___d84))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkdcache_fb_v2

