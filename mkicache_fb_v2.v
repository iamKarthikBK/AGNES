//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:09:08 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// mv_fbfull                      O     1
// mv_fbempty                     O     1
// mv_fbhead_valid                O     1
// mav_allocate_line              O     2 reg
// RDY_mav_allocate_line          O     1 const
// RDY_ma_fill_from_memory        O     1 const
// mv_release_info                O   545
// RDY_mv_release_info            O     1 const
// RDY_ma_perform_release         O     1 const
// mav_polling_response           O    39
// RDY_mav_polling_response       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// mav_allocate_line_from_ram     I     1
// mav_allocate_line_dataline     I   512
// mav_allocate_line_address      I    32 reg
// ma_fill_from_memory_mem_resp   I    34
// ma_fill_from_memory_fbindex    I     2
// ma_fill_from_memory_init_bank  I     4
// mav_polling_response_address   I    32
// mav_polling_response_fill      I     1
// mav_polling_response_fbindex   I     2
// EN_ma_fill_from_memory         I     1
// EN_ma_perform_release          I     1
// EN_mav_allocate_line           I     1
// EN_mav_polling_response        I     1 unused
//
// Combinational paths from inputs to outputs:
//   (mav_polling_response_address,
//    mav_polling_response_fill,
//    mav_polling_response_fbindex) -> mav_polling_response
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkicache_fb_v2(CLK,
		      RST_N,

		      mv_fbfull,

		      mv_fbempty,

		      mv_fbhead_valid,

		      mav_allocate_line_from_ram,
		      mav_allocate_line_dataline,
		      mav_allocate_line_address,
		      EN_mav_allocate_line,
		      mav_allocate_line,
		      RDY_mav_allocate_line,

		      ma_fill_from_memory_mem_resp,
		      ma_fill_from_memory_fbindex,
		      ma_fill_from_memory_init_bank,
		      EN_ma_fill_from_memory,
		      RDY_ma_fill_from_memory,

		      mv_release_info,
		      RDY_mv_release_info,

		      EN_ma_perform_release,
		      RDY_ma_perform_release,

		      mav_polling_response_address,
		      mav_polling_response_fill,
		      mav_polling_response_fbindex,
		      EN_mav_polling_response,
		      mav_polling_response,
		      RDY_mav_polling_response);
  parameter [31 : 0] id = 32'b0;
  input  CLK;
  input  RST_N;

  // value method mv_fbfull
  output mv_fbfull;

  // value method mv_fbempty
  output mv_fbempty;

  // value method mv_fbhead_valid
  output mv_fbhead_valid;

  // actionvalue method mav_allocate_line
  input  mav_allocate_line_from_ram;
  input  [511 : 0] mav_allocate_line_dataline;
  input  [31 : 0] mav_allocate_line_address;
  input  EN_mav_allocate_line;
  output [1 : 0] mav_allocate_line;
  output RDY_mav_allocate_line;

  // action method ma_fill_from_memory
  input  [33 : 0] ma_fill_from_memory_mem_resp;
  input  [1 : 0] ma_fill_from_memory_fbindex;
  input  [3 : 0] ma_fill_from_memory_init_bank;
  input  EN_ma_fill_from_memory;
  output RDY_ma_fill_from_memory;

  // value method mv_release_info
  output [544 : 0] mv_release_info;
  output RDY_mv_release_info;

  // action method ma_perform_release
  input  EN_ma_perform_release;
  output RDY_ma_perform_release;

  // actionvalue method mav_polling_response
  input  [31 : 0] mav_polling_response_address;
  input  mav_polling_response_fill;
  input  [1 : 0] mav_polling_response_fbindex;
  input  EN_mav_polling_response;
  output [38 : 0] mav_polling_response;
  output RDY_mav_polling_response;

  // signals for module outputs
  reg mv_fbhead_valid;
  wire [544 : 0] mv_release_info;
  wire [38 : 0] mav_polling_response;
  wire [1 : 0] mav_allocate_line;
  wire RDY_ma_fill_from_memory,
       RDY_ma_perform_release,
       RDY_mav_allocate_line,
       RDY_mav_polling_response,
       RDY_mv_release_info,
       mv_fbempty,
       mv_fbfull;

  // register rg_fb_enables
  reg [15 : 0] rg_fb_enables;
  wire [15 : 0] rg_fb_enables_D_IN;
  wire rg_fb_enables_EN;

  // register rg_fbhead
  reg [1 : 0] rg_fbhead;
  wire [1 : 0] rg_fbhead_D_IN;
  wire rg_fbhead_EN;

  // register rg_fbtail
  reg [1 : 0] rg_fbtail;
  wire [1 : 0] rg_fbtail_D_IN;
  wire rg_fbtail_EN;

  // register rg_next_bank
  reg [3 : 0] rg_next_bank;
  wire [3 : 0] rg_next_bank_D_IN;
  wire rg_next_bank_EN;

  // register v_fb_addr_0
  reg [31 : 0] v_fb_addr_0;
  wire [31 : 0] v_fb_addr_0_D_IN;
  wire v_fb_addr_0_EN;

  // register v_fb_addr_1
  reg [31 : 0] v_fb_addr_1;
  wire [31 : 0] v_fb_addr_1_D_IN;
  wire v_fb_addr_1_EN;

  // register v_fb_addr_2
  reg [31 : 0] v_fb_addr_2;
  wire [31 : 0] v_fb_addr_2_D_IN;
  wire v_fb_addr_2_EN;

  // register v_fb_addr_3
  reg [31 : 0] v_fb_addr_3;
  wire [31 : 0] v_fb_addr_3_D_IN;
  wire v_fb_addr_3_EN;

  // register v_fb_addr_valid_0
  reg v_fb_addr_valid_0;
  wire v_fb_addr_valid_0_D_IN, v_fb_addr_valid_0_EN;

  // register v_fb_addr_valid_1
  reg v_fb_addr_valid_1;
  wire v_fb_addr_valid_1_D_IN, v_fb_addr_valid_1_EN;

  // register v_fb_addr_valid_2
  reg v_fb_addr_valid_2;
  wire v_fb_addr_valid_2_D_IN, v_fb_addr_valid_2_EN;

  // register v_fb_addr_valid_3
  reg v_fb_addr_valid_3;
  wire v_fb_addr_valid_3_D_IN, v_fb_addr_valid_3_EN;

  // register v_fb_data_0_0
  reg [31 : 0] v_fb_data_0_0;
  wire [31 : 0] v_fb_data_0_0_D_IN;
  wire v_fb_data_0_0_EN;

  // register v_fb_data_0_1
  reg [31 : 0] v_fb_data_0_1;
  wire [31 : 0] v_fb_data_0_1_D_IN;
  wire v_fb_data_0_1_EN;

  // register v_fb_data_0_10
  reg [31 : 0] v_fb_data_0_10;
  wire [31 : 0] v_fb_data_0_10_D_IN;
  wire v_fb_data_0_10_EN;

  // register v_fb_data_0_11
  reg [31 : 0] v_fb_data_0_11;
  wire [31 : 0] v_fb_data_0_11_D_IN;
  wire v_fb_data_0_11_EN;

  // register v_fb_data_0_12
  reg [31 : 0] v_fb_data_0_12;
  wire [31 : 0] v_fb_data_0_12_D_IN;
  wire v_fb_data_0_12_EN;

  // register v_fb_data_0_13
  reg [31 : 0] v_fb_data_0_13;
  wire [31 : 0] v_fb_data_0_13_D_IN;
  wire v_fb_data_0_13_EN;

  // register v_fb_data_0_14
  reg [31 : 0] v_fb_data_0_14;
  wire [31 : 0] v_fb_data_0_14_D_IN;
  wire v_fb_data_0_14_EN;

  // register v_fb_data_0_15
  reg [31 : 0] v_fb_data_0_15;
  wire [31 : 0] v_fb_data_0_15_D_IN;
  wire v_fb_data_0_15_EN;

  // register v_fb_data_0_2
  reg [31 : 0] v_fb_data_0_2;
  wire [31 : 0] v_fb_data_0_2_D_IN;
  wire v_fb_data_0_2_EN;

  // register v_fb_data_0_3
  reg [31 : 0] v_fb_data_0_3;
  wire [31 : 0] v_fb_data_0_3_D_IN;
  wire v_fb_data_0_3_EN;

  // register v_fb_data_0_4
  reg [31 : 0] v_fb_data_0_4;
  wire [31 : 0] v_fb_data_0_4_D_IN;
  wire v_fb_data_0_4_EN;

  // register v_fb_data_0_5
  reg [31 : 0] v_fb_data_0_5;
  wire [31 : 0] v_fb_data_0_5_D_IN;
  wire v_fb_data_0_5_EN;

  // register v_fb_data_0_6
  reg [31 : 0] v_fb_data_0_6;
  wire [31 : 0] v_fb_data_0_6_D_IN;
  wire v_fb_data_0_6_EN;

  // register v_fb_data_0_7
  reg [31 : 0] v_fb_data_0_7;
  wire [31 : 0] v_fb_data_0_7_D_IN;
  wire v_fb_data_0_7_EN;

  // register v_fb_data_0_8
  reg [31 : 0] v_fb_data_0_8;
  wire [31 : 0] v_fb_data_0_8_D_IN;
  wire v_fb_data_0_8_EN;

  // register v_fb_data_0_9
  reg [31 : 0] v_fb_data_0_9;
  wire [31 : 0] v_fb_data_0_9_D_IN;
  wire v_fb_data_0_9_EN;

  // register v_fb_data_1_0
  reg [31 : 0] v_fb_data_1_0;
  wire [31 : 0] v_fb_data_1_0_D_IN;
  wire v_fb_data_1_0_EN;

  // register v_fb_data_1_1
  reg [31 : 0] v_fb_data_1_1;
  wire [31 : 0] v_fb_data_1_1_D_IN;
  wire v_fb_data_1_1_EN;

  // register v_fb_data_1_10
  reg [31 : 0] v_fb_data_1_10;
  wire [31 : 0] v_fb_data_1_10_D_IN;
  wire v_fb_data_1_10_EN;

  // register v_fb_data_1_11
  reg [31 : 0] v_fb_data_1_11;
  wire [31 : 0] v_fb_data_1_11_D_IN;
  wire v_fb_data_1_11_EN;

  // register v_fb_data_1_12
  reg [31 : 0] v_fb_data_1_12;
  wire [31 : 0] v_fb_data_1_12_D_IN;
  wire v_fb_data_1_12_EN;

  // register v_fb_data_1_13
  reg [31 : 0] v_fb_data_1_13;
  wire [31 : 0] v_fb_data_1_13_D_IN;
  wire v_fb_data_1_13_EN;

  // register v_fb_data_1_14
  reg [31 : 0] v_fb_data_1_14;
  wire [31 : 0] v_fb_data_1_14_D_IN;
  wire v_fb_data_1_14_EN;

  // register v_fb_data_1_15
  reg [31 : 0] v_fb_data_1_15;
  wire [31 : 0] v_fb_data_1_15_D_IN;
  wire v_fb_data_1_15_EN;

  // register v_fb_data_1_2
  reg [31 : 0] v_fb_data_1_2;
  wire [31 : 0] v_fb_data_1_2_D_IN;
  wire v_fb_data_1_2_EN;

  // register v_fb_data_1_3
  reg [31 : 0] v_fb_data_1_3;
  wire [31 : 0] v_fb_data_1_3_D_IN;
  wire v_fb_data_1_3_EN;

  // register v_fb_data_1_4
  reg [31 : 0] v_fb_data_1_4;
  wire [31 : 0] v_fb_data_1_4_D_IN;
  wire v_fb_data_1_4_EN;

  // register v_fb_data_1_5
  reg [31 : 0] v_fb_data_1_5;
  wire [31 : 0] v_fb_data_1_5_D_IN;
  wire v_fb_data_1_5_EN;

  // register v_fb_data_1_6
  reg [31 : 0] v_fb_data_1_6;
  wire [31 : 0] v_fb_data_1_6_D_IN;
  wire v_fb_data_1_6_EN;

  // register v_fb_data_1_7
  reg [31 : 0] v_fb_data_1_7;
  wire [31 : 0] v_fb_data_1_7_D_IN;
  wire v_fb_data_1_7_EN;

  // register v_fb_data_1_8
  reg [31 : 0] v_fb_data_1_8;
  wire [31 : 0] v_fb_data_1_8_D_IN;
  wire v_fb_data_1_8_EN;

  // register v_fb_data_1_9
  reg [31 : 0] v_fb_data_1_9;
  wire [31 : 0] v_fb_data_1_9_D_IN;
  wire v_fb_data_1_9_EN;

  // register v_fb_data_2_0
  reg [31 : 0] v_fb_data_2_0;
  wire [31 : 0] v_fb_data_2_0_D_IN;
  wire v_fb_data_2_0_EN;

  // register v_fb_data_2_1
  reg [31 : 0] v_fb_data_2_1;
  wire [31 : 0] v_fb_data_2_1_D_IN;
  wire v_fb_data_2_1_EN;

  // register v_fb_data_2_10
  reg [31 : 0] v_fb_data_2_10;
  wire [31 : 0] v_fb_data_2_10_D_IN;
  wire v_fb_data_2_10_EN;

  // register v_fb_data_2_11
  reg [31 : 0] v_fb_data_2_11;
  wire [31 : 0] v_fb_data_2_11_D_IN;
  wire v_fb_data_2_11_EN;

  // register v_fb_data_2_12
  reg [31 : 0] v_fb_data_2_12;
  wire [31 : 0] v_fb_data_2_12_D_IN;
  wire v_fb_data_2_12_EN;

  // register v_fb_data_2_13
  reg [31 : 0] v_fb_data_2_13;
  wire [31 : 0] v_fb_data_2_13_D_IN;
  wire v_fb_data_2_13_EN;

  // register v_fb_data_2_14
  reg [31 : 0] v_fb_data_2_14;
  wire [31 : 0] v_fb_data_2_14_D_IN;
  wire v_fb_data_2_14_EN;

  // register v_fb_data_2_15
  reg [31 : 0] v_fb_data_2_15;
  wire [31 : 0] v_fb_data_2_15_D_IN;
  wire v_fb_data_2_15_EN;

  // register v_fb_data_2_2
  reg [31 : 0] v_fb_data_2_2;
  wire [31 : 0] v_fb_data_2_2_D_IN;
  wire v_fb_data_2_2_EN;

  // register v_fb_data_2_3
  reg [31 : 0] v_fb_data_2_3;
  wire [31 : 0] v_fb_data_2_3_D_IN;
  wire v_fb_data_2_3_EN;

  // register v_fb_data_2_4
  reg [31 : 0] v_fb_data_2_4;
  wire [31 : 0] v_fb_data_2_4_D_IN;
  wire v_fb_data_2_4_EN;

  // register v_fb_data_2_5
  reg [31 : 0] v_fb_data_2_5;
  wire [31 : 0] v_fb_data_2_5_D_IN;
  wire v_fb_data_2_5_EN;

  // register v_fb_data_2_6
  reg [31 : 0] v_fb_data_2_6;
  wire [31 : 0] v_fb_data_2_6_D_IN;
  wire v_fb_data_2_6_EN;

  // register v_fb_data_2_7
  reg [31 : 0] v_fb_data_2_7;
  wire [31 : 0] v_fb_data_2_7_D_IN;
  wire v_fb_data_2_7_EN;

  // register v_fb_data_2_8
  reg [31 : 0] v_fb_data_2_8;
  wire [31 : 0] v_fb_data_2_8_D_IN;
  wire v_fb_data_2_8_EN;

  // register v_fb_data_2_9
  reg [31 : 0] v_fb_data_2_9;
  wire [31 : 0] v_fb_data_2_9_D_IN;
  wire v_fb_data_2_9_EN;

  // register v_fb_data_3_0
  reg [31 : 0] v_fb_data_3_0;
  wire [31 : 0] v_fb_data_3_0_D_IN;
  wire v_fb_data_3_0_EN;

  // register v_fb_data_3_1
  reg [31 : 0] v_fb_data_3_1;
  wire [31 : 0] v_fb_data_3_1_D_IN;
  wire v_fb_data_3_1_EN;

  // register v_fb_data_3_10
  reg [31 : 0] v_fb_data_3_10;
  wire [31 : 0] v_fb_data_3_10_D_IN;
  wire v_fb_data_3_10_EN;

  // register v_fb_data_3_11
  reg [31 : 0] v_fb_data_3_11;
  wire [31 : 0] v_fb_data_3_11_D_IN;
  wire v_fb_data_3_11_EN;

  // register v_fb_data_3_12
  reg [31 : 0] v_fb_data_3_12;
  wire [31 : 0] v_fb_data_3_12_D_IN;
  wire v_fb_data_3_12_EN;

  // register v_fb_data_3_13
  reg [31 : 0] v_fb_data_3_13;
  wire [31 : 0] v_fb_data_3_13_D_IN;
  wire v_fb_data_3_13_EN;

  // register v_fb_data_3_14
  reg [31 : 0] v_fb_data_3_14;
  wire [31 : 0] v_fb_data_3_14_D_IN;
  wire v_fb_data_3_14_EN;

  // register v_fb_data_3_15
  reg [31 : 0] v_fb_data_3_15;
  wire [31 : 0] v_fb_data_3_15_D_IN;
  wire v_fb_data_3_15_EN;

  // register v_fb_data_3_2
  reg [31 : 0] v_fb_data_3_2;
  wire [31 : 0] v_fb_data_3_2_D_IN;
  wire v_fb_data_3_2_EN;

  // register v_fb_data_3_3
  reg [31 : 0] v_fb_data_3_3;
  wire [31 : 0] v_fb_data_3_3_D_IN;
  wire v_fb_data_3_3_EN;

  // register v_fb_data_3_4
  reg [31 : 0] v_fb_data_3_4;
  wire [31 : 0] v_fb_data_3_4_D_IN;
  wire v_fb_data_3_4_EN;

  // register v_fb_data_3_5
  reg [31 : 0] v_fb_data_3_5;
  wire [31 : 0] v_fb_data_3_5_D_IN;
  wire v_fb_data_3_5_EN;

  // register v_fb_data_3_6
  reg [31 : 0] v_fb_data_3_6;
  wire [31 : 0] v_fb_data_3_6_D_IN;
  wire v_fb_data_3_6_EN;

  // register v_fb_data_3_7
  reg [31 : 0] v_fb_data_3_7;
  wire [31 : 0] v_fb_data_3_7_D_IN;
  wire v_fb_data_3_7_EN;

  // register v_fb_data_3_8
  reg [31 : 0] v_fb_data_3_8;
  wire [31 : 0] v_fb_data_3_8_D_IN;
  wire v_fb_data_3_8_EN;

  // register v_fb_data_3_9
  reg [31 : 0] v_fb_data_3_9;
  wire [31 : 0] v_fb_data_3_9_D_IN;
  wire v_fb_data_3_9_EN;

  // register v_fb_err_0
  reg v_fb_err_0;
  wire v_fb_err_0_D_IN, v_fb_err_0_EN;

  // register v_fb_err_1
  reg v_fb_err_1;
  wire v_fb_err_1_D_IN, v_fb_err_1_EN;

  // register v_fb_err_2
  reg v_fb_err_2;
  wire v_fb_err_2_D_IN, v_fb_err_2_EN;

  // register v_fb_err_3
  reg v_fb_err_3;
  wire v_fb_err_3_D_IN, v_fb_err_3_EN;

  // register v_fb_line_valid_0
  reg v_fb_line_valid_0;
  reg v_fb_line_valid_0_D_IN;
  wire v_fb_line_valid_0_EN;

  // register v_fb_line_valid_1
  reg v_fb_line_valid_1;
  reg v_fb_line_valid_1_D_IN;
  wire v_fb_line_valid_1_EN;

  // register v_fb_line_valid_2
  reg v_fb_line_valid_2;
  reg v_fb_line_valid_2_D_IN;
  wire v_fb_line_valid_2_EN;

  // register v_fb_line_valid_3
  reg v_fb_line_valid_3;
  reg v_fb_line_valid_3_D_IN;
  wire v_fb_line_valid_3_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_print_stats,
       CAN_FIRE_ma_fill_from_memory,
       CAN_FIRE_ma_perform_release,
       CAN_FIRE_mav_allocate_line,
       CAN_FIRE_mav_polling_response,
       WILL_FIRE_RL_rl_print_stats,
       WILL_FIRE_ma_fill_from_memory,
       WILL_FIRE_ma_perform_release,
       WILL_FIRE_mav_allocate_line,
       WILL_FIRE_mav_polling_response;

  // inputs to muxes for submodule ports
  wire MUX_v_fb_addr_valid_0_write_1__SEL_1,
       MUX_v_fb_addr_valid_0_write_1__SEL_2,
       MUX_v_fb_addr_valid_1_write_1__SEL_1,
       MUX_v_fb_addr_valid_1_write_1__SEL_2,
       MUX_v_fb_addr_valid_2_write_1__SEL_1,
       MUX_v_fb_addr_valid_2_write_1__SEL_2,
       MUX_v_fb_addr_valid_3_write_1__SEL_1,
       MUX_v_fb_addr_valid_3_write_1__SEL_2,
       MUX_v_fb_line_valid_0_write_1__SEL_3,
       MUX_v_fb_line_valid_1_write_1__SEL_3,
       MUX_v_fb_line_valid_2_write_1__SEL_3,
       MUX_v_fb_line_valid_3_write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d290;
  reg TASK_testplusargs___d291;
  reg TASK_testplusargs___d292;
  reg [63 : 0] v__h15283;
  reg TASK_testplusargs___d162;
  reg TASK_testplusargs___d163;
  reg TASK_testplusargs___d164;
  reg [63 : 0] v__h13409;
  reg TASK_testplusargs___d1;
  reg TASK_testplusargs___d2;
  reg TASK_testplusargs___d3;
  reg [63 : 0] v__h3978;
  reg TASK_testplusargs___d51;
  reg TASK_testplusargs___d52;
  reg TASK_testplusargs___d53;
  reg [63 : 0] v__h11205;
  reg TASK_testplusargs___d57;
  reg TASK_testplusargs___d58;
  reg TASK_testplusargs___d59;
  reg [63 : 0] v__h11344;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] lv_selected_word__h15720,
	       lv_selected_word__h15773,
	       lv_selected_word__h15826,
	       lv_selected_word__h15879,
	       spliced_bits__h13554,
	       spliced_bits__h13583,
	       spliced_bits__h13612,
	       spliced_bits__h13641,
	       spliced_bits__h13670,
	       spliced_bits__h13699,
	       spliced_bits__h13728,
	       spliced_bits__h13757,
	       spliced_bits__h13786,
	       spliced_bits__h13815,
	       spliced_bits__h13844,
	       spliced_bits__h13873,
	       spliced_bits__h13902,
	       spliced_bits__h13931,
	       spliced_bits__h13960,
	       spliced_bits__h13989,
	       x_mv_release_info_address__h13447;
  reg x_mv_release_info_err__h13448;
  wire [511 : 0] x_mv_release_info_dataline__h13446;
  wire [31 : 0] IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d329,
		IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d330,
		y_avValue_word__h15939;
  wire [15 : 0] x__h13173, x__h13201;
  wire [3 : 0] IF_v_fb_addr_0_72_BITS_31_TO_6_06_EQ_mav_polli_ETC___d309,
	       _theResult____h15211,
	       lv_current_bank__h11435;
  wire [1 : 0] x__h11108, x__h15031;
  wire IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d312,
       IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d317,
       IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d313,
       IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d318,
       IF_v_fb_addr_3_75_BITS_31_TO_6_96_EQ_mav_polli_ETC___d314,
       mav_polling_response_fill_AND_v_fb_addr_3_75_B_ETC___d339,
       y_avValue_err__h15938;

  // value method mv_fbfull
  assign mv_fbfull =
	     v_fb_addr_valid_0 && v_fb_addr_valid_1 && v_fb_addr_valid_2 &&
	     v_fb_addr_valid_3 ;

  // value method mv_fbempty
  assign mv_fbempty =
	     !v_fb_addr_valid_0 && !v_fb_addr_valid_1 && !v_fb_addr_valid_2 &&
	     !v_fb_addr_valid_3 ;

  // value method mv_fbhead_valid
  always@(rg_fbhead or
	  v_fb_line_valid_0 or
	  v_fb_line_valid_1 or v_fb_line_valid_2 or v_fb_line_valid_3)
  begin
    case (rg_fbhead)
      2'd0: mv_fbhead_valid = v_fb_line_valid_0;
      2'd1: mv_fbhead_valid = v_fb_line_valid_1;
      2'd2: mv_fbhead_valid = v_fb_line_valid_2;
      2'd3: mv_fbhead_valid = v_fb_line_valid_3;
    endcase
  end

  // actionvalue method mav_allocate_line
  assign mav_allocate_line = rg_fbtail ;
  assign RDY_mav_allocate_line = 1'd1 ;
  assign CAN_FIRE_mav_allocate_line = 1'd1 ;
  assign WILL_FIRE_mav_allocate_line = EN_mav_allocate_line ;

  // action method ma_fill_from_memory
  assign RDY_ma_fill_from_memory = 1'd1 ;
  assign CAN_FIRE_ma_fill_from_memory = 1'd1 ;
  assign WILL_FIRE_ma_fill_from_memory = EN_ma_fill_from_memory ;

  // value method mv_release_info
  assign mv_release_info =
	     { x_mv_release_info_dataline__h13446,
	       x_mv_release_info_address__h13447,
	       x_mv_release_info_err__h13448 } ;
  assign RDY_mv_release_info = 1'd1 ;

  // action method ma_perform_release
  assign RDY_ma_perform_release = 1'd1 ;
  assign CAN_FIRE_ma_perform_release = 1'd1 ;
  assign WILL_FIRE_ma_perform_release = EN_ma_perform_release ;

  // actionvalue method mav_polling_response
  assign mav_polling_response =
	     { y_avValue_err__h15938,
	       y_avValue_word__h15939,
	       _theResult____h15211,
	       _theResult____h15211 != 4'd0,
	       IF_v_fb_addr_3_75_BITS_31_TO_6_96_EQ_mav_polli_ETC___d314 ||
	       mav_polling_response_fill_AND_v_fb_addr_3_75_B_ETC___d339 } ;
  assign RDY_mav_polling_response = 1'd1 ;
  assign CAN_FIRE_mav_polling_response = 1'd1 ;
  assign WILL_FIRE_mav_polling_response = EN_mav_polling_response ;

  // rule RL_rl_print_stats
  assign CAN_FIRE_RL_rl_print_stats = 1'd1 ;
  assign WILL_FIRE_RL_rl_print_stats = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_v_fb_addr_valid_0_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 2'd0 ;
  assign MUX_v_fb_addr_valid_0_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ;
  assign MUX_v_fb_addr_valid_1_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 2'd1 ;
  assign MUX_v_fb_addr_valid_1_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ;
  assign MUX_v_fb_addr_valid_2_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 2'd2 ;
  assign MUX_v_fb_addr_valid_2_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ;
  assign MUX_v_fb_addr_valid_3_write_1__SEL_1 =
	     EN_ma_perform_release && rg_fbhead == 2'd3 ;
  assign MUX_v_fb_addr_valid_3_write_1__SEL_2 =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ;
  assign MUX_v_fb_line_valid_0_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd0 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_1_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd1 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_2_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd2 &&
	     ma_fill_from_memory_mem_resp[1] ;
  assign MUX_v_fb_line_valid_3_write_1__SEL_3 =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd3 &&
	     ma_fill_from_memory_mem_resp[1] ;

  // register rg_fb_enables
  assign rg_fb_enables_D_IN =
	     ma_fill_from_memory_mem_resp[1] ? 16'd0 : x__h13173 ;
  assign rg_fb_enables_EN = EN_ma_fill_from_memory ;

  // register rg_fbhead
  assign rg_fbhead_D_IN = (rg_fbhead == 2'd3) ? 2'd0 : x__h15031 ;
  assign rg_fbhead_EN = EN_ma_perform_release ;

  // register rg_fbtail
  assign rg_fbtail_D_IN = (rg_fbtail == 2'd3) ? 2'd0 : x__h11108 ;
  assign rg_fbtail_EN = EN_mav_allocate_line ;

  // register rg_next_bank
  assign rg_next_bank_D_IN = lv_current_bank__h11435 + 4'd1 ;
  assign rg_next_bank_EN = EN_ma_fill_from_memory ;

  // register v_fb_addr_0
  assign v_fb_addr_0_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_0_EN = MUX_v_fb_addr_valid_0_write_1__SEL_2 ;

  // register v_fb_addr_1
  assign v_fb_addr_1_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_1_EN = MUX_v_fb_addr_valid_1_write_1__SEL_2 ;

  // register v_fb_addr_2
  assign v_fb_addr_2_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_2_EN = MUX_v_fb_addr_valid_2_write_1__SEL_2 ;

  // register v_fb_addr_3
  assign v_fb_addr_3_D_IN = mav_allocate_line_address ;
  assign v_fb_addr_3_EN = MUX_v_fb_addr_valid_3_write_1__SEL_2 ;

  // register v_fb_addr_valid_0
  assign v_fb_addr_valid_0_D_IN = !MUX_v_fb_addr_valid_0_write_1__SEL_1 ;
  assign v_fb_addr_valid_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_perform_release && rg_fbhead == 2'd0 ;

  // register v_fb_addr_valid_1
  assign v_fb_addr_valid_1_D_IN = !MUX_v_fb_addr_valid_1_write_1__SEL_1 ;
  assign v_fb_addr_valid_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_perform_release && rg_fbhead == 2'd1 ;

  // register v_fb_addr_valid_2
  assign v_fb_addr_valid_2_D_IN = !MUX_v_fb_addr_valid_2_write_1__SEL_1 ;
  assign v_fb_addr_valid_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_perform_release && rg_fbhead == 2'd2 ;

  // register v_fb_addr_valid_3
  assign v_fb_addr_valid_3_D_IN = !MUX_v_fb_addr_valid_3_write_1__SEL_1 ;
  assign v_fb_addr_valid_3_EN =
	     EN_ma_perform_release && rg_fbhead == 2'd3 ||
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ;

  // register v_fb_data_0_0
  assign v_fb_data_0_0_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[31:0] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_1
  assign v_fb_data_0_1_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[63:32] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_10
  assign v_fb_data_0_10_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[351:320] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_11
  assign v_fb_data_0_11_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[383:352] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_12
  assign v_fb_data_0_12_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[415:384] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_13
  assign v_fb_data_0_13_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[447:416] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_14
  assign v_fb_data_0_14_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[479:448] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_15
  assign v_fb_data_0_15_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[511:480] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_2
  assign v_fb_data_0_2_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[95:64] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_3
  assign v_fb_data_0_3_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[127:96] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_4
  assign v_fb_data_0_4_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[159:128] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_5
  assign v_fb_data_0_5_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[191:160] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_6
  assign v_fb_data_0_6_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[223:192] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_7
  assign v_fb_data_0_7_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[255:224] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_8
  assign v_fb_data_0_8_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[287:256] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_0_9
  assign v_fb_data_0_9_D_IN =
	     MUX_v_fb_addr_valid_0_write_1__SEL_2 ?
	       mav_allocate_line_dataline[319:288] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_0_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 2'd0 ;

  // register v_fb_data_1_0
  assign v_fb_data_1_0_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[31:0] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_1
  assign v_fb_data_1_1_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[63:32] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_10
  assign v_fb_data_1_10_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[351:320] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_11
  assign v_fb_data_1_11_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[383:352] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_12
  assign v_fb_data_1_12_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[415:384] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_13
  assign v_fb_data_1_13_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[447:416] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_14
  assign v_fb_data_1_14_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[479:448] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_15
  assign v_fb_data_1_15_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[511:480] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_2
  assign v_fb_data_1_2_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[95:64] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_3
  assign v_fb_data_1_3_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[127:96] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_4
  assign v_fb_data_1_4_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[159:128] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_5
  assign v_fb_data_1_5_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[191:160] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_6
  assign v_fb_data_1_6_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[223:192] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_7
  assign v_fb_data_1_7_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[255:224] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_8
  assign v_fb_data_1_8_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[287:256] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_1_9
  assign v_fb_data_1_9_D_IN =
	     MUX_v_fb_addr_valid_1_write_1__SEL_2 ?
	       mav_allocate_line_dataline[319:288] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_1_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 2'd1 ;

  // register v_fb_data_2_0
  assign v_fb_data_2_0_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[31:0] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_1
  assign v_fb_data_2_1_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[63:32] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_10
  assign v_fb_data_2_10_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[351:320] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_11
  assign v_fb_data_2_11_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[383:352] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_12
  assign v_fb_data_2_12_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[415:384] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_13
  assign v_fb_data_2_13_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[447:416] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_14
  assign v_fb_data_2_14_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[479:448] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_15
  assign v_fb_data_2_15_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[511:480] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_2
  assign v_fb_data_2_2_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[95:64] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_3
  assign v_fb_data_2_3_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[127:96] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_4
  assign v_fb_data_2_4_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[159:128] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_5
  assign v_fb_data_2_5_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[191:160] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_6
  assign v_fb_data_2_6_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[223:192] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_7
  assign v_fb_data_2_7_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[255:224] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_8
  assign v_fb_data_2_8_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[287:256] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_2_9
  assign v_fb_data_2_9_D_IN =
	     MUX_v_fb_addr_valid_2_write_1__SEL_2 ?
	       mav_allocate_line_dataline[319:288] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_2_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 2'd2 ;

  // register v_fb_data_3_0
  assign v_fb_data_3_0_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[31:0] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd0 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_1
  assign v_fb_data_3_1_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[63:32] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd1 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_10
  assign v_fb_data_3_10_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[351:320] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_10_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd10 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_11
  assign v_fb_data_3_11_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[383:352] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_11_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd11 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_12
  assign v_fb_data_3_12_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[415:384] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_12_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd12 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_13
  assign v_fb_data_3_13_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[447:416] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_13_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd13 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_14
  assign v_fb_data_3_14_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[479:448] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_14_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd14 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_15
  assign v_fb_data_3_15_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[511:480] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_15_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd15 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_2
  assign v_fb_data_3_2_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[95:64] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd2 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_3
  assign v_fb_data_3_3_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[127:96] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_3_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd3 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_4
  assign v_fb_data_3_4_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[159:128] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_4_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd4 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_5
  assign v_fb_data_3_5_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[191:160] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_5_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd5 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_6
  assign v_fb_data_3_6_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[223:192] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_6_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd6 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_7
  assign v_fb_data_3_7_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[255:224] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_7_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd7 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_8
  assign v_fb_data_3_8_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[287:256] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_8_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd8 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_data_3_9
  assign v_fb_data_3_9_D_IN =
	     MUX_v_fb_addr_valid_3_write_1__SEL_2 ?
	       mav_allocate_line_dataline[319:288] :
	       ma_fill_from_memory_mem_resp[33:2] ;
  assign v_fb_data_3_9_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && lv_current_bank__h11435 == 4'd9 &&
	     ma_fill_from_memory_fbindex == 2'd3 ;

  // register v_fb_err_0
  assign v_fb_err_0_D_IN =
	     !MUX_v_fb_addr_valid_0_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_0_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd0 ||
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ;

  // register v_fb_err_1
  assign v_fb_err_1_D_IN =
	     !MUX_v_fb_addr_valid_1_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_1_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd1 ||
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ;

  // register v_fb_err_2
  assign v_fb_err_2_D_IN =
	     !MUX_v_fb_addr_valid_2_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_2_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd2 ||
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ;

  // register v_fb_err_3
  assign v_fb_err_3_D_IN =
	     !MUX_v_fb_addr_valid_3_write_1__SEL_2 &&
	     ma_fill_from_memory_mem_resp[0] ;
  assign v_fb_err_3_EN =
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd3 ||
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ;

  // register v_fb_line_valid_0
  always@(MUX_v_fb_addr_valid_0_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_0_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_0_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_0_write_1__SEL_1: v_fb_line_valid_0_D_IN = 1'd0;
    MUX_v_fb_addr_valid_0_write_1__SEL_2:
	v_fb_line_valid_0_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_0_write_1__SEL_3: v_fb_line_valid_0_D_IN = 1'd1;
    default: v_fb_line_valid_0_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_0_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd0 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd0 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 2'd0 ;

  // register v_fb_line_valid_1
  always@(MUX_v_fb_addr_valid_1_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_1_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_1_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_1_write_1__SEL_1: v_fb_line_valid_1_D_IN = 1'd0;
    MUX_v_fb_addr_valid_1_write_1__SEL_2:
	v_fb_line_valid_1_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_1_write_1__SEL_3: v_fb_line_valid_1_D_IN = 1'd1;
    default: v_fb_line_valid_1_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_1_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd1 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd1 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 2'd1 ;

  // register v_fb_line_valid_2
  always@(MUX_v_fb_addr_valid_2_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_2_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_2_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_2_write_1__SEL_1: v_fb_line_valid_2_D_IN = 1'd0;
    MUX_v_fb_addr_valid_2_write_1__SEL_2:
	v_fb_line_valid_2_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_2_write_1__SEL_3: v_fb_line_valid_2_D_IN = 1'd1;
    default: v_fb_line_valid_2_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_2_EN =
	     EN_mav_allocate_line && rg_fbtail == 2'd2 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd2 &&
	     ma_fill_from_memory_mem_resp[1] ||
	     EN_ma_perform_release && rg_fbhead == 2'd2 ;

  // register v_fb_line_valid_3
  always@(MUX_v_fb_addr_valid_3_write_1__SEL_1 or
	  MUX_v_fb_addr_valid_3_write_1__SEL_2 or
	  mav_allocate_line_from_ram or MUX_v_fb_line_valid_3_write_1__SEL_3)
  case (1'b1)
    MUX_v_fb_addr_valid_3_write_1__SEL_1: v_fb_line_valid_3_D_IN = 1'd0;
    MUX_v_fb_addr_valid_3_write_1__SEL_2:
	v_fb_line_valid_3_D_IN = mav_allocate_line_from_ram;
    MUX_v_fb_line_valid_3_write_1__SEL_3: v_fb_line_valid_3_D_IN = 1'd1;
    default: v_fb_line_valid_3_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign v_fb_line_valid_3_EN =
	     EN_ma_perform_release && rg_fbhead == 2'd3 ||
	     EN_mav_allocate_line && rg_fbtail == 2'd3 ||
	     EN_ma_fill_from_memory && ma_fill_from_memory_fbindex == 2'd3 &&
	     ma_fill_from_memory_mem_resp[1] ;

  // remaining internal signals
  assign IF_v_fb_addr_0_72_BITS_31_TO_6_06_EQ_mav_polli_ETC___d309 =
	     (v_fb_addr_0[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_0) ?
	       4'd1 :
	       4'd0 ;
  assign IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d312 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       v_fb_line_valid_1 :
	       IF_v_fb_addr_0_72_BITS_31_TO_6_06_EQ_mav_polli_ETC___d309[0] &&
	       v_fb_line_valid_0 ;
  assign IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d317 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       v_fb_err_1 :
	       v_fb_err_0 ;
  assign IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d329 =
	     (v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_1) ?
	       lv_selected_word__h15826 :
	       lv_selected_word__h15879 ;
  assign IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d313 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       v_fb_line_valid_2 :
	       IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d312 ;
  assign IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d318 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       v_fb_err_2 :
	       IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d317 ;
  assign IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d330 =
	     (v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_2) ?
	       lv_selected_word__h15773 :
	       IF_v_fb_addr_1_73_BITS_31_TO_6_03_EQ_mav_polli_ETC___d329 ;
  assign IF_v_fb_addr_3_75_BITS_31_TO_6_96_EQ_mav_polli_ETC___d314 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       v_fb_line_valid_3 :
	       IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d313 ;
  assign _theResult____h15211 =
	     { v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_3,
	       v_fb_addr_2[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_2,
	       v_fb_addr_1[31:6] == mav_polling_response_address[31:6] &&
	       v_fb_addr_valid_1,
	       IF_v_fb_addr_0_72_BITS_31_TO_6_06_EQ_mav_polli_ETC___d309[0] } ;
  assign lv_current_bank__h11435 =
	     (rg_fb_enables == 16'd0) ?
	       ma_fill_from_memory_init_bank :
	       rg_next_bank ;
  assign mav_polling_response_fill_AND_v_fb_addr_3_75_B_ETC___d339 =
	     mav_polling_response_fill &&
	     _theResult____h15211[mav_polling_response_fbindex] &&
	     rg_fb_enables[mav_polling_response_address[5:2]] ;
  assign x__h11108 = rg_fbtail + 2'd1 ;
  assign x__h13173 = rg_fb_enables | x__h13201 ;
  assign x__h13201 = 16'd1 << lv_current_bank__h11435 ;
  assign x__h15031 = rg_fbhead + 2'd1 ;
  assign x_mv_release_info_dataline__h13446 =
	     { spliced_bits__h13554,
	       spliced_bits__h13583,
	       spliced_bits__h13612,
	       spliced_bits__h13641,
	       spliced_bits__h13670,
	       spliced_bits__h13699,
	       spliced_bits__h13728,
	       spliced_bits__h13757,
	       spliced_bits__h13786,
	       spliced_bits__h13815,
	       spliced_bits__h13844,
	       spliced_bits__h13873,
	       spliced_bits__h13902,
	       spliced_bits__h13931,
	       spliced_bits__h13960,
	       spliced_bits__h13989 } ;
  assign y_avValue_err__h15938 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       v_fb_err_3 :
	       IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d318 ;
  assign y_avValue_word__h15939 =
	     (v_fb_addr_3[31:6] == mav_polling_response_address[31:6] &&
	      v_fb_addr_valid_3) ?
	       lv_selected_word__h15720 :
	       IF_v_fb_addr_2_74_BITS_31_TO_6_00_EQ_mav_polli_ETC___d330 ;
  always@(rg_fbhead or
	  v_fb_data_0_0 or v_fb_data_1_0 or v_fb_data_2_0 or v_fb_data_3_0)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13989 = v_fb_data_0_0;
      2'd1: spliced_bits__h13989 = v_fb_data_1_0;
      2'd2: spliced_bits__h13989 = v_fb_data_2_0;
      2'd3: spliced_bits__h13989 = v_fb_data_3_0;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_14 or
	  v_fb_data_1_14 or v_fb_data_2_14 or v_fb_data_3_14)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13583 = v_fb_data_0_14;
      2'd1: spliced_bits__h13583 = v_fb_data_1_14;
      2'd2: spliced_bits__h13583 = v_fb_data_2_14;
      2'd3: spliced_bits__h13583 = v_fb_data_3_14;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_13 or
	  v_fb_data_1_13 or v_fb_data_2_13 or v_fb_data_3_13)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13612 = v_fb_data_0_13;
      2'd1: spliced_bits__h13612 = v_fb_data_1_13;
      2'd2: spliced_bits__h13612 = v_fb_data_2_13;
      2'd3: spliced_bits__h13612 = v_fb_data_3_13;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_12 or
	  v_fb_data_1_12 or v_fb_data_2_12 or v_fb_data_3_12)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13641 = v_fb_data_0_12;
      2'd1: spliced_bits__h13641 = v_fb_data_1_12;
      2'd2: spliced_bits__h13641 = v_fb_data_2_12;
      2'd3: spliced_bits__h13641 = v_fb_data_3_12;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_10 or
	  v_fb_data_1_10 or v_fb_data_2_10 or v_fb_data_3_10)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13699 = v_fb_data_0_10;
      2'd1: spliced_bits__h13699 = v_fb_data_1_10;
      2'd2: spliced_bits__h13699 = v_fb_data_2_10;
      2'd3: spliced_bits__h13699 = v_fb_data_3_10;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_11 or
	  v_fb_data_1_11 or v_fb_data_2_11 or v_fb_data_3_11)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13670 = v_fb_data_0_11;
      2'd1: spliced_bits__h13670 = v_fb_data_1_11;
      2'd2: spliced_bits__h13670 = v_fb_data_2_11;
      2'd3: spliced_bits__h13670 = v_fb_data_3_11;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_9 or v_fb_data_1_9 or v_fb_data_2_9 or v_fb_data_3_9)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13728 = v_fb_data_0_9;
      2'd1: spliced_bits__h13728 = v_fb_data_1_9;
      2'd2: spliced_bits__h13728 = v_fb_data_2_9;
      2'd3: spliced_bits__h13728 = v_fb_data_3_9;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_8 or v_fb_data_1_8 or v_fb_data_2_8 or v_fb_data_3_8)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13757 = v_fb_data_0_8;
      2'd1: spliced_bits__h13757 = v_fb_data_1_8;
      2'd2: spliced_bits__h13757 = v_fb_data_2_8;
      2'd3: spliced_bits__h13757 = v_fb_data_3_8;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_7 or v_fb_data_1_7 or v_fb_data_2_7 or v_fb_data_3_7)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13786 = v_fb_data_0_7;
      2'd1: spliced_bits__h13786 = v_fb_data_1_7;
      2'd2: spliced_bits__h13786 = v_fb_data_2_7;
      2'd3: spliced_bits__h13786 = v_fb_data_3_7;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_5 or v_fb_data_1_5 or v_fb_data_2_5 or v_fb_data_3_5)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13844 = v_fb_data_0_5;
      2'd1: spliced_bits__h13844 = v_fb_data_1_5;
      2'd2: spliced_bits__h13844 = v_fb_data_2_5;
      2'd3: spliced_bits__h13844 = v_fb_data_3_5;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_6 or v_fb_data_1_6 or v_fb_data_2_6 or v_fb_data_3_6)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13815 = v_fb_data_0_6;
      2'd1: spliced_bits__h13815 = v_fb_data_1_6;
      2'd2: spliced_bits__h13815 = v_fb_data_2_6;
      2'd3: spliced_bits__h13815 = v_fb_data_3_6;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_4 or v_fb_data_1_4 or v_fb_data_2_4 or v_fb_data_3_4)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13873 = v_fb_data_0_4;
      2'd1: spliced_bits__h13873 = v_fb_data_1_4;
      2'd2: spliced_bits__h13873 = v_fb_data_2_4;
      2'd3: spliced_bits__h13873 = v_fb_data_3_4;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_3 or v_fb_data_1_3 or v_fb_data_2_3 or v_fb_data_3_3)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13902 = v_fb_data_0_3;
      2'd1: spliced_bits__h13902 = v_fb_data_1_3;
      2'd2: spliced_bits__h13902 = v_fb_data_2_3;
      2'd3: spliced_bits__h13902 = v_fb_data_3_3;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_2 or v_fb_data_1_2 or v_fb_data_2_2 or v_fb_data_3_2)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13931 = v_fb_data_0_2;
      2'd1: spliced_bits__h13931 = v_fb_data_1_2;
      2'd2: spliced_bits__h13931 = v_fb_data_2_2;
      2'd3: spliced_bits__h13931 = v_fb_data_3_2;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_addr_0 or v_fb_addr_1 or v_fb_addr_2 or v_fb_addr_3)
  begin
    case (rg_fbhead)
      2'd0: x_mv_release_info_address__h13447 = v_fb_addr_0;
      2'd1: x_mv_release_info_address__h13447 = v_fb_addr_1;
      2'd2: x_mv_release_info_address__h13447 = v_fb_addr_2;
      2'd3: x_mv_release_info_address__h13447 = v_fb_addr_3;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_1 or v_fb_data_1_1 or v_fb_data_2_1 or v_fb_data_3_1)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13960 = v_fb_data_0_1;
      2'd1: spliced_bits__h13960 = v_fb_data_1_1;
      2'd2: spliced_bits__h13960 = v_fb_data_2_1;
      2'd3: spliced_bits__h13960 = v_fb_data_3_1;
    endcase
  end
  always@(rg_fbhead or v_fb_err_0 or v_fb_err_1 or v_fb_err_2 or v_fb_err_3)
  begin
    case (rg_fbhead)
      2'd0: x_mv_release_info_err__h13448 = v_fb_err_0;
      2'd1: x_mv_release_info_err__h13448 = v_fb_err_1;
      2'd2: x_mv_release_info_err__h13448 = v_fb_err_2;
      2'd3: x_mv_release_info_err__h13448 = v_fb_err_3;
    endcase
  end
  always@(rg_fbhead or
	  v_fb_data_0_15 or
	  v_fb_data_1_15 or v_fb_data_2_15 or v_fb_data_3_15)
  begin
    case (rg_fbhead)
      2'd0: spliced_bits__h13554 = v_fb_data_0_15;
      2'd1: spliced_bits__h13554 = v_fb_data_1_15;
      2'd2: spliced_bits__h13554 = v_fb_data_2_15;
      2'd3: spliced_bits__h13554 = v_fb_data_3_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_3_0 or
	  v_fb_data_3_1 or
	  v_fb_data_3_2 or
	  v_fb_data_3_3 or
	  v_fb_data_3_4 or
	  v_fb_data_3_5 or
	  v_fb_data_3_6 or
	  v_fb_data_3_7 or
	  v_fb_data_3_8 or
	  v_fb_data_3_9 or
	  v_fb_data_3_10 or
	  v_fb_data_3_11 or
	  v_fb_data_3_12 or
	  v_fb_data_3_13 or v_fb_data_3_14 or v_fb_data_3_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h15720 = v_fb_data_3_0;
      4'd1: lv_selected_word__h15720 = v_fb_data_3_1;
      4'd2: lv_selected_word__h15720 = v_fb_data_3_2;
      4'd3: lv_selected_word__h15720 = v_fb_data_3_3;
      4'd4: lv_selected_word__h15720 = v_fb_data_3_4;
      4'd5: lv_selected_word__h15720 = v_fb_data_3_5;
      4'd6: lv_selected_word__h15720 = v_fb_data_3_6;
      4'd7: lv_selected_word__h15720 = v_fb_data_3_7;
      4'd8: lv_selected_word__h15720 = v_fb_data_3_8;
      4'd9: lv_selected_word__h15720 = v_fb_data_3_9;
      4'd10: lv_selected_word__h15720 = v_fb_data_3_10;
      4'd11: lv_selected_word__h15720 = v_fb_data_3_11;
      4'd12: lv_selected_word__h15720 = v_fb_data_3_12;
      4'd13: lv_selected_word__h15720 = v_fb_data_3_13;
      4'd14: lv_selected_word__h15720 = v_fb_data_3_14;
      4'd15: lv_selected_word__h15720 = v_fb_data_3_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_2_0 or
	  v_fb_data_2_1 or
	  v_fb_data_2_2 or
	  v_fb_data_2_3 or
	  v_fb_data_2_4 or
	  v_fb_data_2_5 or
	  v_fb_data_2_6 or
	  v_fb_data_2_7 or
	  v_fb_data_2_8 or
	  v_fb_data_2_9 or
	  v_fb_data_2_10 or
	  v_fb_data_2_11 or
	  v_fb_data_2_12 or
	  v_fb_data_2_13 or v_fb_data_2_14 or v_fb_data_2_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h15773 = v_fb_data_2_0;
      4'd1: lv_selected_word__h15773 = v_fb_data_2_1;
      4'd2: lv_selected_word__h15773 = v_fb_data_2_2;
      4'd3: lv_selected_word__h15773 = v_fb_data_2_3;
      4'd4: lv_selected_word__h15773 = v_fb_data_2_4;
      4'd5: lv_selected_word__h15773 = v_fb_data_2_5;
      4'd6: lv_selected_word__h15773 = v_fb_data_2_6;
      4'd7: lv_selected_word__h15773 = v_fb_data_2_7;
      4'd8: lv_selected_word__h15773 = v_fb_data_2_8;
      4'd9: lv_selected_word__h15773 = v_fb_data_2_9;
      4'd10: lv_selected_word__h15773 = v_fb_data_2_10;
      4'd11: lv_selected_word__h15773 = v_fb_data_2_11;
      4'd12: lv_selected_word__h15773 = v_fb_data_2_12;
      4'd13: lv_selected_word__h15773 = v_fb_data_2_13;
      4'd14: lv_selected_word__h15773 = v_fb_data_2_14;
      4'd15: lv_selected_word__h15773 = v_fb_data_2_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_1_0 or
	  v_fb_data_1_1 or
	  v_fb_data_1_2 or
	  v_fb_data_1_3 or
	  v_fb_data_1_4 or
	  v_fb_data_1_5 or
	  v_fb_data_1_6 or
	  v_fb_data_1_7 or
	  v_fb_data_1_8 or
	  v_fb_data_1_9 or
	  v_fb_data_1_10 or
	  v_fb_data_1_11 or
	  v_fb_data_1_12 or
	  v_fb_data_1_13 or v_fb_data_1_14 or v_fb_data_1_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h15826 = v_fb_data_1_0;
      4'd1: lv_selected_word__h15826 = v_fb_data_1_1;
      4'd2: lv_selected_word__h15826 = v_fb_data_1_2;
      4'd3: lv_selected_word__h15826 = v_fb_data_1_3;
      4'd4: lv_selected_word__h15826 = v_fb_data_1_4;
      4'd5: lv_selected_word__h15826 = v_fb_data_1_5;
      4'd6: lv_selected_word__h15826 = v_fb_data_1_6;
      4'd7: lv_selected_word__h15826 = v_fb_data_1_7;
      4'd8: lv_selected_word__h15826 = v_fb_data_1_8;
      4'd9: lv_selected_word__h15826 = v_fb_data_1_9;
      4'd10: lv_selected_word__h15826 = v_fb_data_1_10;
      4'd11: lv_selected_word__h15826 = v_fb_data_1_11;
      4'd12: lv_selected_word__h15826 = v_fb_data_1_12;
      4'd13: lv_selected_word__h15826 = v_fb_data_1_13;
      4'd14: lv_selected_word__h15826 = v_fb_data_1_14;
      4'd15: lv_selected_word__h15826 = v_fb_data_1_15;
    endcase
  end
  always@(mav_polling_response_address or
	  v_fb_data_0_0 or
	  v_fb_data_0_1 or
	  v_fb_data_0_2 or
	  v_fb_data_0_3 or
	  v_fb_data_0_4 or
	  v_fb_data_0_5 or
	  v_fb_data_0_6 or
	  v_fb_data_0_7 or
	  v_fb_data_0_8 or
	  v_fb_data_0_9 or
	  v_fb_data_0_10 or
	  v_fb_data_0_11 or
	  v_fb_data_0_12 or
	  v_fb_data_0_13 or v_fb_data_0_14 or v_fb_data_0_15)
  begin
    case (mav_polling_response_address[5:2])
      4'd0: lv_selected_word__h15879 = v_fb_data_0_0;
      4'd1: lv_selected_word__h15879 = v_fb_data_0_1;
      4'd2: lv_selected_word__h15879 = v_fb_data_0_2;
      4'd3: lv_selected_word__h15879 = v_fb_data_0_3;
      4'd4: lv_selected_word__h15879 = v_fb_data_0_4;
      4'd5: lv_selected_word__h15879 = v_fb_data_0_5;
      4'd6: lv_selected_word__h15879 = v_fb_data_0_6;
      4'd7: lv_selected_word__h15879 = v_fb_data_0_7;
      4'd8: lv_selected_word__h15879 = v_fb_data_0_8;
      4'd9: lv_selected_word__h15879 = v_fb_data_0_9;
      4'd10: lv_selected_word__h15879 = v_fb_data_0_10;
      4'd11: lv_selected_word__h15879 = v_fb_data_0_11;
      4'd12: lv_selected_word__h15879 = v_fb_data_0_12;
      4'd13: lv_selected_word__h15879 = v_fb_data_0_13;
      4'd14: lv_selected_word__h15879 = v_fb_data_0_14;
      4'd15: lv_selected_word__h15879 = v_fb_data_0_15;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_fb_enables <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_fbhead <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_fbtail <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_next_bank <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_fb_addr_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_addr_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_addr_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_data_0_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_0_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_1_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_2_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_data_3_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	v_fb_err_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_err_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_fb_line_valid_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_fb_enables_EN)
	  rg_fb_enables <= `BSV_ASSIGNMENT_DELAY rg_fb_enables_D_IN;
	if (rg_fbhead_EN) rg_fbhead <= `BSV_ASSIGNMENT_DELAY rg_fbhead_D_IN;
	if (rg_fbtail_EN) rg_fbtail <= `BSV_ASSIGNMENT_DELAY rg_fbtail_D_IN;
	if (rg_next_bank_EN)
	  rg_next_bank <= `BSV_ASSIGNMENT_DELAY rg_next_bank_D_IN;
	if (v_fb_addr_0_EN)
	  v_fb_addr_0 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_0_D_IN;
	if (v_fb_addr_1_EN)
	  v_fb_addr_1 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_1_D_IN;
	if (v_fb_addr_2_EN)
	  v_fb_addr_2 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_2_D_IN;
	if (v_fb_addr_3_EN)
	  v_fb_addr_3 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_3_D_IN;
	if (v_fb_addr_valid_0_EN)
	  v_fb_addr_valid_0 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_0_D_IN;
	if (v_fb_addr_valid_1_EN)
	  v_fb_addr_valid_1 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_1_D_IN;
	if (v_fb_addr_valid_2_EN)
	  v_fb_addr_valid_2 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_2_D_IN;
	if (v_fb_addr_valid_3_EN)
	  v_fb_addr_valid_3 <= `BSV_ASSIGNMENT_DELAY v_fb_addr_valid_3_D_IN;
	if (v_fb_data_0_0_EN)
	  v_fb_data_0_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_0_D_IN;
	if (v_fb_data_0_1_EN)
	  v_fb_data_0_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_1_D_IN;
	if (v_fb_data_0_10_EN)
	  v_fb_data_0_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_10_D_IN;
	if (v_fb_data_0_11_EN)
	  v_fb_data_0_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_11_D_IN;
	if (v_fb_data_0_12_EN)
	  v_fb_data_0_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_12_D_IN;
	if (v_fb_data_0_13_EN)
	  v_fb_data_0_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_13_D_IN;
	if (v_fb_data_0_14_EN)
	  v_fb_data_0_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_14_D_IN;
	if (v_fb_data_0_15_EN)
	  v_fb_data_0_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_15_D_IN;
	if (v_fb_data_0_2_EN)
	  v_fb_data_0_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_2_D_IN;
	if (v_fb_data_0_3_EN)
	  v_fb_data_0_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_3_D_IN;
	if (v_fb_data_0_4_EN)
	  v_fb_data_0_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_4_D_IN;
	if (v_fb_data_0_5_EN)
	  v_fb_data_0_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_5_D_IN;
	if (v_fb_data_0_6_EN)
	  v_fb_data_0_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_6_D_IN;
	if (v_fb_data_0_7_EN)
	  v_fb_data_0_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_7_D_IN;
	if (v_fb_data_0_8_EN)
	  v_fb_data_0_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_8_D_IN;
	if (v_fb_data_0_9_EN)
	  v_fb_data_0_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_0_9_D_IN;
	if (v_fb_data_1_0_EN)
	  v_fb_data_1_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_0_D_IN;
	if (v_fb_data_1_1_EN)
	  v_fb_data_1_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_1_D_IN;
	if (v_fb_data_1_10_EN)
	  v_fb_data_1_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_10_D_IN;
	if (v_fb_data_1_11_EN)
	  v_fb_data_1_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_11_D_IN;
	if (v_fb_data_1_12_EN)
	  v_fb_data_1_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_12_D_IN;
	if (v_fb_data_1_13_EN)
	  v_fb_data_1_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_13_D_IN;
	if (v_fb_data_1_14_EN)
	  v_fb_data_1_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_14_D_IN;
	if (v_fb_data_1_15_EN)
	  v_fb_data_1_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_15_D_IN;
	if (v_fb_data_1_2_EN)
	  v_fb_data_1_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_2_D_IN;
	if (v_fb_data_1_3_EN)
	  v_fb_data_1_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_3_D_IN;
	if (v_fb_data_1_4_EN)
	  v_fb_data_1_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_4_D_IN;
	if (v_fb_data_1_5_EN)
	  v_fb_data_1_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_5_D_IN;
	if (v_fb_data_1_6_EN)
	  v_fb_data_1_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_6_D_IN;
	if (v_fb_data_1_7_EN)
	  v_fb_data_1_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_7_D_IN;
	if (v_fb_data_1_8_EN)
	  v_fb_data_1_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_8_D_IN;
	if (v_fb_data_1_9_EN)
	  v_fb_data_1_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_1_9_D_IN;
	if (v_fb_data_2_0_EN)
	  v_fb_data_2_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_0_D_IN;
	if (v_fb_data_2_1_EN)
	  v_fb_data_2_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_1_D_IN;
	if (v_fb_data_2_10_EN)
	  v_fb_data_2_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_10_D_IN;
	if (v_fb_data_2_11_EN)
	  v_fb_data_2_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_11_D_IN;
	if (v_fb_data_2_12_EN)
	  v_fb_data_2_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_12_D_IN;
	if (v_fb_data_2_13_EN)
	  v_fb_data_2_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_13_D_IN;
	if (v_fb_data_2_14_EN)
	  v_fb_data_2_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_14_D_IN;
	if (v_fb_data_2_15_EN)
	  v_fb_data_2_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_15_D_IN;
	if (v_fb_data_2_2_EN)
	  v_fb_data_2_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_2_D_IN;
	if (v_fb_data_2_3_EN)
	  v_fb_data_2_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_3_D_IN;
	if (v_fb_data_2_4_EN)
	  v_fb_data_2_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_4_D_IN;
	if (v_fb_data_2_5_EN)
	  v_fb_data_2_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_5_D_IN;
	if (v_fb_data_2_6_EN)
	  v_fb_data_2_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_6_D_IN;
	if (v_fb_data_2_7_EN)
	  v_fb_data_2_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_7_D_IN;
	if (v_fb_data_2_8_EN)
	  v_fb_data_2_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_8_D_IN;
	if (v_fb_data_2_9_EN)
	  v_fb_data_2_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_2_9_D_IN;
	if (v_fb_data_3_0_EN)
	  v_fb_data_3_0 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_0_D_IN;
	if (v_fb_data_3_1_EN)
	  v_fb_data_3_1 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_1_D_IN;
	if (v_fb_data_3_10_EN)
	  v_fb_data_3_10 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_10_D_IN;
	if (v_fb_data_3_11_EN)
	  v_fb_data_3_11 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_11_D_IN;
	if (v_fb_data_3_12_EN)
	  v_fb_data_3_12 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_12_D_IN;
	if (v_fb_data_3_13_EN)
	  v_fb_data_3_13 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_13_D_IN;
	if (v_fb_data_3_14_EN)
	  v_fb_data_3_14 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_14_D_IN;
	if (v_fb_data_3_15_EN)
	  v_fb_data_3_15 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_15_D_IN;
	if (v_fb_data_3_2_EN)
	  v_fb_data_3_2 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_2_D_IN;
	if (v_fb_data_3_3_EN)
	  v_fb_data_3_3 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_3_D_IN;
	if (v_fb_data_3_4_EN)
	  v_fb_data_3_4 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_4_D_IN;
	if (v_fb_data_3_5_EN)
	  v_fb_data_3_5 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_5_D_IN;
	if (v_fb_data_3_6_EN)
	  v_fb_data_3_6 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_6_D_IN;
	if (v_fb_data_3_7_EN)
	  v_fb_data_3_7 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_7_D_IN;
	if (v_fb_data_3_8_EN)
	  v_fb_data_3_8 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_8_D_IN;
	if (v_fb_data_3_9_EN)
	  v_fb_data_3_9 <= `BSV_ASSIGNMENT_DELAY v_fb_data_3_9_D_IN;
	if (v_fb_err_0_EN)
	  v_fb_err_0 <= `BSV_ASSIGNMENT_DELAY v_fb_err_0_D_IN;
	if (v_fb_err_1_EN)
	  v_fb_err_1 <= `BSV_ASSIGNMENT_DELAY v_fb_err_1_D_IN;
	if (v_fb_err_2_EN)
	  v_fb_err_2 <= `BSV_ASSIGNMENT_DELAY v_fb_err_2_D_IN;
	if (v_fb_err_3_EN)
	  v_fb_err_3 <= `BSV_ASSIGNMENT_DELAY v_fb_err_3_D_IN;
	if (v_fb_line_valid_0_EN)
	  v_fb_line_valid_0 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_0_D_IN;
	if (v_fb_line_valid_1_EN)
	  v_fb_line_valid_1 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_1_D_IN;
	if (v_fb_line_valid_2_EN)
	  v_fb_line_valid_2 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_2_D_IN;
	if (v_fb_line_valid_3_EN)
	  v_fb_line_valid_3 <= `BSV_ASSIGNMENT_DELAY v_fb_line_valid_3_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_fb_enables = 16'hAAAA;
    rg_fbhead = 2'h2;
    rg_fbtail = 2'h2;
    rg_next_bank = 4'hA;
    v_fb_addr_0 = 32'hAAAAAAAA;
    v_fb_addr_1 = 32'hAAAAAAAA;
    v_fb_addr_2 = 32'hAAAAAAAA;
    v_fb_addr_3 = 32'hAAAAAAAA;
    v_fb_addr_valid_0 = 1'h0;
    v_fb_addr_valid_1 = 1'h0;
    v_fb_addr_valid_2 = 1'h0;
    v_fb_addr_valid_3 = 1'h0;
    v_fb_data_0_0 = 32'hAAAAAAAA;
    v_fb_data_0_1 = 32'hAAAAAAAA;
    v_fb_data_0_10 = 32'hAAAAAAAA;
    v_fb_data_0_11 = 32'hAAAAAAAA;
    v_fb_data_0_12 = 32'hAAAAAAAA;
    v_fb_data_0_13 = 32'hAAAAAAAA;
    v_fb_data_0_14 = 32'hAAAAAAAA;
    v_fb_data_0_15 = 32'hAAAAAAAA;
    v_fb_data_0_2 = 32'hAAAAAAAA;
    v_fb_data_0_3 = 32'hAAAAAAAA;
    v_fb_data_0_4 = 32'hAAAAAAAA;
    v_fb_data_0_5 = 32'hAAAAAAAA;
    v_fb_data_0_6 = 32'hAAAAAAAA;
    v_fb_data_0_7 = 32'hAAAAAAAA;
    v_fb_data_0_8 = 32'hAAAAAAAA;
    v_fb_data_0_9 = 32'hAAAAAAAA;
    v_fb_data_1_0 = 32'hAAAAAAAA;
    v_fb_data_1_1 = 32'hAAAAAAAA;
    v_fb_data_1_10 = 32'hAAAAAAAA;
    v_fb_data_1_11 = 32'hAAAAAAAA;
    v_fb_data_1_12 = 32'hAAAAAAAA;
    v_fb_data_1_13 = 32'hAAAAAAAA;
    v_fb_data_1_14 = 32'hAAAAAAAA;
    v_fb_data_1_15 = 32'hAAAAAAAA;
    v_fb_data_1_2 = 32'hAAAAAAAA;
    v_fb_data_1_3 = 32'hAAAAAAAA;
    v_fb_data_1_4 = 32'hAAAAAAAA;
    v_fb_data_1_5 = 32'hAAAAAAAA;
    v_fb_data_1_6 = 32'hAAAAAAAA;
    v_fb_data_1_7 = 32'hAAAAAAAA;
    v_fb_data_1_8 = 32'hAAAAAAAA;
    v_fb_data_1_9 = 32'hAAAAAAAA;
    v_fb_data_2_0 = 32'hAAAAAAAA;
    v_fb_data_2_1 = 32'hAAAAAAAA;
    v_fb_data_2_10 = 32'hAAAAAAAA;
    v_fb_data_2_11 = 32'hAAAAAAAA;
    v_fb_data_2_12 = 32'hAAAAAAAA;
    v_fb_data_2_13 = 32'hAAAAAAAA;
    v_fb_data_2_14 = 32'hAAAAAAAA;
    v_fb_data_2_15 = 32'hAAAAAAAA;
    v_fb_data_2_2 = 32'hAAAAAAAA;
    v_fb_data_2_3 = 32'hAAAAAAAA;
    v_fb_data_2_4 = 32'hAAAAAAAA;
    v_fb_data_2_5 = 32'hAAAAAAAA;
    v_fb_data_2_6 = 32'hAAAAAAAA;
    v_fb_data_2_7 = 32'hAAAAAAAA;
    v_fb_data_2_8 = 32'hAAAAAAAA;
    v_fb_data_2_9 = 32'hAAAAAAAA;
    v_fb_data_3_0 = 32'hAAAAAAAA;
    v_fb_data_3_1 = 32'hAAAAAAAA;
    v_fb_data_3_10 = 32'hAAAAAAAA;
    v_fb_data_3_11 = 32'hAAAAAAAA;
    v_fb_data_3_12 = 32'hAAAAAAAA;
    v_fb_data_3_13 = 32'hAAAAAAAA;
    v_fb_data_3_14 = 32'hAAAAAAAA;
    v_fb_data_3_15 = 32'hAAAAAAAA;
    v_fb_data_3_2 = 32'hAAAAAAAA;
    v_fb_data_3_3 = 32'hAAAAAAAA;
    v_fb_data_3_4 = 32'hAAAAAAAA;
    v_fb_data_3_5 = 32'hAAAAAAAA;
    v_fb_data_3_6 = 32'hAAAAAAAA;
    v_fb_data_3_7 = 32'hAAAAAAAA;
    v_fb_data_3_8 = 32'hAAAAAAAA;
    v_fb_data_3_9 = 32'hAAAAAAAA;
    v_fb_err_0 = 1'h0;
    v_fb_err_1 = 1'h0;
    v_fb_err_2 = 1'h0;
    v_fb_err_3 = 1'h0;
    v_fb_line_valid_0 = 1'h0;
    v_fb_line_valid_1 = 1'h0;
    v_fb_line_valid_2 = 1'h0;
    v_fb_line_valid_3 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d290 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d291 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  TASK_testplusargs___d292 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response)
	begin
	  v__h15283 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d290 ||
	   TASK_testplusargs___d291 && TASK_testplusargs___d292))
	$write("[%10d", v__h15283, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d290 ||
	   TASK_testplusargs___d291 && TASK_testplusargs___d292))
	$write("[%2d]ICACHE: FB: Polling: linevalid:%b blockoffset:%d",
	       id,
	       IF_v_fb_addr_3_75_BITS_31_TO_6_96_EQ_mav_polli_ETC___d314,
	       mav_polling_response_address[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_polling_response &&
	  (TASK_testplusargs___d290 ||
	   TASK_testplusargs___d291 && TASK_testplusargs___d292))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d162 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d163 = $test$plusargs("micache ");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  TASK_testplusargs___d164 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory)
	begin
	  v__h13409 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d162 ||
	   TASK_testplusargs___d163 && TASK_testplusargs___d164))
	$write("[%10d", v__h13409, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d162 ||
	   TASK_testplusargs___d163 && TASK_testplusargs___d164))
	$write("[%2d]ICACHE: FB Fill: fbindex:%d ibank:%d cbank:%d fben:%b",
	       id,
	       ma_fill_from_memory_fbindex,
	       ma_fill_from_memory_init_bank,
	       lv_current_bank__h11435,
	       rg_fb_enables);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_fill_from_memory &&
	  (TASK_testplusargs___d162 ||
	   TASK_testplusargs___d163 && TASK_testplusargs___d164))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d1 = $test$plusargs("fullverbose");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d2 = $test$plusargs("micache");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        TASK_testplusargs___d3 = $test$plusargs("l3");
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h3978 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%10d", v__h3978, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("[%2d]ICACHE: fb_full:%b fb_empty:%b fbhead:%d fbtail:%d fbheadvalid:%b",
	       id,
	       v_fb_addr_valid_0 && v_fb_addr_valid_1 && v_fb_addr_valid_2 &&
	       v_fb_addr_valid_3,
	       !v_fb_addr_valid_0 && !v_fb_addr_valid_1 &&
	       !v_fb_addr_valid_2 &&
	       !v_fb_addr_valid_3,
	       rg_fbhead,
	       rg_fbtail,
	       mv_fbhead_valid);
    if (RST_N != `BSV_RESET_VALUE)
      if (TASK_testplusargs___d1 ||
	  TASK_testplusargs___d2 && TASK_testplusargs___d3)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d51 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d52 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d53 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  v__h11205 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("[%10d", v__h11205, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("[%2d]ICACHE: FB: Allocating: fromram:%b address:%h ",
	       id,
	       mav_allocate_line_from_ram,
	       mav_allocate_line_address);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d51 ||
	   TASK_testplusargs___d52 && TASK_testplusargs___d53))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d57 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d58 = $test$plusargs("micache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  TASK_testplusargs___d59 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line)
	begin
	  v__h11344 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("[%10d", v__h11344, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("[%2d]ICACHE: FB: Allocating fbindex:%d", id, rg_fbtail);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_allocate_line &&
	  (TASK_testplusargs___d57 ||
	   TASK_testplusargs___d58 && TASK_testplusargs___d59))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkicache_fb_v2

