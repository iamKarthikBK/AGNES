//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:09:27 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// fn_alu                         O    67
// fn_alu_fn                      I     4
// fn_alu_op1                     I    32
// fn_alu_op2                     I    32
// fn_alu_op3                     I    32
// fn_alu_effective_address       I    32
// fn_alu_inst_type               I     4
// fn_alu_funct3                  I     2 unused
// fn_alu_misa_c                  I     1
// fn_alu_nextpc                  I    32
// fn_alu_prediction              I     1
// fn_alu_comp                    I     1
//
// Combinational paths from inputs to outputs:
//   (fn_alu_fn,
//    fn_alu_op1,
//    fn_alu_op2,
//    fn_alu_op3,
//    fn_alu_effective_address,
//    fn_alu_inst_type,
//    fn_alu_misa_c,
//    fn_alu_nextpc,
//    fn_alu_prediction,
//    fn_alu_comp) -> fn_alu
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_fn_alu(fn_alu_fn,
		     fn_alu_op1,
		     fn_alu_op2,
		     fn_alu_op3,
		     fn_alu_effective_address,
		     fn_alu_inst_type,
		     fn_alu_funct3,
		     fn_alu_misa_c,
		     fn_alu_nextpc,
		     fn_alu_prediction,
		     fn_alu_comp,
		     fn_alu);
  // value method fn_alu
  input  [3 : 0] fn_alu_fn;
  input  [31 : 0] fn_alu_op1;
  input  [31 : 0] fn_alu_op2;
  input  [31 : 0] fn_alu_op3;
  input  [31 : 0] fn_alu_effective_address;
  input  [3 : 0] fn_alu_inst_type;
  input  [1 : 0] fn_alu_funct3;
  input  fn_alu_misa_c;
  input  [31 : 0] fn_alu_nextpc;
  input  fn_alu_prediction;
  input  fn_alu_comp;
  output [66 : 0] fn_alu;

  // signals for module outputs
  wire [66 : 0] fn_alu;

  // remaining internal signals
  reg [31 : 0] shin__h49, x__h248;
  reg IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d183,
      branch_taken__h46;
  wire [32 : 0] fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119,
		fn_alu_fn_BIT_3_AND_shin9_BIT_31_CONCAT_shin9__q1,
		inv_op2__h38,
		x__h268;
  wire [31 : 0] incr_value__h56,
		op1_xor_op2__h39,
		redirect_pc___1__h9168,
		shift_l__h52,
		x__h9161;
  wire INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25,
       NOT_fn_alu_effective_address_BIT_1_95_OR_fn_al_ETC___d203,
       adder_z_flag__h41,
       fn_alu_effective_address_BIT_1_AND_NOT_fn_alu__ETC___d32,
       fn_alu_inst_type_EQ_2_AND_NOT_IF_fn_alu_fn_EQ__ETC___d194,
       sign__h42;

  // value method fn_alu
  assign fn_alu =
	     { fn_alu_effective_address_BIT_1_AND_NOT_fn_alu__ETC___d32,
	       x__h248,
	       x__h9161,
	       fn_alu_inst_type_EQ_2_AND_NOT_IF_fn_alu_fn_EQ__ETC___d194 &&
	       NOT_fn_alu_effective_address_BIT_1_95_OR_fn_al_ETC___d203,
	       branch_taken__h46 } ;

  // remaining internal signals
  assign INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25 =
	     ({ sign__h42 & fn_alu_op1[31], fn_alu_op1 } ^ 33'h100000000) <
	     ({ sign__h42 & fn_alu_op2[31], fn_alu_op2 } ^ 33'h100000000) ;
  assign NOT_fn_alu_effective_address_BIT_1_95_OR_fn_al_ETC___d203 =
	     !fn_alu_effective_address[1] || fn_alu_misa_c ||
	     fn_alu_inst_type != 4'd4 && fn_alu_inst_type != 4'd3 &&
	     (fn_alu_inst_type != 4'd2 ||
	      IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d183) ;
  assign adder_z_flag__h41 = ~(op1_xor_op2__h39 != 32'd0) ;
  assign fn_alu_effective_address_BIT_1_AND_NOT_fn_alu__ETC___d32 =
	     fn_alu_effective_address[1] && !fn_alu_misa_c &&
	     (fn_alu_inst_type == 4'd4 || fn_alu_inst_type == 4'd3 ||
	      fn_alu_inst_type == 4'd2 && branch_taken__h46) ;
  assign fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119 =
	     { fn_alu_fn[3] & shin__h49[31], shin__h49 } >> fn_alu_op2[4:0] |
	     ~(33'h1FFFFFFFF >> fn_alu_op2[4:0]) &
	     {33{fn_alu_fn_BIT_3_AND_shin9_BIT_31_CONCAT_shin9__q1[32]}} ;
  assign fn_alu_fn_BIT_3_AND_shin9_BIT_31_CONCAT_shin9__q1 =
	     { fn_alu_fn[3] & shin__h49[31], shin__h49 } ;
  assign fn_alu_inst_type_EQ_2_AND_NOT_IF_fn_alu_fn_EQ__ETC___d194 =
	     fn_alu_inst_type == 4'd2 &&
	     branch_taken__h46 != fn_alu_prediction ||
	     (fn_alu_inst_type == 4'd4 || fn_alu_inst_type == 4'd3) &&
	     fn_alu_nextpc != fn_alu_effective_address ;
  assign incr_value__h56 = fn_alu_comp ? 32'd2 : 32'd4 ;
  assign inv_op2__h38 = { fn_alu_op2 ^ {32{fn_alu_fn[1]}}, fn_alu_fn[1] } ;
  assign op1_xor_op2__h39 = fn_alu_op1 ^ fn_alu_op2 ;
  assign redirect_pc___1__h9168 = fn_alu_op3 + incr_value__h56 ;
  assign shift_l__h52 =
	     { fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[0],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[1],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[2],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[3],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[4],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[5],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[6],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[7],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[8],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[9],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[10],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[11],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[12],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[13],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[14],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[15],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[16],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[17],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[18],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[19],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[20],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[21],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[22],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[23],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[24],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[25],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[26],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[27],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[28],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[29],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[30],
	       fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[31] } ;
  assign sign__h42 = ~fn_alu_fn[1] ;
  assign x__h268 = { fn_alu_op1, 1'b1 } + inv_op2__h38 ;
  assign x__h9161 =
	     (fn_alu_inst_type == 4'd2 &&
	      IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d183) ?
	       redirect_pc___1__h9168 :
	       fn_alu_effective_address ;
  always@(fn_alu_fn or fn_alu_op1)
  begin
    case (fn_alu_fn)
      4'd5, 4'd11: shin__h49 = fn_alu_op1;
      default: shin__h49 =
		   { fn_alu_op1[0],
		     fn_alu_op1[1],
		     fn_alu_op1[2],
		     fn_alu_op1[3],
		     fn_alu_op1[4],
		     fn_alu_op1[5],
		     fn_alu_op1[6],
		     fn_alu_op1[7],
		     fn_alu_op1[8],
		     fn_alu_op1[9],
		     fn_alu_op1[10],
		     fn_alu_op1[11],
		     fn_alu_op1[12],
		     fn_alu_op1[13],
		     fn_alu_op1[14],
		     fn_alu_op1[15],
		     fn_alu_op1[16],
		     fn_alu_op1[17],
		     fn_alu_op1[18],
		     fn_alu_op1[19],
		     fn_alu_op1[20],
		     fn_alu_op1[21],
		     fn_alu_op1[22],
		     fn_alu_op1[23],
		     fn_alu_op1[24],
		     fn_alu_op1[25],
		     fn_alu_op1[26],
		     fn_alu_op1[27],
		     fn_alu_op1[28],
		     fn_alu_op1[29],
		     fn_alu_op1[30],
		     fn_alu_op1[31] };
    endcase
  end
  always@(fn_alu_fn or
	  INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25 or
	  adder_z_flag__h41 or op1_xor_op2__h39)
  begin
    case (fn_alu_fn)
      4'd2: branch_taken__h46 = adder_z_flag__h41;
      4'd3: branch_taken__h46 = op1_xor_op2__h39 != 32'd0;
      4'd12, 4'd14:
	  branch_taken__h46 =
	      INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25;
      default: branch_taken__h46 =
		   !INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25;
    endcase
  end
  always@(fn_alu_fn or
	  op1_xor_op2__h39 or
	  x__h268 or
	  shift_l__h52 or
	  fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119 or
	  fn_alu_op1 or
	  fn_alu_op2 or
	  INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25)
  begin
    case (fn_alu_fn)
      4'd0, 4'd10: x__h248 = x__h268[32:1];
      4'd1: x__h248 = shift_l__h52;
      4'd5, 4'd11:
	  x__h248 =
	      fn_alu_fn_BIT_3_6_AND_IF_fn_alu_fn_EQ_5_3_OR_f_ETC___d119[31:0];
      4'd6: x__h248 = fn_alu_op1 | fn_alu_op2;
      4'd7: x__h248 = fn_alu_op1 & fn_alu_op2;
      4'd12, 4'd13, 4'd14, 4'd15:
	  x__h248 =
	      { 31'd0,
		INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25 };
      default: x__h248 = op1_xor_op2__h39;
    endcase
  end
  always@(fn_alu_fn or
	  INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25 or
	  adder_z_flag__h41 or op1_xor_op2__h39)
  begin
    case (fn_alu_fn)
      4'd2:
	  IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d183 =
	      !adder_z_flag__h41;
      4'd3:
	  IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d183 =
	      op1_xor_op2__h39 == 32'd0;
      4'd12, 4'd14:
	  IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d183 =
	      !INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25;
      default: IF_fn_alu_fn_EQ_2_THEN_NOT_INV_NOT_fn_alu_op1__ETC___d183 =
		   INV_fn_alu_fn_BIT_1_7_8_AND_fn_alu_op1_BIT_31__ETC___d25;
    endcase
  end
endmodule  // module_fn_alu

