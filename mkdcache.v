//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:09:35 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_core_req_put           O     1
// get_core_resp_get              O    40
// RDY_get_core_resp_get          O     1
// get_read_mem_req_get           O    44 reg
// RDY_get_read_mem_req_get       O     1 reg
// RDY_put_read_mem_resp_put      O     1
// mv_write_mem_req               O   556 reg
// RDY_mv_write_mem_req           O     1 reg
// RDY_ma_write_mem_req_deq       O     1 reg
// RDY_put_write_mem_resp_put     O     1
// RDY_ma_curr_priv               O     1 const
// mv_perf_counters               O    13
// RDY_mv_perf_counters           O     1 const
// RDY_ma_cache_enable            O     1 const
// mv_storebuffer_empty           O     1
// RDY_mv_storebuffer_empty       O     1 const
// RDY_ma_perform_store           O     1
// mv_cacheable_store             O     1
// RDY_mv_cacheable_store         O     1 const
// mv_cache_available             O     1
// RDY_mv_cache_available         O     1 const
// mv_commit_store_ready          O     1
// RDY_mv_commit_store_ready      O     1 const
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    29
// pmp_addr_1                     I    29
// pmp_addr_2                     I    29
// pmp_addr_3                     I    29
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_core_req_put               I    71
// put_read_mem_resp_put          I    34
// put_write_mem_resp_put         I     1
// ma_curr_priv_c                 I     2
// ma_cache_enable_c              I     1
// ma_perform_store_currepoch     I     1
// EN_put_core_req_put            I     1
// EN_put_read_mem_resp_put       I     1
// EN_ma_write_mem_req_deq        I     1
// EN_put_write_mem_resp_put      I     1
// EN_ma_curr_priv                I     1
// EN_ma_cache_enable             I     1
// EN_ma_perform_store            I     1
// EN_get_core_resp_get           I     1
// EN_get_read_mem_req_get        I     1
//
// Combinational paths from inputs to outputs:
//   (put_core_req_put,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    EN_put_core_req_put,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_perf_counters
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_core_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_core_resp_get
//   EN_ma_cache_enable -> RDY_put_core_req_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache(pmp_cfg_0,
		pmp_cfg_1,
		pmp_cfg_2,
		pmp_cfg_3,
		pmp_addr_0,
		pmp_addr_1,
		pmp_addr_2,
		pmp_addr_3,
		CLK,
		RST_N,

		put_core_req_put,
		EN_put_core_req_put,
		RDY_put_core_req_put,

		EN_get_core_resp_get,
		get_core_resp_get,
		RDY_get_core_resp_get,

		EN_get_read_mem_req_get,
		get_read_mem_req_get,
		RDY_get_read_mem_req_get,

		put_read_mem_resp_put,
		EN_put_read_mem_resp_put,
		RDY_put_read_mem_resp_put,

		mv_write_mem_req,
		RDY_mv_write_mem_req,

		EN_ma_write_mem_req_deq,
		RDY_ma_write_mem_req_deq,

		put_write_mem_resp_put,
		EN_put_write_mem_resp_put,
		RDY_put_write_mem_resp_put,

		ma_curr_priv_c,
		EN_ma_curr_priv,
		RDY_ma_curr_priv,

		mv_perf_counters,
		RDY_mv_perf_counters,

		ma_cache_enable_c,
		EN_ma_cache_enable,
		RDY_ma_cache_enable,

		mv_storebuffer_empty,
		RDY_mv_storebuffer_empty,

		ma_perform_store_currepoch,
		EN_ma_perform_store,
		RDY_ma_perform_store,

		mv_cacheable_store,
		RDY_mv_cacheable_store,

		mv_cache_available,
		RDY_mv_cache_available,

		mv_commit_store_ready,
		RDY_mv_commit_store_ready);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [28 : 0] pmp_addr_0;
  input  [28 : 0] pmp_addr_1;
  input  [28 : 0] pmp_addr_2;
  input  [28 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method put_core_req_put
  input  [70 : 0] put_core_req_put;
  input  EN_put_core_req_put;
  output RDY_put_core_req_put;

  // actionvalue method get_core_resp_get
  input  EN_get_core_resp_get;
  output [39 : 0] get_core_resp_get;
  output RDY_get_core_resp_get;

  // actionvalue method get_read_mem_req_get
  input  EN_get_read_mem_req_get;
  output [43 : 0] get_read_mem_req_get;
  output RDY_get_read_mem_req_get;

  // action method put_read_mem_resp_put
  input  [33 : 0] put_read_mem_resp_put;
  input  EN_put_read_mem_resp_put;
  output RDY_put_read_mem_resp_put;

  // value method mv_write_mem_req
  output [555 : 0] mv_write_mem_req;
  output RDY_mv_write_mem_req;

  // action method ma_write_mem_req_deq
  input  EN_ma_write_mem_req_deq;
  output RDY_ma_write_mem_req_deq;

  // action method put_write_mem_resp_put
  input  put_write_mem_resp_put;
  input  EN_put_write_mem_resp_put;
  output RDY_put_write_mem_resp_put;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // value method mv_perf_counters
  output [12 : 0] mv_perf_counters;
  output RDY_mv_perf_counters;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // value method mv_storebuffer_empty
  output mv_storebuffer_empty;
  output RDY_mv_storebuffer_empty;

  // action method ma_perform_store
  input  ma_perform_store_currepoch;
  input  EN_ma_perform_store;
  output RDY_ma_perform_store;

  // value method mv_cacheable_store
  output mv_cacheable_store;
  output RDY_mv_cacheable_store;

  // value method mv_cache_available
  output mv_cache_available;
  output RDY_mv_cache_available;

  // value method mv_commit_store_ready
  output mv_commit_store_ready;
  output RDY_mv_commit_store_ready;

  // signals for module outputs
  reg mv_cacheable_store;
  wire [555 : 0] mv_write_mem_req;
  wire [43 : 0] get_read_mem_req_get;
  wire [39 : 0] get_core_resp_get;
  wire [12 : 0] mv_perf_counters;
  wire RDY_get_core_resp_get,
       RDY_get_read_mem_req_get,
       RDY_ma_cache_enable,
       RDY_ma_curr_priv,
       RDY_ma_perform_store,
       RDY_ma_write_mem_req_deq,
       RDY_mv_cache_available,
       RDY_mv_cacheable_store,
       RDY_mv_commit_store_ready,
       RDY_mv_perf_counters,
       RDY_mv_storebuffer_empty,
       RDY_mv_write_mem_req,
       RDY_put_core_req_put,
       RDY_put_read_mem_resp_put,
       RDY_put_write_mem_resp_put,
       mv_cache_available,
       mv_commit_store_ready,
       mv_storebuffer_empty;

  // inlined wires
  wire [40 : 0] ff_core_response_rv_port0__write_1,
		ff_core_response_rv_port1__read,
		ff_core_response_rv_port1__write_1,
		ff_core_response_rv_port2__read;
  wire [39 : 0] wr_fb_response_wget,
		wr_nc_response_wget,
		wr_ram_response_wget;
  wire [34 : 0] ff_read_mem_response_rv_port0__write_1,
		ff_read_mem_response_rv_port1__read,
		ff_read_mem_response_rv_port1__write_1,
		ff_read_mem_response_rv_port2__read;
  wire [1 : 0] ff_write_mem_response_rv_port0__write_1,
	       ff_write_mem_response_rv_port1__read,
	       ff_write_mem_response_rv_port1__write_1,
	       ff_write_mem_response_rv_port2__read,
	       wr_fb_state_wget,
	       wr_ram_state_wget;
  wire _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget,
       ff_core_response_rv_EN_port0__write,
       ff_read_mem_response_rv_EN_port1__write,
       rg_release_readphase_1_whas,
       wr_fault_whas,
       wr_ram_state_whas,
       wr_store_in_progress_whas,
       wr_total_fb_releases_whas,
       wr_total_io_reads_whas,
       wr_total_read_access_whas,
       wr_total_read_fb_hits_whas,
       wr_total_write_access_whas,
       wr_total_write_fb_hits_whas;

  // register ff_core_response_rv
  reg [40 : 0] ff_core_response_rv;
  wire [40 : 0] ff_core_response_rv_D_IN;
  wire ff_core_response_rv_EN;

  // register ff_hold_request_rv
  reg [71 : 0] ff_hold_request_rv;
  wire [71 : 0] ff_hold_request_rv_D_IN;
  wire ff_hold_request_rv_EN;

  // register ff_read_mem_response_rv
  reg [34 : 0] ff_read_mem_response_rv;
  wire [34 : 0] ff_read_mem_response_rv_D_IN;
  wire ff_read_mem_response_rv_EN;

  // register ff_write_mem_response_rv
  reg [1 : 0] ff_write_mem_response_rv;
  wire [1 : 0] ff_write_mem_response_rv_D_IN;
  wire ff_write_mem_response_rv_EN;

  // register m_storebuffer_rg_head
  reg m_storebuffer_rg_head;
  wire m_storebuffer_rg_head_D_IN, m_storebuffer_rg_head_EN;

  // register m_storebuffer_rg_sb_busy
  reg m_storebuffer_rg_sb_busy;
  wire m_storebuffer_rg_sb_busy_D_IN, m_storebuffer_rg_sb_busy_EN;

  // register m_storebuffer_rg_tail
  reg m_storebuffer_rg_tail;
  wire m_storebuffer_rg_tail_D_IN, m_storebuffer_rg_tail_EN;

  // register m_storebuffer_v_sb_meta_0
  reg [102 : 0] m_storebuffer_v_sb_meta_0;
  wire [102 : 0] m_storebuffer_v_sb_meta_0_D_IN;
  wire m_storebuffer_v_sb_meta_0_EN;

  // register m_storebuffer_v_sb_meta_1
  reg [102 : 0] m_storebuffer_v_sb_meta_1;
  wire [102 : 0] m_storebuffer_v_sb_meta_1_D_IN;
  wire m_storebuffer_v_sb_meta_1_EN;

  // register m_storebuffer_v_sb_valid_0
  reg m_storebuffer_v_sb_valid_0;
  wire m_storebuffer_v_sb_valid_0_D_IN, m_storebuffer_v_sb_valid_0_EN;

  // register m_storebuffer_v_sb_valid_1
  reg m_storebuffer_v_sb_valid_1;
  wire m_storebuffer_v_sb_valid_1_D_IN, m_storebuffer_v_sb_valid_1_EN;

  // register replacement_v_count_0
  reg [1 : 0] replacement_v_count_0;
  wire [1 : 0] replacement_v_count_0_D_IN;
  wire replacement_v_count_0_EN;

  // register replacement_v_count_1
  reg [1 : 0] replacement_v_count_1;
  wire [1 : 0] replacement_v_count_1_D_IN;
  wire replacement_v_count_1_EN;

  // register replacement_v_count_10
  reg [1 : 0] replacement_v_count_10;
  wire [1 : 0] replacement_v_count_10_D_IN;
  wire replacement_v_count_10_EN;

  // register replacement_v_count_11
  reg [1 : 0] replacement_v_count_11;
  wire [1 : 0] replacement_v_count_11_D_IN;
  wire replacement_v_count_11_EN;

  // register replacement_v_count_12
  reg [1 : 0] replacement_v_count_12;
  wire [1 : 0] replacement_v_count_12_D_IN;
  wire replacement_v_count_12_EN;

  // register replacement_v_count_13
  reg [1 : 0] replacement_v_count_13;
  wire [1 : 0] replacement_v_count_13_D_IN;
  wire replacement_v_count_13_EN;

  // register replacement_v_count_14
  reg [1 : 0] replacement_v_count_14;
  wire [1 : 0] replacement_v_count_14_D_IN;
  wire replacement_v_count_14_EN;

  // register replacement_v_count_15
  reg [1 : 0] replacement_v_count_15;
  wire [1 : 0] replacement_v_count_15_D_IN;
  wire replacement_v_count_15_EN;

  // register replacement_v_count_16
  reg [1 : 0] replacement_v_count_16;
  wire [1 : 0] replacement_v_count_16_D_IN;
  wire replacement_v_count_16_EN;

  // register replacement_v_count_17
  reg [1 : 0] replacement_v_count_17;
  wire [1 : 0] replacement_v_count_17_D_IN;
  wire replacement_v_count_17_EN;

  // register replacement_v_count_18
  reg [1 : 0] replacement_v_count_18;
  wire [1 : 0] replacement_v_count_18_D_IN;
  wire replacement_v_count_18_EN;

  // register replacement_v_count_19
  reg [1 : 0] replacement_v_count_19;
  wire [1 : 0] replacement_v_count_19_D_IN;
  wire replacement_v_count_19_EN;

  // register replacement_v_count_2
  reg [1 : 0] replacement_v_count_2;
  wire [1 : 0] replacement_v_count_2_D_IN;
  wire replacement_v_count_2_EN;

  // register replacement_v_count_20
  reg [1 : 0] replacement_v_count_20;
  wire [1 : 0] replacement_v_count_20_D_IN;
  wire replacement_v_count_20_EN;

  // register replacement_v_count_21
  reg [1 : 0] replacement_v_count_21;
  wire [1 : 0] replacement_v_count_21_D_IN;
  wire replacement_v_count_21_EN;

  // register replacement_v_count_22
  reg [1 : 0] replacement_v_count_22;
  wire [1 : 0] replacement_v_count_22_D_IN;
  wire replacement_v_count_22_EN;

  // register replacement_v_count_23
  reg [1 : 0] replacement_v_count_23;
  wire [1 : 0] replacement_v_count_23_D_IN;
  wire replacement_v_count_23_EN;

  // register replacement_v_count_24
  reg [1 : 0] replacement_v_count_24;
  wire [1 : 0] replacement_v_count_24_D_IN;
  wire replacement_v_count_24_EN;

  // register replacement_v_count_25
  reg [1 : 0] replacement_v_count_25;
  wire [1 : 0] replacement_v_count_25_D_IN;
  wire replacement_v_count_25_EN;

  // register replacement_v_count_26
  reg [1 : 0] replacement_v_count_26;
  wire [1 : 0] replacement_v_count_26_D_IN;
  wire replacement_v_count_26_EN;

  // register replacement_v_count_27
  reg [1 : 0] replacement_v_count_27;
  wire [1 : 0] replacement_v_count_27_D_IN;
  wire replacement_v_count_27_EN;

  // register replacement_v_count_28
  reg [1 : 0] replacement_v_count_28;
  wire [1 : 0] replacement_v_count_28_D_IN;
  wire replacement_v_count_28_EN;

  // register replacement_v_count_29
  reg [1 : 0] replacement_v_count_29;
  wire [1 : 0] replacement_v_count_29_D_IN;
  wire replacement_v_count_29_EN;

  // register replacement_v_count_3
  reg [1 : 0] replacement_v_count_3;
  wire [1 : 0] replacement_v_count_3_D_IN;
  wire replacement_v_count_3_EN;

  // register replacement_v_count_30
  reg [1 : 0] replacement_v_count_30;
  wire [1 : 0] replacement_v_count_30_D_IN;
  wire replacement_v_count_30_EN;

  // register replacement_v_count_31
  reg [1 : 0] replacement_v_count_31;
  wire [1 : 0] replacement_v_count_31_D_IN;
  wire replacement_v_count_31_EN;

  // register replacement_v_count_32
  reg [1 : 0] replacement_v_count_32;
  wire [1 : 0] replacement_v_count_32_D_IN;
  wire replacement_v_count_32_EN;

  // register replacement_v_count_33
  reg [1 : 0] replacement_v_count_33;
  wire [1 : 0] replacement_v_count_33_D_IN;
  wire replacement_v_count_33_EN;

  // register replacement_v_count_34
  reg [1 : 0] replacement_v_count_34;
  wire [1 : 0] replacement_v_count_34_D_IN;
  wire replacement_v_count_34_EN;

  // register replacement_v_count_35
  reg [1 : 0] replacement_v_count_35;
  wire [1 : 0] replacement_v_count_35_D_IN;
  wire replacement_v_count_35_EN;

  // register replacement_v_count_36
  reg [1 : 0] replacement_v_count_36;
  wire [1 : 0] replacement_v_count_36_D_IN;
  wire replacement_v_count_36_EN;

  // register replacement_v_count_37
  reg [1 : 0] replacement_v_count_37;
  wire [1 : 0] replacement_v_count_37_D_IN;
  wire replacement_v_count_37_EN;

  // register replacement_v_count_38
  reg [1 : 0] replacement_v_count_38;
  wire [1 : 0] replacement_v_count_38_D_IN;
  wire replacement_v_count_38_EN;

  // register replacement_v_count_39
  reg [1 : 0] replacement_v_count_39;
  wire [1 : 0] replacement_v_count_39_D_IN;
  wire replacement_v_count_39_EN;

  // register replacement_v_count_4
  reg [1 : 0] replacement_v_count_4;
  wire [1 : 0] replacement_v_count_4_D_IN;
  wire replacement_v_count_4_EN;

  // register replacement_v_count_40
  reg [1 : 0] replacement_v_count_40;
  wire [1 : 0] replacement_v_count_40_D_IN;
  wire replacement_v_count_40_EN;

  // register replacement_v_count_41
  reg [1 : 0] replacement_v_count_41;
  wire [1 : 0] replacement_v_count_41_D_IN;
  wire replacement_v_count_41_EN;

  // register replacement_v_count_42
  reg [1 : 0] replacement_v_count_42;
  wire [1 : 0] replacement_v_count_42_D_IN;
  wire replacement_v_count_42_EN;

  // register replacement_v_count_43
  reg [1 : 0] replacement_v_count_43;
  wire [1 : 0] replacement_v_count_43_D_IN;
  wire replacement_v_count_43_EN;

  // register replacement_v_count_44
  reg [1 : 0] replacement_v_count_44;
  wire [1 : 0] replacement_v_count_44_D_IN;
  wire replacement_v_count_44_EN;

  // register replacement_v_count_45
  reg [1 : 0] replacement_v_count_45;
  wire [1 : 0] replacement_v_count_45_D_IN;
  wire replacement_v_count_45_EN;

  // register replacement_v_count_46
  reg [1 : 0] replacement_v_count_46;
  wire [1 : 0] replacement_v_count_46_D_IN;
  wire replacement_v_count_46_EN;

  // register replacement_v_count_47
  reg [1 : 0] replacement_v_count_47;
  wire [1 : 0] replacement_v_count_47_D_IN;
  wire replacement_v_count_47_EN;

  // register replacement_v_count_48
  reg [1 : 0] replacement_v_count_48;
  wire [1 : 0] replacement_v_count_48_D_IN;
  wire replacement_v_count_48_EN;

  // register replacement_v_count_49
  reg [1 : 0] replacement_v_count_49;
  wire [1 : 0] replacement_v_count_49_D_IN;
  wire replacement_v_count_49_EN;

  // register replacement_v_count_5
  reg [1 : 0] replacement_v_count_5;
  wire [1 : 0] replacement_v_count_5_D_IN;
  wire replacement_v_count_5_EN;

  // register replacement_v_count_50
  reg [1 : 0] replacement_v_count_50;
  wire [1 : 0] replacement_v_count_50_D_IN;
  wire replacement_v_count_50_EN;

  // register replacement_v_count_51
  reg [1 : 0] replacement_v_count_51;
  wire [1 : 0] replacement_v_count_51_D_IN;
  wire replacement_v_count_51_EN;

  // register replacement_v_count_52
  reg [1 : 0] replacement_v_count_52;
  wire [1 : 0] replacement_v_count_52_D_IN;
  wire replacement_v_count_52_EN;

  // register replacement_v_count_53
  reg [1 : 0] replacement_v_count_53;
  wire [1 : 0] replacement_v_count_53_D_IN;
  wire replacement_v_count_53_EN;

  // register replacement_v_count_54
  reg [1 : 0] replacement_v_count_54;
  wire [1 : 0] replacement_v_count_54_D_IN;
  wire replacement_v_count_54_EN;

  // register replacement_v_count_55
  reg [1 : 0] replacement_v_count_55;
  wire [1 : 0] replacement_v_count_55_D_IN;
  wire replacement_v_count_55_EN;

  // register replacement_v_count_56
  reg [1 : 0] replacement_v_count_56;
  wire [1 : 0] replacement_v_count_56_D_IN;
  wire replacement_v_count_56_EN;

  // register replacement_v_count_57
  reg [1 : 0] replacement_v_count_57;
  wire [1 : 0] replacement_v_count_57_D_IN;
  wire replacement_v_count_57_EN;

  // register replacement_v_count_58
  reg [1 : 0] replacement_v_count_58;
  wire [1 : 0] replacement_v_count_58_D_IN;
  wire replacement_v_count_58_EN;

  // register replacement_v_count_59
  reg [1 : 0] replacement_v_count_59;
  wire [1 : 0] replacement_v_count_59_D_IN;
  wire replacement_v_count_59_EN;

  // register replacement_v_count_6
  reg [1 : 0] replacement_v_count_6;
  wire [1 : 0] replacement_v_count_6_D_IN;
  wire replacement_v_count_6_EN;

  // register replacement_v_count_60
  reg [1 : 0] replacement_v_count_60;
  wire [1 : 0] replacement_v_count_60_D_IN;
  wire replacement_v_count_60_EN;

  // register replacement_v_count_61
  reg [1 : 0] replacement_v_count_61;
  wire [1 : 0] replacement_v_count_61_D_IN;
  wire replacement_v_count_61_EN;

  // register replacement_v_count_62
  reg [1 : 0] replacement_v_count_62;
  wire [1 : 0] replacement_v_count_62_D_IN;
  wire replacement_v_count_62_EN;

  // register replacement_v_count_63
  reg [1 : 0] replacement_v_count_63;
  wire [1 : 0] replacement_v_count_63_D_IN;
  wire replacement_v_count_63_EN;

  // register replacement_v_count_7
  reg [1 : 0] replacement_v_count_7;
  wire [1 : 0] replacement_v_count_7_D_IN;
  wire replacement_v_count_7_EN;

  // register replacement_v_count_8
  reg [1 : 0] replacement_v_count_8;
  wire [1 : 0] replacement_v_count_8_D_IN;
  wire replacement_v_count_8_EN;

  // register replacement_v_count_9
  reg [1 : 0] replacement_v_count_9;
  wire [1 : 0] replacement_v_count_9_D_IN;
  wire replacement_v_count_9_EN;

  // register rg_fence_pending
  reg rg_fence_pending;
  wire rg_fence_pending_D_IN, rg_fence_pending_EN;

  // register rg_fence_set
  reg [5 : 0] rg_fence_set;
  wire [5 : 0] rg_fence_set_D_IN;
  wire rg_fence_set_EN;

  // register rg_fence_stall
  reg rg_fence_stall;
  wire rg_fence_stall_D_IN, rg_fence_stall_EN;

  // register rg_fence_way
  reg [1 : 0] rg_fence_way;
  wire [1 : 0] rg_fence_way_D_IN;
  wire rg_fence_way_EN;

  // register rg_globaldirty
  reg rg_globaldirty;
  wire rg_globaldirty_D_IN, rg_globaldirty_EN;

  // register rg_handling_miss
  reg rg_handling_miss;
  wire rg_handling_miss_D_IN, rg_handling_miss_EN;

  // register rg_performing_replay
  reg rg_performing_replay;
  wire rg_performing_replay_D_IN, rg_performing_replay_EN;

  // register rg_polling_mode
  reg rg_polling_mode;
  wire rg_polling_mode_D_IN, rg_polling_mode_EN;

  // register rg_recent_core_req
  reg [5 : 0] rg_recent_core_req;
  wire [5 : 0] rg_recent_core_req_D_IN;
  wire rg_recent_core_req_EN;

  // register rg_recent_index
  reg [5 : 0] rg_recent_index;
  wire [5 : 0] rg_recent_index_D_IN;
  wire rg_recent_index_EN;

  // register rg_release_readphase
  reg rg_release_readphase;
  wire rg_release_readphase_D_IN, rg_release_readphase_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // register v_reg_dirty_0
  reg [3 : 0] v_reg_dirty_0;
  reg [3 : 0] v_reg_dirty_0_D_IN;
  wire v_reg_dirty_0_EN;

  // register v_reg_dirty_1
  reg [3 : 0] v_reg_dirty_1;
  reg [3 : 0] v_reg_dirty_1_D_IN;
  wire v_reg_dirty_1_EN;

  // register v_reg_dirty_10
  reg [3 : 0] v_reg_dirty_10;
  reg [3 : 0] v_reg_dirty_10_D_IN;
  wire v_reg_dirty_10_EN;

  // register v_reg_dirty_11
  reg [3 : 0] v_reg_dirty_11;
  reg [3 : 0] v_reg_dirty_11_D_IN;
  wire v_reg_dirty_11_EN;

  // register v_reg_dirty_12
  reg [3 : 0] v_reg_dirty_12;
  reg [3 : 0] v_reg_dirty_12_D_IN;
  wire v_reg_dirty_12_EN;

  // register v_reg_dirty_13
  reg [3 : 0] v_reg_dirty_13;
  reg [3 : 0] v_reg_dirty_13_D_IN;
  wire v_reg_dirty_13_EN;

  // register v_reg_dirty_14
  reg [3 : 0] v_reg_dirty_14;
  reg [3 : 0] v_reg_dirty_14_D_IN;
  wire v_reg_dirty_14_EN;

  // register v_reg_dirty_15
  reg [3 : 0] v_reg_dirty_15;
  reg [3 : 0] v_reg_dirty_15_D_IN;
  wire v_reg_dirty_15_EN;

  // register v_reg_dirty_16
  reg [3 : 0] v_reg_dirty_16;
  reg [3 : 0] v_reg_dirty_16_D_IN;
  wire v_reg_dirty_16_EN;

  // register v_reg_dirty_17
  reg [3 : 0] v_reg_dirty_17;
  reg [3 : 0] v_reg_dirty_17_D_IN;
  wire v_reg_dirty_17_EN;

  // register v_reg_dirty_18
  reg [3 : 0] v_reg_dirty_18;
  reg [3 : 0] v_reg_dirty_18_D_IN;
  wire v_reg_dirty_18_EN;

  // register v_reg_dirty_19
  reg [3 : 0] v_reg_dirty_19;
  reg [3 : 0] v_reg_dirty_19_D_IN;
  wire v_reg_dirty_19_EN;

  // register v_reg_dirty_2
  reg [3 : 0] v_reg_dirty_2;
  reg [3 : 0] v_reg_dirty_2_D_IN;
  wire v_reg_dirty_2_EN;

  // register v_reg_dirty_20
  reg [3 : 0] v_reg_dirty_20;
  reg [3 : 0] v_reg_dirty_20_D_IN;
  wire v_reg_dirty_20_EN;

  // register v_reg_dirty_21
  reg [3 : 0] v_reg_dirty_21;
  reg [3 : 0] v_reg_dirty_21_D_IN;
  wire v_reg_dirty_21_EN;

  // register v_reg_dirty_22
  reg [3 : 0] v_reg_dirty_22;
  reg [3 : 0] v_reg_dirty_22_D_IN;
  wire v_reg_dirty_22_EN;

  // register v_reg_dirty_23
  reg [3 : 0] v_reg_dirty_23;
  reg [3 : 0] v_reg_dirty_23_D_IN;
  wire v_reg_dirty_23_EN;

  // register v_reg_dirty_24
  reg [3 : 0] v_reg_dirty_24;
  reg [3 : 0] v_reg_dirty_24_D_IN;
  wire v_reg_dirty_24_EN;

  // register v_reg_dirty_25
  reg [3 : 0] v_reg_dirty_25;
  reg [3 : 0] v_reg_dirty_25_D_IN;
  wire v_reg_dirty_25_EN;

  // register v_reg_dirty_26
  reg [3 : 0] v_reg_dirty_26;
  reg [3 : 0] v_reg_dirty_26_D_IN;
  wire v_reg_dirty_26_EN;

  // register v_reg_dirty_27
  reg [3 : 0] v_reg_dirty_27;
  reg [3 : 0] v_reg_dirty_27_D_IN;
  wire v_reg_dirty_27_EN;

  // register v_reg_dirty_28
  reg [3 : 0] v_reg_dirty_28;
  reg [3 : 0] v_reg_dirty_28_D_IN;
  wire v_reg_dirty_28_EN;

  // register v_reg_dirty_29
  reg [3 : 0] v_reg_dirty_29;
  reg [3 : 0] v_reg_dirty_29_D_IN;
  wire v_reg_dirty_29_EN;

  // register v_reg_dirty_3
  reg [3 : 0] v_reg_dirty_3;
  reg [3 : 0] v_reg_dirty_3_D_IN;
  wire v_reg_dirty_3_EN;

  // register v_reg_dirty_30
  reg [3 : 0] v_reg_dirty_30;
  reg [3 : 0] v_reg_dirty_30_D_IN;
  wire v_reg_dirty_30_EN;

  // register v_reg_dirty_31
  reg [3 : 0] v_reg_dirty_31;
  reg [3 : 0] v_reg_dirty_31_D_IN;
  wire v_reg_dirty_31_EN;

  // register v_reg_dirty_32
  reg [3 : 0] v_reg_dirty_32;
  reg [3 : 0] v_reg_dirty_32_D_IN;
  wire v_reg_dirty_32_EN;

  // register v_reg_dirty_33
  reg [3 : 0] v_reg_dirty_33;
  reg [3 : 0] v_reg_dirty_33_D_IN;
  wire v_reg_dirty_33_EN;

  // register v_reg_dirty_34
  reg [3 : 0] v_reg_dirty_34;
  reg [3 : 0] v_reg_dirty_34_D_IN;
  wire v_reg_dirty_34_EN;

  // register v_reg_dirty_35
  reg [3 : 0] v_reg_dirty_35;
  reg [3 : 0] v_reg_dirty_35_D_IN;
  wire v_reg_dirty_35_EN;

  // register v_reg_dirty_36
  reg [3 : 0] v_reg_dirty_36;
  reg [3 : 0] v_reg_dirty_36_D_IN;
  wire v_reg_dirty_36_EN;

  // register v_reg_dirty_37
  reg [3 : 0] v_reg_dirty_37;
  reg [3 : 0] v_reg_dirty_37_D_IN;
  wire v_reg_dirty_37_EN;

  // register v_reg_dirty_38
  reg [3 : 0] v_reg_dirty_38;
  reg [3 : 0] v_reg_dirty_38_D_IN;
  wire v_reg_dirty_38_EN;

  // register v_reg_dirty_39
  reg [3 : 0] v_reg_dirty_39;
  reg [3 : 0] v_reg_dirty_39_D_IN;
  wire v_reg_dirty_39_EN;

  // register v_reg_dirty_4
  reg [3 : 0] v_reg_dirty_4;
  reg [3 : 0] v_reg_dirty_4_D_IN;
  wire v_reg_dirty_4_EN;

  // register v_reg_dirty_40
  reg [3 : 0] v_reg_dirty_40;
  reg [3 : 0] v_reg_dirty_40_D_IN;
  wire v_reg_dirty_40_EN;

  // register v_reg_dirty_41
  reg [3 : 0] v_reg_dirty_41;
  reg [3 : 0] v_reg_dirty_41_D_IN;
  wire v_reg_dirty_41_EN;

  // register v_reg_dirty_42
  reg [3 : 0] v_reg_dirty_42;
  reg [3 : 0] v_reg_dirty_42_D_IN;
  wire v_reg_dirty_42_EN;

  // register v_reg_dirty_43
  reg [3 : 0] v_reg_dirty_43;
  reg [3 : 0] v_reg_dirty_43_D_IN;
  wire v_reg_dirty_43_EN;

  // register v_reg_dirty_44
  reg [3 : 0] v_reg_dirty_44;
  reg [3 : 0] v_reg_dirty_44_D_IN;
  wire v_reg_dirty_44_EN;

  // register v_reg_dirty_45
  reg [3 : 0] v_reg_dirty_45;
  reg [3 : 0] v_reg_dirty_45_D_IN;
  wire v_reg_dirty_45_EN;

  // register v_reg_dirty_46
  reg [3 : 0] v_reg_dirty_46;
  reg [3 : 0] v_reg_dirty_46_D_IN;
  wire v_reg_dirty_46_EN;

  // register v_reg_dirty_47
  reg [3 : 0] v_reg_dirty_47;
  reg [3 : 0] v_reg_dirty_47_D_IN;
  wire v_reg_dirty_47_EN;

  // register v_reg_dirty_48
  reg [3 : 0] v_reg_dirty_48;
  reg [3 : 0] v_reg_dirty_48_D_IN;
  wire v_reg_dirty_48_EN;

  // register v_reg_dirty_49
  reg [3 : 0] v_reg_dirty_49;
  reg [3 : 0] v_reg_dirty_49_D_IN;
  wire v_reg_dirty_49_EN;

  // register v_reg_dirty_5
  reg [3 : 0] v_reg_dirty_5;
  reg [3 : 0] v_reg_dirty_5_D_IN;
  wire v_reg_dirty_5_EN;

  // register v_reg_dirty_50
  reg [3 : 0] v_reg_dirty_50;
  reg [3 : 0] v_reg_dirty_50_D_IN;
  wire v_reg_dirty_50_EN;

  // register v_reg_dirty_51
  reg [3 : 0] v_reg_dirty_51;
  reg [3 : 0] v_reg_dirty_51_D_IN;
  wire v_reg_dirty_51_EN;

  // register v_reg_dirty_52
  reg [3 : 0] v_reg_dirty_52;
  reg [3 : 0] v_reg_dirty_52_D_IN;
  wire v_reg_dirty_52_EN;

  // register v_reg_dirty_53
  reg [3 : 0] v_reg_dirty_53;
  reg [3 : 0] v_reg_dirty_53_D_IN;
  wire v_reg_dirty_53_EN;

  // register v_reg_dirty_54
  reg [3 : 0] v_reg_dirty_54;
  reg [3 : 0] v_reg_dirty_54_D_IN;
  wire v_reg_dirty_54_EN;

  // register v_reg_dirty_55
  reg [3 : 0] v_reg_dirty_55;
  reg [3 : 0] v_reg_dirty_55_D_IN;
  wire v_reg_dirty_55_EN;

  // register v_reg_dirty_56
  reg [3 : 0] v_reg_dirty_56;
  reg [3 : 0] v_reg_dirty_56_D_IN;
  wire v_reg_dirty_56_EN;

  // register v_reg_dirty_57
  reg [3 : 0] v_reg_dirty_57;
  reg [3 : 0] v_reg_dirty_57_D_IN;
  wire v_reg_dirty_57_EN;

  // register v_reg_dirty_58
  reg [3 : 0] v_reg_dirty_58;
  reg [3 : 0] v_reg_dirty_58_D_IN;
  wire v_reg_dirty_58_EN;

  // register v_reg_dirty_59
  reg [3 : 0] v_reg_dirty_59;
  reg [3 : 0] v_reg_dirty_59_D_IN;
  wire v_reg_dirty_59_EN;

  // register v_reg_dirty_6
  reg [3 : 0] v_reg_dirty_6;
  reg [3 : 0] v_reg_dirty_6_D_IN;
  wire v_reg_dirty_6_EN;

  // register v_reg_dirty_60
  reg [3 : 0] v_reg_dirty_60;
  reg [3 : 0] v_reg_dirty_60_D_IN;
  wire v_reg_dirty_60_EN;

  // register v_reg_dirty_61
  reg [3 : 0] v_reg_dirty_61;
  reg [3 : 0] v_reg_dirty_61_D_IN;
  wire v_reg_dirty_61_EN;

  // register v_reg_dirty_62
  reg [3 : 0] v_reg_dirty_62;
  reg [3 : 0] v_reg_dirty_62_D_IN;
  wire v_reg_dirty_62_EN;

  // register v_reg_dirty_63
  reg [3 : 0] v_reg_dirty_63;
  reg [3 : 0] v_reg_dirty_63_D_IN;
  wire v_reg_dirty_63_EN;

  // register v_reg_dirty_7
  reg [3 : 0] v_reg_dirty_7;
  reg [3 : 0] v_reg_dirty_7_D_IN;
  wire v_reg_dirty_7_EN;

  // register v_reg_dirty_8
  reg [3 : 0] v_reg_dirty_8;
  reg [3 : 0] v_reg_dirty_8_D_IN;
  wire v_reg_dirty_8_EN;

  // register v_reg_dirty_9
  reg [3 : 0] v_reg_dirty_9;
  reg [3 : 0] v_reg_dirty_9_D_IN;
  wire v_reg_dirty_9_EN;

  // register v_reg_valid_0
  reg [3 : 0] v_reg_valid_0;
  reg [3 : 0] v_reg_valid_0_D_IN;
  wire v_reg_valid_0_EN;

  // register v_reg_valid_1
  reg [3 : 0] v_reg_valid_1;
  reg [3 : 0] v_reg_valid_1_D_IN;
  wire v_reg_valid_1_EN;

  // register v_reg_valid_10
  reg [3 : 0] v_reg_valid_10;
  reg [3 : 0] v_reg_valid_10_D_IN;
  wire v_reg_valid_10_EN;

  // register v_reg_valid_11
  reg [3 : 0] v_reg_valid_11;
  reg [3 : 0] v_reg_valid_11_D_IN;
  wire v_reg_valid_11_EN;

  // register v_reg_valid_12
  reg [3 : 0] v_reg_valid_12;
  reg [3 : 0] v_reg_valid_12_D_IN;
  wire v_reg_valid_12_EN;

  // register v_reg_valid_13
  reg [3 : 0] v_reg_valid_13;
  reg [3 : 0] v_reg_valid_13_D_IN;
  wire v_reg_valid_13_EN;

  // register v_reg_valid_14
  reg [3 : 0] v_reg_valid_14;
  reg [3 : 0] v_reg_valid_14_D_IN;
  wire v_reg_valid_14_EN;

  // register v_reg_valid_15
  reg [3 : 0] v_reg_valid_15;
  reg [3 : 0] v_reg_valid_15_D_IN;
  wire v_reg_valid_15_EN;

  // register v_reg_valid_16
  reg [3 : 0] v_reg_valid_16;
  reg [3 : 0] v_reg_valid_16_D_IN;
  wire v_reg_valid_16_EN;

  // register v_reg_valid_17
  reg [3 : 0] v_reg_valid_17;
  reg [3 : 0] v_reg_valid_17_D_IN;
  wire v_reg_valid_17_EN;

  // register v_reg_valid_18
  reg [3 : 0] v_reg_valid_18;
  reg [3 : 0] v_reg_valid_18_D_IN;
  wire v_reg_valid_18_EN;

  // register v_reg_valid_19
  reg [3 : 0] v_reg_valid_19;
  reg [3 : 0] v_reg_valid_19_D_IN;
  wire v_reg_valid_19_EN;

  // register v_reg_valid_2
  reg [3 : 0] v_reg_valid_2;
  reg [3 : 0] v_reg_valid_2_D_IN;
  wire v_reg_valid_2_EN;

  // register v_reg_valid_20
  reg [3 : 0] v_reg_valid_20;
  reg [3 : 0] v_reg_valid_20_D_IN;
  wire v_reg_valid_20_EN;

  // register v_reg_valid_21
  reg [3 : 0] v_reg_valid_21;
  reg [3 : 0] v_reg_valid_21_D_IN;
  wire v_reg_valid_21_EN;

  // register v_reg_valid_22
  reg [3 : 0] v_reg_valid_22;
  reg [3 : 0] v_reg_valid_22_D_IN;
  wire v_reg_valid_22_EN;

  // register v_reg_valid_23
  reg [3 : 0] v_reg_valid_23;
  reg [3 : 0] v_reg_valid_23_D_IN;
  wire v_reg_valid_23_EN;

  // register v_reg_valid_24
  reg [3 : 0] v_reg_valid_24;
  reg [3 : 0] v_reg_valid_24_D_IN;
  wire v_reg_valid_24_EN;

  // register v_reg_valid_25
  reg [3 : 0] v_reg_valid_25;
  reg [3 : 0] v_reg_valid_25_D_IN;
  wire v_reg_valid_25_EN;

  // register v_reg_valid_26
  reg [3 : 0] v_reg_valid_26;
  reg [3 : 0] v_reg_valid_26_D_IN;
  wire v_reg_valid_26_EN;

  // register v_reg_valid_27
  reg [3 : 0] v_reg_valid_27;
  reg [3 : 0] v_reg_valid_27_D_IN;
  wire v_reg_valid_27_EN;

  // register v_reg_valid_28
  reg [3 : 0] v_reg_valid_28;
  reg [3 : 0] v_reg_valid_28_D_IN;
  wire v_reg_valid_28_EN;

  // register v_reg_valid_29
  reg [3 : 0] v_reg_valid_29;
  reg [3 : 0] v_reg_valid_29_D_IN;
  wire v_reg_valid_29_EN;

  // register v_reg_valid_3
  reg [3 : 0] v_reg_valid_3;
  reg [3 : 0] v_reg_valid_3_D_IN;
  wire v_reg_valid_3_EN;

  // register v_reg_valid_30
  reg [3 : 0] v_reg_valid_30;
  reg [3 : 0] v_reg_valid_30_D_IN;
  wire v_reg_valid_30_EN;

  // register v_reg_valid_31
  reg [3 : 0] v_reg_valid_31;
  reg [3 : 0] v_reg_valid_31_D_IN;
  wire v_reg_valid_31_EN;

  // register v_reg_valid_32
  reg [3 : 0] v_reg_valid_32;
  reg [3 : 0] v_reg_valid_32_D_IN;
  wire v_reg_valid_32_EN;

  // register v_reg_valid_33
  reg [3 : 0] v_reg_valid_33;
  reg [3 : 0] v_reg_valid_33_D_IN;
  wire v_reg_valid_33_EN;

  // register v_reg_valid_34
  reg [3 : 0] v_reg_valid_34;
  reg [3 : 0] v_reg_valid_34_D_IN;
  wire v_reg_valid_34_EN;

  // register v_reg_valid_35
  reg [3 : 0] v_reg_valid_35;
  reg [3 : 0] v_reg_valid_35_D_IN;
  wire v_reg_valid_35_EN;

  // register v_reg_valid_36
  reg [3 : 0] v_reg_valid_36;
  reg [3 : 0] v_reg_valid_36_D_IN;
  wire v_reg_valid_36_EN;

  // register v_reg_valid_37
  reg [3 : 0] v_reg_valid_37;
  reg [3 : 0] v_reg_valid_37_D_IN;
  wire v_reg_valid_37_EN;

  // register v_reg_valid_38
  reg [3 : 0] v_reg_valid_38;
  reg [3 : 0] v_reg_valid_38_D_IN;
  wire v_reg_valid_38_EN;

  // register v_reg_valid_39
  reg [3 : 0] v_reg_valid_39;
  reg [3 : 0] v_reg_valid_39_D_IN;
  wire v_reg_valid_39_EN;

  // register v_reg_valid_4
  reg [3 : 0] v_reg_valid_4;
  reg [3 : 0] v_reg_valid_4_D_IN;
  wire v_reg_valid_4_EN;

  // register v_reg_valid_40
  reg [3 : 0] v_reg_valid_40;
  reg [3 : 0] v_reg_valid_40_D_IN;
  wire v_reg_valid_40_EN;

  // register v_reg_valid_41
  reg [3 : 0] v_reg_valid_41;
  reg [3 : 0] v_reg_valid_41_D_IN;
  wire v_reg_valid_41_EN;

  // register v_reg_valid_42
  reg [3 : 0] v_reg_valid_42;
  reg [3 : 0] v_reg_valid_42_D_IN;
  wire v_reg_valid_42_EN;

  // register v_reg_valid_43
  reg [3 : 0] v_reg_valid_43;
  reg [3 : 0] v_reg_valid_43_D_IN;
  wire v_reg_valid_43_EN;

  // register v_reg_valid_44
  reg [3 : 0] v_reg_valid_44;
  reg [3 : 0] v_reg_valid_44_D_IN;
  wire v_reg_valid_44_EN;

  // register v_reg_valid_45
  reg [3 : 0] v_reg_valid_45;
  reg [3 : 0] v_reg_valid_45_D_IN;
  wire v_reg_valid_45_EN;

  // register v_reg_valid_46
  reg [3 : 0] v_reg_valid_46;
  reg [3 : 0] v_reg_valid_46_D_IN;
  wire v_reg_valid_46_EN;

  // register v_reg_valid_47
  reg [3 : 0] v_reg_valid_47;
  reg [3 : 0] v_reg_valid_47_D_IN;
  wire v_reg_valid_47_EN;

  // register v_reg_valid_48
  reg [3 : 0] v_reg_valid_48;
  reg [3 : 0] v_reg_valid_48_D_IN;
  wire v_reg_valid_48_EN;

  // register v_reg_valid_49
  reg [3 : 0] v_reg_valid_49;
  reg [3 : 0] v_reg_valid_49_D_IN;
  wire v_reg_valid_49_EN;

  // register v_reg_valid_5
  reg [3 : 0] v_reg_valid_5;
  reg [3 : 0] v_reg_valid_5_D_IN;
  wire v_reg_valid_5_EN;

  // register v_reg_valid_50
  reg [3 : 0] v_reg_valid_50;
  reg [3 : 0] v_reg_valid_50_D_IN;
  wire v_reg_valid_50_EN;

  // register v_reg_valid_51
  reg [3 : 0] v_reg_valid_51;
  reg [3 : 0] v_reg_valid_51_D_IN;
  wire v_reg_valid_51_EN;

  // register v_reg_valid_52
  reg [3 : 0] v_reg_valid_52;
  reg [3 : 0] v_reg_valid_52_D_IN;
  wire v_reg_valid_52_EN;

  // register v_reg_valid_53
  reg [3 : 0] v_reg_valid_53;
  reg [3 : 0] v_reg_valid_53_D_IN;
  wire v_reg_valid_53_EN;

  // register v_reg_valid_54
  reg [3 : 0] v_reg_valid_54;
  reg [3 : 0] v_reg_valid_54_D_IN;
  wire v_reg_valid_54_EN;

  // register v_reg_valid_55
  reg [3 : 0] v_reg_valid_55;
  reg [3 : 0] v_reg_valid_55_D_IN;
  wire v_reg_valid_55_EN;

  // register v_reg_valid_56
  reg [3 : 0] v_reg_valid_56;
  reg [3 : 0] v_reg_valid_56_D_IN;
  wire v_reg_valid_56_EN;

  // register v_reg_valid_57
  reg [3 : 0] v_reg_valid_57;
  reg [3 : 0] v_reg_valid_57_D_IN;
  wire v_reg_valid_57_EN;

  // register v_reg_valid_58
  reg [3 : 0] v_reg_valid_58;
  reg [3 : 0] v_reg_valid_58_D_IN;
  wire v_reg_valid_58_EN;

  // register v_reg_valid_59
  reg [3 : 0] v_reg_valid_59;
  reg [3 : 0] v_reg_valid_59_D_IN;
  wire v_reg_valid_59_EN;

  // register v_reg_valid_6
  reg [3 : 0] v_reg_valid_6;
  reg [3 : 0] v_reg_valid_6_D_IN;
  wire v_reg_valid_6_EN;

  // register v_reg_valid_60
  reg [3 : 0] v_reg_valid_60;
  reg [3 : 0] v_reg_valid_60_D_IN;
  wire v_reg_valid_60_EN;

  // register v_reg_valid_61
  reg [3 : 0] v_reg_valid_61;
  reg [3 : 0] v_reg_valid_61_D_IN;
  wire v_reg_valid_61_EN;

  // register v_reg_valid_62
  reg [3 : 0] v_reg_valid_62;
  reg [3 : 0] v_reg_valid_62_D_IN;
  wire v_reg_valid_62_EN;

  // register v_reg_valid_63
  reg [3 : 0] v_reg_valid_63;
  reg [3 : 0] v_reg_valid_63_D_IN;
  wire v_reg_valid_63_EN;

  // register v_reg_valid_7
  reg [3 : 0] v_reg_valid_7;
  reg [3 : 0] v_reg_valid_7_D_IN;
  wire v_reg_valid_7_EN;

  // register v_reg_valid_8
  reg [3 : 0] v_reg_valid_8;
  reg [3 : 0] v_reg_valid_8_D_IN;
  wire v_reg_valid_8_EN;

  // register v_reg_valid_9
  reg [3 : 0] v_reg_valid_9;
  reg [3 : 0] v_reg_valid_9_D_IN;
  wire v_reg_valid_9_EN;

  // ports of submodule ff_core_request
  wire [70 : 0] ff_core_request_D_IN, ff_core_request_D_OUT;
  wire ff_core_request_CLR,
       ff_core_request_DEQ,
       ff_core_request_EMPTY_N,
       ff_core_request_ENQ,
       ff_core_request_FULL_N;

  // ports of submodule ff_pending_req
  wire [7 : 0] ff_pending_req_D_IN, ff_pending_req_D_OUT;
  wire ff_pending_req_CLR,
       ff_pending_req_DEQ,
       ff_pending_req_EMPTY_N,
       ff_pending_req_ENQ,
       ff_pending_req_FULL_N;

  // ports of submodule ff_read_mem_request
  wire [43 : 0] ff_read_mem_request_D_IN, ff_read_mem_request_D_OUT;
  wire ff_read_mem_request_CLR,
       ff_read_mem_request_DEQ,
       ff_read_mem_request_EMPTY_N,
       ff_read_mem_request_ENQ,
       ff_read_mem_request_FULL_N;

  // ports of submodule ff_write_mem_request
  reg [555 : 0] ff_write_mem_request_D_IN;
  wire [555 : 0] ff_write_mem_request_D_OUT;
  wire ff_write_mem_request_CLR,
       ff_write_mem_request_DEQ,
       ff_write_mem_request_EMPTY_N,
       ff_write_mem_request_ENQ,
       ff_write_mem_request_FULL_N;

  // ports of submodule m_data
  reg [5 : 0] m_data_ma_request_index;
  reg [3 : 0] m_data_mv_read_response_blocknum,
	      m_data_mv_read_response_wayselect;
  reg [1 : 0] m_data_ma_request_way;
  wire [543 : 0] m_data_mv_read_response;
  wire [511 : 0] m_data_ma_request_dataline;
  wire [15 : 0] m_data_ma_request_banks;
  wire m_data_EN_ma_request, m_data_ma_request_read_write;

  // ports of submodule m_fillbuffer
  wire [545 : 0] m_fillbuffer_mv_release_info;
  wire [511 : 0] m_fillbuffer_mav_allocate_line_dataline;
  wire [42 : 0] m_fillbuffer_mav_polling_response;
  wire [33 : 0] m_fillbuffer_ma_fill_from_memory_mem_resp;
  wire [31 : 0] m_fillbuffer_ma_from_storebuffer_address,
		m_fillbuffer_ma_from_storebuffer_dataword,
		m_fillbuffer_ma_from_storebuffer_mask,
		m_fillbuffer_mav_allocate_line_address,
		m_fillbuffer_mav_polling_response_address;
  wire [3 : 0] m_fillbuffer_ma_fill_from_memory_init_bank;
  wire [2 : 0] m_fillbuffer_ma_fill_from_memory_fbindex,
	       m_fillbuffer_ma_from_storebuffer_fbindex,
	       m_fillbuffer_mav_allocate_line,
	       m_fillbuffer_mav_polling_response_fbindex;
  wire m_fillbuffer_EN_ma_fill_from_memory,
       m_fillbuffer_EN_ma_from_storebuffer,
       m_fillbuffer_EN_ma_perform_release,
       m_fillbuffer_EN_mav_allocate_line,
       m_fillbuffer_EN_mav_polling_response,
       m_fillbuffer_mav_allocate_line_dirty,
       m_fillbuffer_mav_allocate_line_from_ram,
       m_fillbuffer_mav_polling_response_fill,
       m_fillbuffer_mv_fbempty,
       m_fillbuffer_mv_fbfull,
       m_fillbuffer_mv_fbhead_valid;

  // ports of submodule m_tag
  reg [31 : 0] m_tag_mv_read_response_address_in;
  reg [5 : 0] m_tag_ma_request_index;
  reg [1 : 0] m_tag_ma_request_way, m_tag_mv_read_response_wayselect;
  wire [35 : 0] m_tag_mv_read_response;
  wire [31 : 0] m_tag_ma_request_address;
  wire m_tag_EN_ma_request, m_tag_ma_request_read_write;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_release_readphase__dreg_update,
       CAN_FIRE_RL_rl_capture_io_response,
       CAN_FIRE_RL_rl_deq_write_resp,
       CAN_FIRE_RL_rl_deq_write_response,
       CAN_FIRE_RL_rl_fence_operation,
       CAN_FIRE_RL_rl_fill_from_memory,
       CAN_FIRE_RL_rl_fillbuffer_check,
       CAN_FIRE_RL_rl_perform_replay,
       CAN_FIRE_RL_rl_ram_check,
       CAN_FIRE_RL_rl_release_from_fillbuffer,
       CAN_FIRE_RL_rl_response_to_core,
       CAN_FIRE_RL_rl_send_memory_request,
       CAN_FIRE___me_check_4,
       CAN_FIRE_get_core_resp_get,
       CAN_FIRE_get_read_mem_req_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_perform_store,
       CAN_FIRE_ma_write_mem_req_deq,
       CAN_FIRE_put_core_req_put,
       CAN_FIRE_put_read_mem_resp_put,
       CAN_FIRE_put_write_mem_resp_put,
       WILL_FIRE_RL_rg_release_readphase__dreg_update,
       WILL_FIRE_RL_rl_capture_io_response,
       WILL_FIRE_RL_rl_deq_write_resp,
       WILL_FIRE_RL_rl_deq_write_response,
       WILL_FIRE_RL_rl_fence_operation,
       WILL_FIRE_RL_rl_fill_from_memory,
       WILL_FIRE_RL_rl_fillbuffer_check,
       WILL_FIRE_RL_rl_perform_replay,
       WILL_FIRE_RL_rl_ram_check,
       WILL_FIRE_RL_rl_release_from_fillbuffer,
       WILL_FIRE_RL_rl_response_to_core,
       WILL_FIRE_RL_rl_send_memory_request,
       WILL_FIRE___me_check_4,
       WILL_FIRE_get_core_resp_get,
       WILL_FIRE_get_read_mem_req_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_perform_store,
       WILL_FIRE_ma_write_mem_req_deq,
       WILL_FIRE_put_core_req_put,
       WILL_FIRE_put_read_mem_resp_put,
       WILL_FIRE_put_write_mem_resp_put;

  // inputs to muxes for submodule ports
  wire [555 : 0] MUX_ff_write_mem_request_enq_1__VAL_1,
		 MUX_ff_write_mem_request_enq_1__VAL_2,
		 MUX_ff_write_mem_request_enq_1__VAL_3;
  wire [40 : 0] MUX_ff_core_response_rv_port0__write_1__VAL_1,
		MUX_ff_core_response_rv_port0__write_1__VAL_2;
  wire [3 : 0] MUX_m_data_mv_read_response_2__VAL_2,
	       MUX_v_reg_dirty_0_write_1__VAL_1,
	       MUX_v_reg_dirty_0_write_1__VAL_2,
	       MUX_v_reg_valid_0_write_1__VAL_1,
	       MUX_v_reg_valid_0_write_1__VAL_2;
  wire [1 : 0] MUX_replacement_v_count_0_write_1__VAL_2;
  wire MUX_ff_core_response_rv_port0__write_1__SEL_1,
       MUX_ff_write_mem_request_enq_1__SEL_1,
       MUX_ff_write_mem_request_enq_1__SEL_2,
       MUX_ff_write_mem_request_enq_1__SEL_3,
       MUX_m_data_ma_request_1__SEL_1,
       MUX_m_data_ma_request_1__SEL_2,
       MUX_m_data_ma_request_1__VAL_1,
       MUX_m_fillbuffer_mav_allocate_line_1__SEL_1,
       MUX_m_fillbuffer_mav_allocate_line_1__SEL_2,
       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1,
       MUX_m_storebuffer_v_sb_valid_0_write_1__SEL_1,
       MUX_m_storebuffer_v_sb_valid_1_write_1__SEL_1,
       MUX_rg_globaldirty_write_1__SEL_2,
       MUX_rg_performing_replay_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_2,
       MUX_v_reg_dirty_1_write_1__SEL_1,
       MUX_v_reg_dirty_1_write_1__SEL_2,
       MUX_v_reg_dirty_10_write_1__SEL_1,
       MUX_v_reg_dirty_10_write_1__SEL_2,
       MUX_v_reg_dirty_11_write_1__SEL_1,
       MUX_v_reg_dirty_11_write_1__SEL_2,
       MUX_v_reg_dirty_12_write_1__SEL_1,
       MUX_v_reg_dirty_12_write_1__SEL_2,
       MUX_v_reg_dirty_13_write_1__SEL_1,
       MUX_v_reg_dirty_13_write_1__SEL_2,
       MUX_v_reg_dirty_14_write_1__SEL_1,
       MUX_v_reg_dirty_14_write_1__SEL_2,
       MUX_v_reg_dirty_15_write_1__SEL_1,
       MUX_v_reg_dirty_15_write_1__SEL_2,
       MUX_v_reg_dirty_16_write_1__SEL_1,
       MUX_v_reg_dirty_16_write_1__SEL_2,
       MUX_v_reg_dirty_17_write_1__SEL_1,
       MUX_v_reg_dirty_17_write_1__SEL_2,
       MUX_v_reg_dirty_18_write_1__SEL_1,
       MUX_v_reg_dirty_18_write_1__SEL_2,
       MUX_v_reg_dirty_19_write_1__SEL_1,
       MUX_v_reg_dirty_19_write_1__SEL_2,
       MUX_v_reg_dirty_2_write_1__SEL_1,
       MUX_v_reg_dirty_2_write_1__SEL_2,
       MUX_v_reg_dirty_20_write_1__SEL_1,
       MUX_v_reg_dirty_20_write_1__SEL_2,
       MUX_v_reg_dirty_21_write_1__SEL_1,
       MUX_v_reg_dirty_21_write_1__SEL_2,
       MUX_v_reg_dirty_22_write_1__SEL_1,
       MUX_v_reg_dirty_22_write_1__SEL_2,
       MUX_v_reg_dirty_23_write_1__SEL_1,
       MUX_v_reg_dirty_23_write_1__SEL_2,
       MUX_v_reg_dirty_24_write_1__SEL_1,
       MUX_v_reg_dirty_24_write_1__SEL_2,
       MUX_v_reg_dirty_25_write_1__SEL_1,
       MUX_v_reg_dirty_25_write_1__SEL_2,
       MUX_v_reg_dirty_26_write_1__SEL_1,
       MUX_v_reg_dirty_26_write_1__SEL_2,
       MUX_v_reg_dirty_27_write_1__SEL_1,
       MUX_v_reg_dirty_27_write_1__SEL_2,
       MUX_v_reg_dirty_28_write_1__SEL_1,
       MUX_v_reg_dirty_28_write_1__SEL_2,
       MUX_v_reg_dirty_29_write_1__SEL_1,
       MUX_v_reg_dirty_29_write_1__SEL_2,
       MUX_v_reg_dirty_3_write_1__SEL_1,
       MUX_v_reg_dirty_3_write_1__SEL_2,
       MUX_v_reg_dirty_30_write_1__SEL_1,
       MUX_v_reg_dirty_30_write_1__SEL_2,
       MUX_v_reg_dirty_31_write_1__SEL_1,
       MUX_v_reg_dirty_31_write_1__SEL_2,
       MUX_v_reg_dirty_32_write_1__SEL_1,
       MUX_v_reg_dirty_32_write_1__SEL_2,
       MUX_v_reg_dirty_33_write_1__SEL_1,
       MUX_v_reg_dirty_33_write_1__SEL_2,
       MUX_v_reg_dirty_34_write_1__SEL_1,
       MUX_v_reg_dirty_34_write_1__SEL_2,
       MUX_v_reg_dirty_35_write_1__SEL_1,
       MUX_v_reg_dirty_35_write_1__SEL_2,
       MUX_v_reg_dirty_36_write_1__SEL_1,
       MUX_v_reg_dirty_36_write_1__SEL_2,
       MUX_v_reg_dirty_37_write_1__SEL_1,
       MUX_v_reg_dirty_37_write_1__SEL_2,
       MUX_v_reg_dirty_38_write_1__SEL_1,
       MUX_v_reg_dirty_38_write_1__SEL_2,
       MUX_v_reg_dirty_39_write_1__SEL_1,
       MUX_v_reg_dirty_39_write_1__SEL_2,
       MUX_v_reg_dirty_4_write_1__SEL_1,
       MUX_v_reg_dirty_4_write_1__SEL_2,
       MUX_v_reg_dirty_40_write_1__SEL_1,
       MUX_v_reg_dirty_40_write_1__SEL_2,
       MUX_v_reg_dirty_41_write_1__SEL_1,
       MUX_v_reg_dirty_41_write_1__SEL_2,
       MUX_v_reg_dirty_42_write_1__SEL_1,
       MUX_v_reg_dirty_42_write_1__SEL_2,
       MUX_v_reg_dirty_43_write_1__SEL_1,
       MUX_v_reg_dirty_43_write_1__SEL_2,
       MUX_v_reg_dirty_44_write_1__SEL_1,
       MUX_v_reg_dirty_44_write_1__SEL_2,
       MUX_v_reg_dirty_45_write_1__SEL_1,
       MUX_v_reg_dirty_45_write_1__SEL_2,
       MUX_v_reg_dirty_46_write_1__SEL_1,
       MUX_v_reg_dirty_46_write_1__SEL_2,
       MUX_v_reg_dirty_47_write_1__SEL_1,
       MUX_v_reg_dirty_47_write_1__SEL_2,
       MUX_v_reg_dirty_48_write_1__SEL_1,
       MUX_v_reg_dirty_48_write_1__SEL_2,
       MUX_v_reg_dirty_49_write_1__SEL_1,
       MUX_v_reg_dirty_49_write_1__SEL_2,
       MUX_v_reg_dirty_5_write_1__SEL_1,
       MUX_v_reg_dirty_5_write_1__SEL_2,
       MUX_v_reg_dirty_50_write_1__SEL_1,
       MUX_v_reg_dirty_50_write_1__SEL_2,
       MUX_v_reg_dirty_51_write_1__SEL_1,
       MUX_v_reg_dirty_51_write_1__SEL_2,
       MUX_v_reg_dirty_52_write_1__SEL_1,
       MUX_v_reg_dirty_52_write_1__SEL_2,
       MUX_v_reg_dirty_53_write_1__SEL_1,
       MUX_v_reg_dirty_53_write_1__SEL_2,
       MUX_v_reg_dirty_54_write_1__SEL_1,
       MUX_v_reg_dirty_54_write_1__SEL_2,
       MUX_v_reg_dirty_55_write_1__SEL_1,
       MUX_v_reg_dirty_55_write_1__SEL_2,
       MUX_v_reg_dirty_56_write_1__SEL_1,
       MUX_v_reg_dirty_56_write_1__SEL_2,
       MUX_v_reg_dirty_57_write_1__SEL_1,
       MUX_v_reg_dirty_57_write_1__SEL_2,
       MUX_v_reg_dirty_58_write_1__SEL_1,
       MUX_v_reg_dirty_58_write_1__SEL_2,
       MUX_v_reg_dirty_59_write_1__SEL_1,
       MUX_v_reg_dirty_59_write_1__SEL_2,
       MUX_v_reg_dirty_6_write_1__SEL_1,
       MUX_v_reg_dirty_6_write_1__SEL_2,
       MUX_v_reg_dirty_60_write_1__SEL_1,
       MUX_v_reg_dirty_60_write_1__SEL_2,
       MUX_v_reg_dirty_61_write_1__SEL_1,
       MUX_v_reg_dirty_61_write_1__SEL_2,
       MUX_v_reg_dirty_62_write_1__SEL_1,
       MUX_v_reg_dirty_62_write_1__SEL_2,
       MUX_v_reg_dirty_63_write_1__SEL_1,
       MUX_v_reg_dirty_63_write_1__SEL_2,
       MUX_v_reg_dirty_7_write_1__SEL_1,
       MUX_v_reg_dirty_7_write_1__SEL_2,
       MUX_v_reg_dirty_8_write_1__SEL_1,
       MUX_v_reg_dirty_8_write_1__SEL_2,
       MUX_v_reg_dirty_9_write_1__SEL_1,
       MUX_v_reg_dirty_9_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d1647;
  reg TASK_testplusargs___d1648;
  reg TASK_testplusargs___d1649;
  reg [63 : 0] v__h108299;
  reg TASK_testplusargs___d1654;
  reg TASK_testplusargs___d1655;
  reg TASK_testplusargs___d1656;
  reg [63 : 0] v__h108451;
  reg TASK_testplusargs___d1667;
  reg TASK_testplusargs___d1668;
  reg TASK_testplusargs___d1669;
  reg [63 : 0] v__h108613;
  reg TASK_testplusargs___d1736;
  reg TASK_testplusargs___d1737;
  reg TASK_testplusargs___d1738;
  reg [63 : 0] v__h109456;
  reg TASK_testplusargs___d1759;
  reg TASK_testplusargs___d1760;
  reg TASK_testplusargs___d1761;
  reg [63 : 0] v__h109644;
  reg TASK_testplusargs___d1771;
  reg TASK_testplusargs___d1772;
  reg TASK_testplusargs___d1773;
  reg [63 : 0] v__h109840;
  reg TASK_testplusargs___d1792;
  reg TASK_testplusargs___d1793;
  reg TASK_testplusargs___d1794;
  reg [63 : 0] v__h109978;
  reg TASK_testplusargs___d1801;
  reg TASK_testplusargs___d1802;
  reg TASK_testplusargs___d1803;
  reg [63 : 0] v__h112125;
  reg TASK_testplusargs___d236;
  reg TASK_testplusargs___d237;
  reg TASK_testplusargs___d238;
  reg [63 : 0] v__h33369;
  reg TASK_testplusargs___d246;
  reg TASK_testplusargs___d247;
  reg TASK_testplusargs___d248;
  reg [63 : 0] v__h33531;
  reg TASK_testplusargs___d304;
  reg TASK_testplusargs___d305;
  reg TASK_testplusargs___d306;
  reg [63 : 0] v__h35709;
  reg TASK_testplusargs___d312;
  reg TASK_testplusargs___d313;
  reg TASK_testplusargs___d314;
  reg [63 : 0] v__h35870;
  reg TASK_testplusargs___d320;
  reg TASK_testplusargs___d321;
  reg TASK_testplusargs___d322;
  reg [63 : 0] v__h35977;
  reg TASK_testplusargs___d357;
  reg TASK_testplusargs___d358;
  reg TASK_testplusargs___d359;
  reg [63 : 0] v__h37164;
  reg TASK_testplusargs___d370;
  reg TASK_testplusargs___d371;
  reg TASK_testplusargs___d372;
  reg [63 : 0] v__h37014;
  reg TASK_testplusargs___d386;
  reg TASK_testplusargs___d387;
  reg TASK_testplusargs___d388;
  reg [63 : 0] v__h37360;
  reg TASK_testplusargs___d396;
  reg TASK_testplusargs___d397;
  reg TASK_testplusargs___d398;
  reg [63 : 0] v__h37533;
  reg TASK_testplusargs___d407;
  reg TASK_testplusargs___d408;
  reg TASK_testplusargs___d409;
  reg [63 : 0] v__h37657;
  reg TASK_testplusargs___d1219;
  reg TASK_testplusargs___d1220;
  reg TASK_testplusargs___d1221;
  reg [63 : 0] v__h90292;
  reg TASK_testplusargs___d1188;
  reg TASK_testplusargs___d1189;
  reg TASK_testplusargs___d1190;
  reg [63 : 0] v__h89595;
  reg TASK_testplusargs___d1196;
  reg TASK_testplusargs___d1197;
  reg TASK_testplusargs___d1198;
  reg [63 : 0] v__h89808;
  reg TASK_testplusargs___d1203;
  reg TASK_testplusargs___d1204;
  reg TASK_testplusargs___d1205;
  reg [63 : 0] v__h90021;
  reg TASK_testplusargs___d1239;
  reg TASK_testplusargs___d1240;
  reg TASK_testplusargs___d1241;
  reg [63 : 0] v__h90589;
  reg TASK_testplusargs___d30;
  reg TASK_testplusargs___d31;
  reg TASK_testplusargs___d32;
  reg [63 : 0] v__h16894;
  reg TASK_testplusargs___d36;
  reg TASK_testplusargs___d37;
  reg TASK_testplusargs___d38;
  reg [63 : 0] v__h17049;
  reg TASK_testplusargs___d186;
  reg TASK_testplusargs___d187;
  reg TASK_testplusargs___d188;
  reg [63 : 0] v__h21413;
  reg TASK_testplusargs___d439;
  reg TASK_testplusargs___d440;
  reg TASK_testplusargs___d441;
  reg [63 : 0] v__h37865;
  reg TASK_testplusargs___d456;
  reg TASK_testplusargs___d457;
  reg TASK_testplusargs___d458;
  reg [63 : 0] v__h38153;
  reg TASK_testplusargs___d473;
  reg TASK_testplusargs___d474;
  reg TASK_testplusargs___d475;
  reg [63 : 0] v__h38380;
  reg TASK_testplusargs___d548;
  reg TASK_testplusargs___d549;
  reg TASK_testplusargs___d550;
  reg [63 : 0] v__h47152;
  reg TASK_testplusargs___d555;
  reg TASK_testplusargs___d556;
  reg TASK_testplusargs___d557;
  reg [63 : 0] v__h47351;
  reg TASK_testplusargs___d567;
  reg TASK_testplusargs___d568;
  reg TASK_testplusargs___d569;
  reg [63 : 0] v__h47660;
  reg TASK_testplusargs___d1105;
  reg TASK_testplusargs___d1106;
  reg TASK_testplusargs___d1107;
  reg [63 : 0] v__h87387;
  reg TASK_testplusargs___d1150;
  reg TASK_testplusargs___d1151;
  reg TASK_testplusargs___d1152;
  reg [63 : 0] v__h89120;
  reg TASK_testplusargs___d1161;
  reg TASK_testplusargs___d1162;
  reg TASK_testplusargs___d1163;
  reg [63 : 0] v__h89260;
  reg TASK_testplusargs___d1251;
  reg TASK_testplusargs___d1252;
  reg TASK_testplusargs___d1253;
  reg [63 : 0] v__h90831;
  reg TASK_testplusargs___d1290;
  reg TASK_testplusargs___d1291;
  reg TASK_testplusargs___d1292;
  reg [63 : 0] v__h93580;
  reg TASK_testplusargs___d1400;
  reg TASK_testplusargs___d1401;
  reg TASK_testplusargs___d1402;
  reg [63 : 0] v__h94602;
  reg TASK_testplusargs___d1409;
  reg TASK_testplusargs___d1410;
  reg TASK_testplusargs___d1411;
  reg [63 : 0] v__h94281;
  reg TASK_testplusargs___d1559;
  reg TASK_testplusargs___d1560;
  reg TASK_testplusargs___d1561;
  reg [63 : 0] v__h102622;
  reg m_fillbuffer_mav_polling_response_29_BIT_1_52__ETC___d375;
  reg m_fillbuffer_mav_polling_response_29_BIT_0_53__ETC___d391;
  reg NOT_m_fillbuffer_mav_polling_response_29_BIT_0_ETC___d401;
  reg NOT_m_fillbuffer_mav_polling_response_29_BIT_1_ETC___d412;
  reg TASK_testplusargs_150_OR_TASK_testplusargs_151_ETC___d1157;
  reg TASK_testplusargs_150_OR_TASK_testplusargs_151_ETC___d1159;
  reg SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1405;
  reg rg_release_readphase_32_AND_TASK_testplusargs__ETC___d1414;
  reg NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1564;
  reg SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1776;
  reg NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1797;
  reg SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191;
  reg NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d362;
  reg wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d376;
  reg wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d393;
  reg wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d403;
  reg wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d413;
  reg TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d452;
  reg TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d454;
  reg TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d469;
  reg TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d471;
  reg IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d553;
  reg IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d560;
  reg IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d572;
  reg TASK_testplusargs_105_OR_TASK_testplusargs_106_ETC___d1125;
  reg TASK_testplusargs_105_OR_TASK_testplusargs_106_ETC___d1126;
  reg NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1155;
  reg NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1166;
  reg wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1193;
  reg NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d1201;
  reg wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1208;
  reg TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1227;
  reg TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1229;
  reg TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1231;
  reg TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1233;
  reg TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1245;
  reg TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1246;
  reg TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1247;
  reg TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1248;
  reg NOT_wr_cache_enable_wget__92_47_OR_rg_recent_i_ETC___d1652;
  reg TASK_testplusargs_654_OR_TASK_testplusargs_655_ETC___d1661;
  reg TASK_testplusargs_654_OR_TASK_testplusargs_655_ETC___d1663;
  reg TASK_testplusargs_736_OR_TASK_testplusargs_737_ETC___d1744;
  reg TASK_testplusargs_736_OR_TASK_testplusargs_737_ETC___d1758;
  reg TASK_testplusargs_759_OR_TASK_testplusargs_760_ETC___d1765;
  reg TASK_testplusargs_759_OR_TASK_testplusargs_760_ETC___d1766;
  reg NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_3_ETC___d1806;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746,
	       value__h109714,
	       value__h109720,
	       x__h38610,
	       x__h75224,
	       x__h87787,
	       y__h38609,
	       y__h75112;
  reg [3 : 0] SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254,
	      bs__h17113,
	      bs__h19139,
	      bs__h79452,
	      dirty__h90939,
	      valid__h90938;
  reg [2 : 0] SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_37_T_ETC___d1752;
  reg [1 : 0] SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_1_TO_ETC___d1756,
	      SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368;
  reg SEL_ARR_NOT_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1743,
      SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769,
      SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1750,
      lv_sign__h47751;
  wire [511 : 0] x_data__h110078;
  wire [31 : 0] final_address__h16980,
		lv_evict_address__h94162,
		lv_response_word__h36138,
		lv_response_word__h47820,
		lv_response_word__h47824,
		m_storebuffer_v_sb_meta_0_45_BITS_34_TO_3_50_A_ETC___d499,
		m_storebuffer_v_sb_meta_1_62_BITS_34_TO_3_67_A_ETC___d518,
		n__h38459,
		phyaddr__h33288,
		phyaddr__h89383,
		response_word__h33733,
		response_word__h90421,
		storedata__h38313,
		storemask__h38312,
		x__h38450,
		x__h38608,
		x__h46445,
		x__h46507,
		x__h46701,
		x__h75109,
		x__h75111,
		x__h75124,
		x__h75126,
		x__h88937,
		y__h46446,
		y__h46702,
		y__h75110,
		y__h75125,
		y__h75127,
		y__h75225;
  wire [7 : 0] x_burst_len__h89405;
  wire [6 : 0] _theResult____h21510, fn_pmp_lookup___d272;
  wire [5 : 0] lv_cause__h33290,
	       lv_response_cause__h33749,
	       lv_response_cause__h47822,
	       set_index__h108005;
  wire [4 : 0] x__h33753;
  wire [3 : 0] lv_hitmask__h33463,
	       wayselect__h94358,
	       x__h36162,
	       x__h80874,
	       y__h80890,
	       y__h99783;
  wire [2 : 0] burst_size__h89379,
	       fbindex__h87521,
	       x__h34838,
	       x__h35422,
	       x__h35434,
	       x__h35446,
	       x_burst_size__h110080,
	       y__h35423,
	       y__h35435,
	       y__h35447;
  wire [1 : 0] IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434,
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424,
	       IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429,
	       i__h79453,
	       pmp_access__h33291,
	       v__h90935,
	       x__h28195,
	       x__h46841,
	       x__h46853,
	       y__h46842,
	       y__h46854;
  wire IF_ff_core_request_first__1_BITS_33_TO_32_67_E_ETC___d882,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d583,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d596,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d604,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d613,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d621,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d630,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d638,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d647,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d655,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d664,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d672,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d681,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d689,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d698,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d706,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d715,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d723,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d732,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d740,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d749,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d757,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d766,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d774,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d783,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d791,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d800,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d808,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d817,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d825,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d834,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d842,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d851,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d859,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d905,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d913,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d922,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d930,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d939,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d947,
       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d956,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d578,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d590,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d594,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d602,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d611,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d619,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d628,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d636,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d645,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d653,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d662,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d670,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d679,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d687,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d696,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d704,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d713,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d721,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d730,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d738,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d747,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d755,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d764,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d772,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d781,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d789,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d798,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d806,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d815,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d823,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d832,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d840,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d849,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d857,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d903,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d911,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d920,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d928,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d937,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d945,
       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d954,
       IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d1179,
       NOT_0_CONCAT_m_tag_mv_read_response_ff_core_re_ETC___d303,
       NOT_IF_wr_fb_state_whas__32_THEN_wr_fb_state_w_ETC___d1118,
       NOT_IF_wr_nc_state_whas__22_THEN_wr_nc_state_w_ETC___d1114,
       NOT_IF_wr_ram_state_whas__27_THEN_wr_ram_state_ETC___d1122,
       NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570,
       NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127,
       NOT_ff_core_request_notEmpty__258_259_AND_NOT__ETC___d1269,
       NOT_m_fillbuffer_mv_release_info__98_BIT_1_391_ETC___d1569,
       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767,
       SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d1390,
       SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177,
       SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110,
       SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1389,
       SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392,
       b__h46861,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_0_ETC___d974,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1001,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1003,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1005,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1007,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1009,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1011,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1013,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1015,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d979,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d997,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d999,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1017,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1019,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1021,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1023,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1025,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1027,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1029,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1031,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1033,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1035,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d981,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1037,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1039,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1041,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1043,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1045,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1047,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1049,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1051,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1053,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1055,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d983,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1057,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1059,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1061,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1063,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1065,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1067,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1069,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1071,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1073,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1075,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d985,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1077,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1079,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1081,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1083,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1085,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1087,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1089,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1091,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1093,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1095,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d987,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1097,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1099,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1101,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1103,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d989,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_7_ETC___d991,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_8_ETC___d993,
       ff_core_request_first__1_BITS_50_TO_45_53_EQ_9_ETC___d995,
       ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348,
       ff_core_request_first__1_BIT_38_2_AND_rg_fence_ETC___d22,
       lv_response_epochs__h47823,
       m_fillbuffer_mv_fbfull__29_OR_rg_fence_stall_3_ETC___d1276,
       m_fillbuffer_mv_fbfull__29_OR_rg_fence_stall_3_ETC___d1287,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1267,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1426,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1429,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1431,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1433,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1435,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1437,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1439,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1441,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1443,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1445,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1447,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1449,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1451,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1453,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1455,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1457,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1459,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1461,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1463,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1465,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1467,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1469,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1471,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1473,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1475,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1477,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1479,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1481,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1483,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1485,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1487,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1489,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1491,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1493,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1495,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1497,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1499,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1501,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1503,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1505,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1507,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1509,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1511,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1513,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1515,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1517,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1519,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1521,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1523,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1525,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1527,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1529,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1531,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1533,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1535,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1537,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1539,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1541,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1543,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1545,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1547,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1549,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1551,
       m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1553,
       m_storebuffer_v_sb_meta_0_45_BITS_102_TO_73_80_ETC___d482,
       m_storebuffer_v_sb_meta_1_62_BITS_102_TO_73_00_ETC___d501,
       rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643,
       wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d369,
       wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d380,
       wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d395,
       wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d406,
       wr_fault_whas__19_AND_wr_fault_wget__20_21_OR__ETC___d431,
       x__h38612,
       x__read__h3224,
       x__read__h3294,
       x__read__h3364,
       x__read__h3434,
       x_wget__h3213,
       x_wget__h3283,
       x_wget__h3353,
       x_wget__h3423,
       y__h77882;

  // action method put_core_req_put
  assign RDY_put_core_req_put =
	     !ff_core_response_rv[40] && !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     EN_ma_cache_enable &&
	     ff_core_request_FULL_N ;
  assign CAN_FIRE_put_core_req_put = RDY_put_core_req_put ;
  assign WILL_FIRE_put_core_req_put = EN_put_core_req_put ;

  // actionvalue method get_core_resp_get
  assign get_core_resp_get = ff_core_response_rv_port1__read[39:0] ;
  assign RDY_get_core_resp_get = ff_core_response_rv_port1__read[40] ;
  assign CAN_FIRE_get_core_resp_get = ff_core_response_rv_port1__read[40] ;
  assign WILL_FIRE_get_core_resp_get = EN_get_core_resp_get ;

  // actionvalue method get_read_mem_req_get
  assign get_read_mem_req_get = ff_read_mem_request_D_OUT ;
  assign RDY_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign CAN_FIRE_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign WILL_FIRE_get_read_mem_req_get = EN_get_read_mem_req_get ;

  // action method put_read_mem_resp_put
  assign RDY_put_read_mem_resp_put = !ff_read_mem_response_rv[34] ;
  assign CAN_FIRE_put_read_mem_resp_put = !ff_read_mem_response_rv[34] ;
  assign WILL_FIRE_put_read_mem_resp_put = EN_put_read_mem_resp_put ;

  // value method mv_write_mem_req
  assign mv_write_mem_req = ff_write_mem_request_D_OUT ;
  assign RDY_mv_write_mem_req = ff_write_mem_request_EMPTY_N ;

  // action method ma_write_mem_req_deq
  assign RDY_ma_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign CAN_FIRE_ma_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign WILL_FIRE_ma_write_mem_req_deq = EN_ma_write_mem_req_deq ;

  // action method put_write_mem_resp_put
  assign RDY_put_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign CAN_FIRE_put_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign WILL_FIRE_put_write_mem_resp_put = EN_put_write_mem_resp_put ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // value method mv_perf_counters
  assign mv_perf_counters =
	     { wr_total_read_access_whas,
	       wr_total_write_access_whas,
	       1'b0,
	       x__read__h3224,
	       x__read__h3294,
	       x__read__h3364,
	       x__read__h3434,
	       1'b0,
	       wr_total_read_fb_hits_whas,
	       wr_total_write_fb_hits_whas,
	       1'b0,
	       wr_total_fb_releases_whas,
	       MUX_ff_write_mem_request_enq_1__SEL_2 } ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // value method mv_storebuffer_empty
  assign mv_storebuffer_empty =
	     !m_storebuffer_v_sb_valid_0 && !m_storebuffer_v_sb_valid_1 ;
  assign RDY_mv_storebuffer_empty = 1'd1 ;

  // action method ma_perform_store
  assign RDY_ma_perform_store =
	     (m_storebuffer_v_sb_valid_0 || m_storebuffer_v_sb_valid_1) &&
	     ff_write_mem_request_FULL_N ;
  assign CAN_FIRE_ma_perform_store =
	     (m_storebuffer_v_sb_valid_0 || m_storebuffer_v_sb_valid_1) &&
	     ff_write_mem_request_FULL_N ;
  assign WILL_FIRE_ma_perform_store = EN_ma_perform_store ;

  // value method mv_cacheable_store
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0: mv_cacheable_store = !m_storebuffer_v_sb_meta_0[2];
      1'd1: mv_cacheable_store = !m_storebuffer_v_sb_meta_1[2];
    endcase
  end
  assign RDY_mv_cacheable_store = 1'd1 ;

  // value method mv_cache_available
  assign mv_cache_available =
	     !ff_core_response_rv[40] && ff_core_request_FULL_N &&
	     !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     (!m_storebuffer_v_sb_valid_0 || !m_storebuffer_v_sb_valid_1) &&
	     !m_storebuffer_rg_sb_busy ;
  assign RDY_mv_cache_available = 1'd1 ;

  // value method mv_commit_store_ready
  assign mv_commit_store_ready =
	     ff_write_mem_request_FULL_N && !m_storebuffer_rg_sb_busy ;
  assign RDY_mv_commit_store_ready = 1'd1 ;

  // submodule ff_core_request
  FIFO2 #(.width(32'd71), .guarded(1'd1)) ff_core_request(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_core_request_D_IN),
							  .ENQ(ff_core_request_ENQ),
							  .DEQ(ff_core_request_DEQ),
							  .CLR(ff_core_request_CLR),
							  .D_OUT(ff_core_request_D_OUT),
							  .FULL_N(ff_core_request_FULL_N),
							  .EMPTY_N(ff_core_request_EMPTY_N));

  // submodule ff_pending_req
  FIFO2 #(.width(32'd8), .guarded(1'd0)) ff_pending_req(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ff_pending_req_D_IN),
							.ENQ(ff_pending_req_ENQ),
							.DEQ(ff_pending_req_DEQ),
							.CLR(ff_pending_req_CLR),
							.D_OUT(ff_pending_req_D_OUT),
							.FULL_N(ff_pending_req_FULL_N),
							.EMPTY_N(ff_pending_req_EMPTY_N));

  // submodule ff_read_mem_request
  FIFO2 #(.width(32'd44), .guarded(1'd1)) ff_read_mem_request(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ff_read_mem_request_D_IN),
							      .ENQ(ff_read_mem_request_ENQ),
							      .DEQ(ff_read_mem_request_DEQ),
							      .CLR(ff_read_mem_request_CLR),
							      .D_OUT(ff_read_mem_request_D_OUT),
							      .FULL_N(ff_read_mem_request_FULL_N),
							      .EMPTY_N(ff_read_mem_request_EMPTY_N));

  // submodule ff_write_mem_request
  FIFO1 #(.width(32'd556), .guarded(1'd1)) ff_write_mem_request(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ff_write_mem_request_D_IN),
								.ENQ(ff_write_mem_request_ENQ),
								.DEQ(ff_write_mem_request_DEQ),
								.CLR(ff_write_mem_request_CLR),
								.D_OUT(ff_write_mem_request_D_OUT),
								.FULL_N(ff_write_mem_request_FULL_N),
								.EMPTY_N(ff_write_mem_request_EMPTY_N));

  // submodule m_data
  mkdcache_data #(.id(id)) m_data(.CLK(CLK),
				  .RST_N(RST_N),
				  .ma_request_banks(m_data_ma_request_banks),
				  .ma_request_dataline(m_data_ma_request_dataline),
				  .ma_request_index(m_data_ma_request_index),
				  .ma_request_read_write(m_data_ma_request_read_write),
				  .ma_request_way(m_data_ma_request_way),
				  .mv_read_response_blocknum(m_data_mv_read_response_blocknum),
				  .mv_read_response_wayselect(m_data_mv_read_response_wayselect),
				  .EN_ma_request(m_data_EN_ma_request),
				  .RDY_ma_request(),
				  .mv_read_response(m_data_mv_read_response),
				  .RDY_mv_read_response());

  // submodule m_fillbuffer
  mkdcache_fb_v2 #(.id(id)) m_fillbuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_fill_from_memory_fbindex(m_fillbuffer_ma_fill_from_memory_fbindex),
					 .ma_fill_from_memory_init_bank(m_fillbuffer_ma_fill_from_memory_init_bank),
					 .ma_fill_from_memory_mem_resp(m_fillbuffer_ma_fill_from_memory_mem_resp),
					 .ma_from_storebuffer_address(m_fillbuffer_ma_from_storebuffer_address),
					 .ma_from_storebuffer_dataword(m_fillbuffer_ma_from_storebuffer_dataword),
					 .ma_from_storebuffer_fbindex(m_fillbuffer_ma_from_storebuffer_fbindex),
					 .ma_from_storebuffer_mask(m_fillbuffer_ma_from_storebuffer_mask),
					 .mav_allocate_line_address(m_fillbuffer_mav_allocate_line_address),
					 .mav_allocate_line_dataline(m_fillbuffer_mav_allocate_line_dataline),
					 .mav_allocate_line_dirty(m_fillbuffer_mav_allocate_line_dirty),
					 .mav_allocate_line_from_ram(m_fillbuffer_mav_allocate_line_from_ram),
					 .mav_polling_response_address(m_fillbuffer_mav_polling_response_address),
					 .mav_polling_response_fbindex(m_fillbuffer_mav_polling_response_fbindex),
					 .mav_polling_response_fill(m_fillbuffer_mav_polling_response_fill),
					 .EN_mav_allocate_line(m_fillbuffer_EN_mav_allocate_line),
					 .EN_ma_fill_from_memory(m_fillbuffer_EN_ma_fill_from_memory),
					 .EN_ma_from_storebuffer(m_fillbuffer_EN_ma_from_storebuffer),
					 .EN_ma_perform_release(m_fillbuffer_EN_ma_perform_release),
					 .EN_mav_polling_response(m_fillbuffer_EN_mav_polling_response),
					 .mv_fbfull(m_fillbuffer_mv_fbfull),
					 .mv_fbempty(m_fillbuffer_mv_fbempty),
					 .mv_fbhead_valid(m_fillbuffer_mv_fbhead_valid),
					 .mav_allocate_line(m_fillbuffer_mav_allocate_line),
					 .RDY_mav_allocate_line(),
					 .RDY_ma_fill_from_memory(),
					 .RDY_ma_from_storebuffer(),
					 .mv_release_info(m_fillbuffer_mv_release_info),
					 .RDY_mv_release_info(),
					 .RDY_ma_perform_release(),
					 .mav_polling_response(m_fillbuffer_mav_polling_response),
					 .RDY_mav_polling_response());

  // submodule m_tag
  mkdcache_tag #(.id(id)) m_tag(.CLK(CLK),
				.RST_N(RST_N),
				.ma_request_address(m_tag_ma_request_address),
				.ma_request_index(m_tag_ma_request_index),
				.ma_request_read_write(m_tag_ma_request_read_write),
				.ma_request_way(m_tag_ma_request_way),
				.mv_read_response_address_in(m_tag_mv_read_response_address_in),
				.mv_read_response_wayselect(m_tag_mv_read_response_wayselect),
				.EN_ma_request(m_tag_EN_ma_request),
				.RDY_ma_request(),
				.mv_read_response(m_tag_mv_read_response),
				.RDY_mv_read_response());

  // rule RL_rl_deq_write_resp
  assign CAN_FIRE_RL_rl_deq_write_resp =
	     ff_core_request_EMPTY_N && rg_fence_pending &&
	     ff_core_request_D_OUT[38] ;
  assign WILL_FIRE_RL_rl_deq_write_resp = CAN_FIRE_RL_rl_deq_write_resp ;

  // rule RL_rl_deq_write_response
  assign CAN_FIRE_RL_rl_deq_write_response =
	     ff_write_mem_response_rv_port1__read[1] ;
  assign WILL_FIRE_RL_rl_deq_write_response =
	     CAN_FIRE_RL_rl_deq_write_response ;

  // rule RL_rl_ram_check
  assign CAN_FIRE_RL_rl_ram_check =
	     ff_core_request_EMPTY_N && EN_ma_curr_priv &&
	     EN_ma_cache_enable &&
	     !ff_core_request_D_OUT[38] &&
	     !rg_handling_miss &&
	     !rg_performing_replay &&
	     !rg_polling_mode &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_release_readphase ;
  assign WILL_FIRE_RL_rl_ram_check = CAN_FIRE_RL_rl_ram_check ;

  // rule RL_rl_fillbuffer_check
  assign CAN_FIRE_RL_rl_fillbuffer_check =
	     ff_core_request_EMPTY_N && EN_ma_cache_enable &&
	     !ff_core_request_D_OUT[38] ;
  assign WILL_FIRE_RL_rl_fillbuffer_check = CAN_FIRE_RL_rl_fillbuffer_check ;

  // rule RL_rl_fill_from_memory
  assign CAN_FIRE_RL_rl_fill_from_memory =
	     ff_read_mem_response_rv_port1__read[34] &&
	     ff_pending_req_EMPTY_N &&
	     !ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_fill_from_memory = CAN_FIRE_RL_rl_fill_from_memory ;

  // rule RL_rl_send_memory_request
  assign CAN_FIRE_RL_rl_send_memory_request =
	     ff_core_request_EMPTY_N && EN_ma_cache_enable &&
	     ff_read_mem_request_FULL_N &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d1179 ;
  assign WILL_FIRE_RL_rl_send_memory_request =
	     CAN_FIRE_RL_rl_send_memory_request ;

  // rule RL_rl_capture_io_response
  assign CAN_FIRE_RL_rl_capture_io_response =
	     ff_read_mem_response_rv_port1__read[34] &&
	     ff_core_request_EMPTY_N &&
	     ff_pending_req_EMPTY_N &&
	     ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_capture_io_response =
	     CAN_FIRE_RL_rl_capture_io_response ;

  // rule RL_rl_fence_operation
  assign CAN_FIRE_RL_rl_fence_operation =
	     ff_core_request_EMPTY_N && ff_write_mem_request_FULL_N &&
	     !ff_core_response_rv[40] &&
	     ff_core_request_first__1_BIT_38_2_AND_rg_fence_ETC___d22 &&
	     !rg_fence_pending &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_fence_operation = CAN_FIRE_RL_rl_fence_operation ;

  // rule RL_rl_response_to_core
  assign CAN_FIRE_RL_rl_response_to_core =
	     ff_core_request_EMPTY_N && !ff_core_response_rv[40] &&
	     (!m_storebuffer_v_sb_valid_0 || !m_storebuffer_v_sb_valid_1) &&
	     EN_ma_cache_enable &&
	     !ff_core_request_D_OUT[38] &&
	     (wr_fault_whas__19_AND_wr_fault_wget__20_21_OR__ETC___d431 ||
	      IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	      2'd1) ;
  assign WILL_FIRE_RL_rl_response_to_core = CAN_FIRE_RL_rl_response_to_core ;

  // rule RL_rl_perform_replay
  assign CAN_FIRE_RL_rl_perform_replay = rg_performing_replay ;
  assign WILL_FIRE_RL_rl_perform_replay = rg_performing_replay ;

  // rule RL_rl_release_from_fillbuffer
  assign CAN_FIRE_RL_rl_release_from_fillbuffer =
	     ff_write_mem_request_FULL_N &&
	     m_fillbuffer_mv_fbfull__29_OR_rg_fence_stall_3_ETC___d1287 &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_release_from_fillbuffer =
	     CAN_FIRE_RL_rl_release_from_fillbuffer && !EN_put_core_req_put ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_rg_release_readphase__dreg_update
  assign CAN_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_ff_core_response_rv_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     (rg_fence_way == 2'd3 && _theResult____h21510 == 7'd64 ||
	      !rg_globaldirty) ;
  assign MUX_ff_write_mem_request_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 &&
	     SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110 ;
  assign MUX_ff_write_mem_request_enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ;
  assign MUX_ff_write_mem_request_enq_1__SEL_3 =
	     EN_ma_perform_store &&
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 ;
  assign MUX_m_data_ma_request_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ;
  assign MUX_m_data_ma_request_1__SEL_2 =
	     EN_put_core_req_put && ma_cache_enable_c &&
	     !rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643 ;
  assign MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ;
  assign MUX_m_storebuffer_v_sb_valid_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     m_storebuffer_rg_tail == 1'd0 &&
	     NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 ;
  assign MUX_m_storebuffer_v_sb_valid_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     m_storebuffer_rg_tail == 1'd1 &&
	     NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 ;
  assign MUX_rg_globaldirty_write_1__SEL_2 =
	     EN_ma_perform_store &&
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	     !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 ;
  assign MUX_rg_performing_replay_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__98_BIT_1_391_ETC___d1569 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1426 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_0_ETC___d974 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1429 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d979 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1447 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d997 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1449 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d999 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1451 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1001 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1453 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1003 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1455 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1005 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1457 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1007 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1459 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1009 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1461 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1011 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1463 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1013 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1465 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1015 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1431 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d981 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1467 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1017 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1469 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1019 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1471 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1021 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1473 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1023 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1475 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1025 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1477 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1027 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1479 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1029 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1481 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1031 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1483 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1033 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1485 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1035 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1433 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d983 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1487 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1037 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1489 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1039 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1491 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1041 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1493 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1043 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1495 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1045 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1497 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1047 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1499 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1049 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1501 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1051 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1503 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1053 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1505 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1055 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1435 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d985 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1507 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1057 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1509 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1059 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1511 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1061 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1513 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1063 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1515 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1065 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1517 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1067 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1519 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1069 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1521 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1071 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1523 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1073 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1525 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1075 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1437 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d987 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1527 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1077 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1529 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1079 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1531 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1081 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1533 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1083 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1535 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1085 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1537 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1087 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1539 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1089 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1541 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1091 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1543 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1093 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1545 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1095 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1439 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d989 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1547 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1097 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1549 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1099 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1551 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1101 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1553 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1103 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1441 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_7_ETC___d991 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1443 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_8_ETC___d993 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1445 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_9_ETC___d995 ;
  assign MUX_m_data_mv_read_response_2__VAL_2 = 4'd1 << rg_fence_way ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0,
	       ff_core_request_D_OUT[43:37] } ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       lv_response_word__h47820,
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d590,
	       lv_response_cause__h47822,
	       lv_response_epochs__h47823 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_1 =
	     { final_address__h16980,
	       m_data_mv_read_response[543:32],
	       12'd244 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_2 =
	     { lv_evict_address__h94162,
	       m_data_mv_read_response[543:32],
	       12'd244 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_3 =
	     { SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746,
	       x_data__h110078,
	       8'd0,
	       x_burst_size__h110080,
	       1'd1 } ;
  assign MUX_m_data_ma_request_1__VAL_1 =
	     !SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	     rg_release_readphase ;
  assign MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 = bs__h79452[i__h79453] ;
  assign MUX_replacement_v_count_0_write_1__VAL_2 =
	     SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 -
	     2'd1 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_1 =
	     m_fillbuffer_mv_release_info[0] ?
	       dirty__h90939 | wayselect__h94358 :
	       dirty__h90939 & y__h99783 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_2 = bs__h79452 & y__h80890 ;
  assign MUX_v_reg_valid_0_write_1__VAL_1 =
	     valid__h90938 | wayselect__h94358 ;
  assign MUX_v_reg_valid_0_write_1__VAL_2 =
	     SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 &
	     y__h80890 ;

  // inlined wires
  assign rg_release_readphase_1_whas =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 &&
	     !rg_release_readphase ;
  assign wr_fault_whas =
	     WILL_FIRE_RL_rl_ram_check && fn_pmp_lookup___d272[6] ;
  assign wr_ram_state_wget =
	     (lv_hitmask__h33463 != 4'd0 && ma_cache_enable_c) ? 2'd1 : 2'd0 ;
  assign wr_ram_state_whas =
	     WILL_FIRE_RL_rl_ram_check && !fn_pmp_lookup___d272[6] ;
  assign wr_ram_response_wget =
	     { response_word__h33733,
	       fn_pmp_lookup___d272[6],
	       lv_response_cause__h33749,
	       ff_core_request_D_OUT[37] } ;
  assign wr_fb_state_wget =
	     ((!ma_cache_enable_c ||
	       ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) &&
	      ff_core_request_D_OUT[36:35] != 2'd0) ?
	       2'd1 :
	       (m_fillbuffer_mav_polling_response[1] ?
		  (m_fillbuffer_mav_polling_response[0] ? 2'd1 : 2'd2) :
		  2'd0) ;
  assign wr_fb_response_wget =
	     { lv_response_word__h36138,
	       m_fillbuffer_mav_polling_response[42],
	       lv_cause__h33290,
	       ff_core_request_D_OUT[37] } ;
  assign wr_nc_response_wget =
	     { response_word__h90421,
	       ff_read_mem_response_rv_port1__read[0],
	       lv_cause__h33290,
	       ff_core_request_D_OUT[37] } ;
  assign wr_total_read_access_whas =
	     EN_put_core_req_put && put_core_req_put[36:35] == 2'd0 ;
  assign wr_total_write_access_whas =
	     EN_put_core_req_put && put_core_req_put[36:35] == 2'd1 ;
  assign wr_total_io_reads_whas =
	     WILL_FIRE_RL_rl_send_memory_request &&
	     (!ma_cache_enable_c ||
	      ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) ;
  assign wr_total_fb_releases_whas =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign wr_total_read_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[36:35] == 2'd0 ;
  assign wr_total_write_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[36:35] == 2'd1 ;
  assign wr_store_in_progress_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 ;
  assign _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget =
	     ma_cache_enable_c &&
	     !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ;
  assign ff_core_response_rv_EN_port0__write =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core ;
  assign ff_core_response_rv_port0__write_1 =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       MUX_ff_core_response_rv_port0__write_1__VAL_1 :
	       MUX_ff_core_response_rv_port0__write_1__VAL_2 ;
  assign ff_core_response_rv_port1__read =
	     ff_core_response_rv_EN_port0__write ?
	       ff_core_response_rv_port0__write_1 :
	       ff_core_response_rv ;
  assign ff_core_response_rv_port1__write_1 =
	     { 1'd0,
	       40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_core_response_rv_port2__read =
	     EN_get_core_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_core_response_rv_port1__read ;
  assign ff_read_mem_response_rv_port0__write_1 =
	     { 1'd1, put_read_mem_resp_put } ;
  assign ff_read_mem_response_rv_port1__read =
	     EN_put_read_mem_resp_put ?
	       ff_read_mem_response_rv_port0__write_1 :
	       ff_read_mem_response_rv ;
  assign ff_read_mem_response_rv_EN_port1__write =
	     WILL_FIRE_RL_rl_capture_io_response ||
	     WILL_FIRE_RL_rl_fill_from_memory ;
  assign ff_read_mem_response_rv_port1__write_1 =
	     { 1'd0,
	       34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_read_mem_response_rv_port2__read =
	     ff_read_mem_response_rv_EN_port1__write ?
	       ff_read_mem_response_rv_port1__write_1 :
	       ff_read_mem_response_rv_port1__read ;
  assign ff_write_mem_response_rv_port0__write_1 =
	     { 1'd1, put_write_mem_resp_put } ;
  assign ff_write_mem_response_rv_port1__read =
	     EN_put_write_mem_resp_put ?
	       ff_write_mem_response_rv_port0__write_1 :
	       ff_write_mem_response_rv ;
  assign ff_write_mem_response_rv_port1__write_1 =
	     { 1'd0, 1'bx /* unspecified value */  } ;
  assign ff_write_mem_response_rv_port2__read =
	     ff_write_mem_response_rv_port1__read[1] ?
	       ff_write_mem_response_rv_port1__write_1 :
	       ff_write_mem_response_rv_port1__read ;

  // register ff_core_response_rv
  assign ff_core_response_rv_D_IN = ff_core_response_rv_port2__read ;
  assign ff_core_response_rv_EN = 1'b1 ;

  // register ff_hold_request_rv
  assign ff_hold_request_rv_D_IN = ff_hold_request_rv ;
  assign ff_hold_request_rv_EN = 1'b1 ;

  // register ff_read_mem_response_rv
  assign ff_read_mem_response_rv_D_IN = ff_read_mem_response_rv_port2__read ;
  assign ff_read_mem_response_rv_EN = 1'b1 ;

  // register ff_write_mem_response_rv
  assign ff_write_mem_response_rv_D_IN =
	     ff_write_mem_response_rv_port2__read ;
  assign ff_write_mem_response_rv_EN = 1'b1 ;

  // register m_storebuffer_rg_head
  assign m_storebuffer_rg_head_D_IN = m_storebuffer_rg_head + 1'd1 ;
  assign m_storebuffer_rg_head_EN = EN_ma_perform_store ;

  // register m_storebuffer_rg_sb_busy
  assign m_storebuffer_rg_sb_busy_D_IN = 1'b0 ;
  assign m_storebuffer_rg_sb_busy_EN = 1'b0 ;

  // register m_storebuffer_rg_tail
  assign m_storebuffer_rg_tail_D_IN = m_storebuffer_rg_tail + 1'd1 ;
  assign m_storebuffer_rg_tail_EN = wr_store_in_progress_whas ;

  // register m_storebuffer_v_sb_meta_0
  assign m_storebuffer_v_sb_meta_0_D_IN = m_storebuffer_v_sb_meta_1_D_IN ;
  assign m_storebuffer_v_sb_meta_0_EN =
	     MUX_m_storebuffer_v_sb_valid_0_write_1__SEL_1 ;

  // register m_storebuffer_v_sb_meta_1
  assign m_storebuffer_v_sb_meta_1_D_IN =
	     { ff_core_request_D_OUT[70:39],
	       x__h87787,
	       ff_core_request_D_OUT[37],
	       fbindex__h87521,
	       x__h88937,
	       !ma_cache_enable_c ||
	       ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348,
	       ff_core_request_D_OUT[33:32] } ;
  assign m_storebuffer_v_sb_meta_1_EN =
	     MUX_m_storebuffer_v_sb_valid_1_write_1__SEL_1 ;

  // register m_storebuffer_v_sb_valid_0
  assign m_storebuffer_v_sb_valid_0_D_IN =
	     MUX_m_storebuffer_v_sb_valid_0_write_1__SEL_1 ;
  assign m_storebuffer_v_sb_valid_0_EN =
	     WILL_FIRE_RL_rl_response_to_core &&
	     m_storebuffer_rg_tail == 1'd0 &&
	     NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 ||
	     EN_ma_perform_store && m_storebuffer_rg_head == 1'd0 ;

  // register m_storebuffer_v_sb_valid_1
  assign m_storebuffer_v_sb_valid_1_D_IN =
	     MUX_m_storebuffer_v_sb_valid_1_write_1__SEL_1 ;
  assign m_storebuffer_v_sb_valid_1_EN =
	     WILL_FIRE_RL_rl_response_to_core &&
	     m_storebuffer_rg_tail == 1'd1 &&
	     NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 ||
	     EN_ma_perform_store && m_storebuffer_rg_head == 1'd1 ;

  // register replacement_v_count_0
  assign replacement_v_count_0_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_1
  assign replacement_v_count_1_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_10
  assign replacement_v_count_10_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_11
  assign replacement_v_count_11_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_12
  assign replacement_v_count_12_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_13
  assign replacement_v_count_13_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_14
  assign replacement_v_count_14_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_15
  assign replacement_v_count_15_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_16
  assign replacement_v_count_16_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_17
  assign replacement_v_count_17_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_18
  assign replacement_v_count_18_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_19
  assign replacement_v_count_19_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_2
  assign replacement_v_count_2_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_20
  assign replacement_v_count_20_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_21
  assign replacement_v_count_21_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_22
  assign replacement_v_count_22_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_23
  assign replacement_v_count_23_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_24
  assign replacement_v_count_24_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_25
  assign replacement_v_count_25_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_26
  assign replacement_v_count_26_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_27
  assign replacement_v_count_27_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_28
  assign replacement_v_count_28_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_29
  assign replacement_v_count_29_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_3
  assign replacement_v_count_3_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_30
  assign replacement_v_count_30_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_31
  assign replacement_v_count_31_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_32
  assign replacement_v_count_32_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_33
  assign replacement_v_count_33_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_34
  assign replacement_v_count_34_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_35
  assign replacement_v_count_35_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_36
  assign replacement_v_count_36_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_37
  assign replacement_v_count_37_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_38
  assign replacement_v_count_38_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_39
  assign replacement_v_count_39_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_4
  assign replacement_v_count_4_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_40
  assign replacement_v_count_40_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_41
  assign replacement_v_count_41_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_42
  assign replacement_v_count_42_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_43
  assign replacement_v_count_43_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_44
  assign replacement_v_count_44_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_45
  assign replacement_v_count_45_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_46
  assign replacement_v_count_46_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_47
  assign replacement_v_count_47_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_48
  assign replacement_v_count_48_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_49
  assign replacement_v_count_49_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_5
  assign replacement_v_count_5_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_50
  assign replacement_v_count_50_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_51
  assign replacement_v_count_51_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_52
  assign replacement_v_count_52_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_53
  assign replacement_v_count_53_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_54
  assign replacement_v_count_54_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_55
  assign replacement_v_count_55_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_56
  assign replacement_v_count_56_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_57
  assign replacement_v_count_57_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_58
  assign replacement_v_count_58_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_59
  assign replacement_v_count_59_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_6
  assign replacement_v_count_6_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_60
  assign replacement_v_count_60_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_61
  assign replacement_v_count_61_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_62
  assign replacement_v_count_62_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_63
  assign replacement_v_count_63_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_7
  assign replacement_v_count_7_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_8
  assign replacement_v_count_8_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register replacement_v_count_9
  assign replacement_v_count_9_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_0_write_1__VAL_2 ;
  assign replacement_v_count_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 ;

  // register rg_fence_pending
  assign rg_fence_pending_D_IN = 1'd0 ;
  assign rg_fence_pending_EN = CAN_FIRE_RL_rl_deq_write_resp ;

  // register rg_fence_set
  assign rg_fence_set_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21510 == 7'd64 ||
	      !rg_globaldirty) ?
	       6'd0 :
	       _theResult____h21510[5:0] ;
  assign rg_fence_set_EN = CAN_FIRE_RL_rl_fence_operation ;

  // register rg_fence_stall
  assign rg_fence_stall_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 &&
	     put_core_req_put[38] ;
  assign rg_fence_stall_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     EN_put_core_req_put ;

  // register rg_fence_way
  assign rg_fence_way_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21510 == 7'd64 ||
	      !rg_globaldirty) ?
	       2'd0 :
	       x__h28195 ;
  assign rg_fence_way_EN = CAN_FIRE_RL_rl_fence_operation ;

  // register rg_globaldirty
  assign rg_globaldirty_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 ;
  assign rg_globaldirty_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     EN_ma_perform_store &&
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	     !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 ;

  // register rg_handling_miss
  assign rg_handling_miss_D_IN = !WILL_FIRE_RL_rl_response_to_core ;
  assign rg_handling_miss_EN =
	     WILL_FIRE_RL_rl_response_to_core ||
	     WILL_FIRE_RL_rl_send_memory_request ;

  // register rg_performing_replay
  assign rg_performing_replay_D_IN = MUX_rg_performing_replay_write_1__SEL_1 ;
  assign rg_performing_replay_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__98_BIT_1_391_ETC___d1569 ||
	     rg_performing_replay ;

  // register rg_polling_mode
  assign rg_polling_mode_D_IN =
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign rg_polling_mode_EN =
	     WILL_FIRE_RL_rl_fillbuffer_check &&
	     (ma_cache_enable_c &&
	      !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	      ff_core_request_D_OUT[36:35] == 2'd0) ;

  // register rg_recent_core_req
  assign rg_recent_core_req_D_IN = set_index__h108005 ;
  assign rg_recent_core_req_EN = EN_put_core_req_put ;

  // register rg_recent_index
  assign rg_recent_index_D_IN =
	     EN_put_core_req_put ? set_index__h108005 : rg_recent_index ;
  assign rg_recent_index_EN = EN_put_core_req_put || rg_performing_replay ;

  // register rg_release_readphase
  assign rg_release_readphase_D_IN = rg_release_readphase_1_whas ;
  assign rg_release_readphase_EN = 1'd1 ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = 1'b0 ;
  assign rg_wEpoch_EN = 1'b0 ;

  // register v_reg_dirty_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_0_D_IN = 4'd0;
    default: v_reg_dirty_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_0_ETC___d974 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1426 ;

  // register v_reg_dirty_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_1_D_IN = 4'd0;
    default: v_reg_dirty_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d979 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1429 ;

  // register v_reg_dirty_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_10_D_IN = 4'd0;
    default: v_reg_dirty_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d997 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1447 ;

  // register v_reg_dirty_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_11_D_IN = 4'd0;
    default: v_reg_dirty_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d999 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1449 ;

  // register v_reg_dirty_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_12_D_IN = 4'd0;
    default: v_reg_dirty_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1001 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1451 ;

  // register v_reg_dirty_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_13_D_IN = 4'd0;
    default: v_reg_dirty_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1003 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1453 ;

  // register v_reg_dirty_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_14_D_IN = 4'd0;
    default: v_reg_dirty_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1005 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1455 ;

  // register v_reg_dirty_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_15_D_IN = 4'd0;
    default: v_reg_dirty_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1007 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1457 ;

  // register v_reg_dirty_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_16_D_IN = 4'd0;
    default: v_reg_dirty_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1009 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1459 ;

  // register v_reg_dirty_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_17_D_IN = 4'd0;
    default: v_reg_dirty_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1011 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1461 ;

  // register v_reg_dirty_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_18_D_IN = 4'd0;
    default: v_reg_dirty_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1013 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1463 ;

  // register v_reg_dirty_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_19_D_IN = 4'd0;
    default: v_reg_dirty_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1015 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1465 ;

  // register v_reg_dirty_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_2_D_IN = 4'd0;
    default: v_reg_dirty_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d981 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1431 ;

  // register v_reg_dirty_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_20_D_IN = 4'd0;
    default: v_reg_dirty_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1017 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1467 ;

  // register v_reg_dirty_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_21_D_IN = 4'd0;
    default: v_reg_dirty_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1019 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1469 ;

  // register v_reg_dirty_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_22_D_IN = 4'd0;
    default: v_reg_dirty_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1021 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1471 ;

  // register v_reg_dirty_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_23_D_IN = 4'd0;
    default: v_reg_dirty_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1023 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1473 ;

  // register v_reg_dirty_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_24_D_IN = 4'd0;
    default: v_reg_dirty_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1025 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1475 ;

  // register v_reg_dirty_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_25_D_IN = 4'd0;
    default: v_reg_dirty_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1027 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1477 ;

  // register v_reg_dirty_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_26_D_IN = 4'd0;
    default: v_reg_dirty_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1029 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1479 ;

  // register v_reg_dirty_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_27_D_IN = 4'd0;
    default: v_reg_dirty_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1031 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1481 ;

  // register v_reg_dirty_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_28_D_IN = 4'd0;
    default: v_reg_dirty_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1033 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1483 ;

  // register v_reg_dirty_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_29_D_IN = 4'd0;
    default: v_reg_dirty_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1035 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1485 ;

  // register v_reg_dirty_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_3_D_IN = 4'd0;
    default: v_reg_dirty_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d983 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1433 ;

  // register v_reg_dirty_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_30_D_IN = 4'd0;
    default: v_reg_dirty_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1037 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1487 ;

  // register v_reg_dirty_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_31_D_IN = 4'd0;
    default: v_reg_dirty_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1039 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1489 ;

  // register v_reg_dirty_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_32_D_IN = 4'd0;
    default: v_reg_dirty_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1041 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1491 ;

  // register v_reg_dirty_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_33_D_IN = 4'd0;
    default: v_reg_dirty_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1043 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1493 ;

  // register v_reg_dirty_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_34_D_IN = 4'd0;
    default: v_reg_dirty_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1045 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1495 ;

  // register v_reg_dirty_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_35_D_IN = 4'd0;
    default: v_reg_dirty_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1047 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1497 ;

  // register v_reg_dirty_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_36_D_IN = 4'd0;
    default: v_reg_dirty_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1049 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1499 ;

  // register v_reg_dirty_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_37_D_IN = 4'd0;
    default: v_reg_dirty_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1051 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1501 ;

  // register v_reg_dirty_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_38_D_IN = 4'd0;
    default: v_reg_dirty_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1053 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1503 ;

  // register v_reg_dirty_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_39_D_IN = 4'd0;
    default: v_reg_dirty_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1055 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1505 ;

  // register v_reg_dirty_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_4_D_IN = 4'd0;
    default: v_reg_dirty_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d985 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1435 ;

  // register v_reg_dirty_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_40_D_IN = 4'd0;
    default: v_reg_dirty_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1057 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1507 ;

  // register v_reg_dirty_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_41_D_IN = 4'd0;
    default: v_reg_dirty_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1059 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1509 ;

  // register v_reg_dirty_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_42_D_IN = 4'd0;
    default: v_reg_dirty_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1061 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1511 ;

  // register v_reg_dirty_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_43_D_IN = 4'd0;
    default: v_reg_dirty_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1063 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1513 ;

  // register v_reg_dirty_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_44_D_IN = 4'd0;
    default: v_reg_dirty_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1065 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1515 ;

  // register v_reg_dirty_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_45_D_IN = 4'd0;
    default: v_reg_dirty_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1067 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1517 ;

  // register v_reg_dirty_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_46_D_IN = 4'd0;
    default: v_reg_dirty_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1069 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1519 ;

  // register v_reg_dirty_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_47_D_IN = 4'd0;
    default: v_reg_dirty_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1071 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1521 ;

  // register v_reg_dirty_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_48_D_IN = 4'd0;
    default: v_reg_dirty_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1073 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1523 ;

  // register v_reg_dirty_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_49_D_IN = 4'd0;
    default: v_reg_dirty_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1075 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1525 ;

  // register v_reg_dirty_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_5_D_IN = 4'd0;
    default: v_reg_dirty_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d987 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1437 ;

  // register v_reg_dirty_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_50_D_IN = 4'd0;
    default: v_reg_dirty_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1077 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1527 ;

  // register v_reg_dirty_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_51_D_IN = 4'd0;
    default: v_reg_dirty_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1079 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1529 ;

  // register v_reg_dirty_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_52_D_IN = 4'd0;
    default: v_reg_dirty_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1081 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1531 ;

  // register v_reg_dirty_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_53_D_IN = 4'd0;
    default: v_reg_dirty_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1083 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1533 ;

  // register v_reg_dirty_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_54_D_IN = 4'd0;
    default: v_reg_dirty_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1085 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1535 ;

  // register v_reg_dirty_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_55_D_IN = 4'd0;
    default: v_reg_dirty_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1087 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1537 ;

  // register v_reg_dirty_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_56_D_IN = 4'd0;
    default: v_reg_dirty_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1089 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1539 ;

  // register v_reg_dirty_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_57_D_IN = 4'd0;
    default: v_reg_dirty_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1091 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1541 ;

  // register v_reg_dirty_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_58_D_IN = 4'd0;
    default: v_reg_dirty_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1093 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1543 ;

  // register v_reg_dirty_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_59_D_IN = 4'd0;
    default: v_reg_dirty_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1095 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1545 ;

  // register v_reg_dirty_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_6_D_IN = 4'd0;
    default: v_reg_dirty_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d989 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1439 ;

  // register v_reg_dirty_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_60_D_IN = 4'd0;
    default: v_reg_dirty_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1097 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1547 ;

  // register v_reg_dirty_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_61_D_IN = 4'd0;
    default: v_reg_dirty_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1099 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1549 ;

  // register v_reg_dirty_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_62_D_IN = 4'd0;
    default: v_reg_dirty_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1101 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1551 ;

  // register v_reg_dirty_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_63_D_IN = 4'd0;
    default: v_reg_dirty_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1103 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1553 ;

  // register v_reg_dirty_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_7_D_IN = 4'd0;
    default: v_reg_dirty_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_7_ETC___d991 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1441 ;

  // register v_reg_dirty_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_8_D_IN = 4'd0;
    default: v_reg_dirty_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_8_ETC___d993 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1443 ;

  // register v_reg_dirty_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_9_D_IN = 4'd0;
    default: v_reg_dirty_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_9_ETC___d995 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1445 ;

  // register v_reg_valid_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_0_D_IN = 4'd0;
    default: v_reg_valid_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_0_ETC___d974 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1426 ;

  // register v_reg_valid_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_1_D_IN = 4'd0;
    default: v_reg_valid_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d979 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1429 ;

  // register v_reg_valid_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_10_D_IN = 4'd0;
    default: v_reg_valid_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d997 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1447 ;

  // register v_reg_valid_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_11_D_IN = 4'd0;
    default: v_reg_valid_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d999 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1449 ;

  // register v_reg_valid_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_12_D_IN = 4'd0;
    default: v_reg_valid_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1001 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1451 ;

  // register v_reg_valid_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_13_D_IN = 4'd0;
    default: v_reg_valid_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1003 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1453 ;

  // register v_reg_valid_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_14_D_IN = 4'd0;
    default: v_reg_valid_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1005 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1455 ;

  // register v_reg_valid_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_15_D_IN = 4'd0;
    default: v_reg_valid_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1007 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1457 ;

  // register v_reg_valid_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_16_D_IN = 4'd0;
    default: v_reg_valid_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1009 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1459 ;

  // register v_reg_valid_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_17_D_IN = 4'd0;
    default: v_reg_valid_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1011 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1461 ;

  // register v_reg_valid_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_18_D_IN = 4'd0;
    default: v_reg_valid_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1013 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1463 ;

  // register v_reg_valid_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_19_D_IN = 4'd0;
    default: v_reg_valid_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1015 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1465 ;

  // register v_reg_valid_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_2_D_IN = 4'd0;
    default: v_reg_valid_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d981 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1431 ;

  // register v_reg_valid_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_20_D_IN = 4'd0;
    default: v_reg_valid_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1017 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1467 ;

  // register v_reg_valid_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_21_D_IN = 4'd0;
    default: v_reg_valid_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1019 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1469 ;

  // register v_reg_valid_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_22_D_IN = 4'd0;
    default: v_reg_valid_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1021 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1471 ;

  // register v_reg_valid_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_23_D_IN = 4'd0;
    default: v_reg_valid_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1023 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1473 ;

  // register v_reg_valid_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_24_D_IN = 4'd0;
    default: v_reg_valid_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1025 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1475 ;

  // register v_reg_valid_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_25_D_IN = 4'd0;
    default: v_reg_valid_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1027 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1477 ;

  // register v_reg_valid_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_26_D_IN = 4'd0;
    default: v_reg_valid_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1029 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1479 ;

  // register v_reg_valid_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_27_D_IN = 4'd0;
    default: v_reg_valid_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1031 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1481 ;

  // register v_reg_valid_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_28_D_IN = 4'd0;
    default: v_reg_valid_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1033 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1483 ;

  // register v_reg_valid_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_29_D_IN = 4'd0;
    default: v_reg_valid_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1035 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1485 ;

  // register v_reg_valid_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_3_D_IN = 4'd0;
    default: v_reg_valid_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d983 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1433 ;

  // register v_reg_valid_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_30_D_IN = 4'd0;
    default: v_reg_valid_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1037 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1487 ;

  // register v_reg_valid_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_31_D_IN = 4'd0;
    default: v_reg_valid_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1039 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1489 ;

  // register v_reg_valid_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_32_D_IN = 4'd0;
    default: v_reg_valid_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1041 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1491 ;

  // register v_reg_valid_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_33_D_IN = 4'd0;
    default: v_reg_valid_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1043 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1493 ;

  // register v_reg_valid_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_34_D_IN = 4'd0;
    default: v_reg_valid_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1045 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1495 ;

  // register v_reg_valid_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_35_D_IN = 4'd0;
    default: v_reg_valid_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1047 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1497 ;

  // register v_reg_valid_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_36_D_IN = 4'd0;
    default: v_reg_valid_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1049 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1499 ;

  // register v_reg_valid_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_37_D_IN = 4'd0;
    default: v_reg_valid_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1051 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1501 ;

  // register v_reg_valid_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_38_D_IN = 4'd0;
    default: v_reg_valid_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1053 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1503 ;

  // register v_reg_valid_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_39_D_IN = 4'd0;
    default: v_reg_valid_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1055 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1505 ;

  // register v_reg_valid_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_4_D_IN = 4'd0;
    default: v_reg_valid_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d985 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1435 ;

  // register v_reg_valid_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_40_D_IN = 4'd0;
    default: v_reg_valid_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1057 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1507 ;

  // register v_reg_valid_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_41_D_IN = 4'd0;
    default: v_reg_valid_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1059 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1509 ;

  // register v_reg_valid_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_42_D_IN = 4'd0;
    default: v_reg_valid_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1061 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1511 ;

  // register v_reg_valid_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_43_D_IN = 4'd0;
    default: v_reg_valid_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1063 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1513 ;

  // register v_reg_valid_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_44_D_IN = 4'd0;
    default: v_reg_valid_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1065 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1515 ;

  // register v_reg_valid_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_45_D_IN = 4'd0;
    default: v_reg_valid_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1067 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1517 ;

  // register v_reg_valid_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_46_D_IN = 4'd0;
    default: v_reg_valid_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1069 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1519 ;

  // register v_reg_valid_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_47_D_IN = 4'd0;
    default: v_reg_valid_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1071 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1521 ;

  // register v_reg_valid_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_48_D_IN = 4'd0;
    default: v_reg_valid_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1073 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1523 ;

  // register v_reg_valid_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_49_D_IN = 4'd0;
    default: v_reg_valid_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1075 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1525 ;

  // register v_reg_valid_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_5_D_IN = 4'd0;
    default: v_reg_valid_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d987 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1437 ;

  // register v_reg_valid_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_50_D_IN = 4'd0;
    default: v_reg_valid_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1077 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1527 ;

  // register v_reg_valid_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_51_D_IN = 4'd0;
    default: v_reg_valid_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1079 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1529 ;

  // register v_reg_valid_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_52_D_IN = 4'd0;
    default: v_reg_valid_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1081 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1531 ;

  // register v_reg_valid_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_53_D_IN = 4'd0;
    default: v_reg_valid_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1083 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1533 ;

  // register v_reg_valid_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_54_D_IN = 4'd0;
    default: v_reg_valid_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1085 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1535 ;

  // register v_reg_valid_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_55_D_IN = 4'd0;
    default: v_reg_valid_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1087 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1537 ;

  // register v_reg_valid_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_56_D_IN = 4'd0;
    default: v_reg_valid_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1089 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1539 ;

  // register v_reg_valid_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_57_D_IN = 4'd0;
    default: v_reg_valid_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1091 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1541 ;

  // register v_reg_valid_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_58_D_IN = 4'd0;
    default: v_reg_valid_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1093 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1543 ;

  // register v_reg_valid_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_59_D_IN = 4'd0;
    default: v_reg_valid_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1095 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1545 ;

  // register v_reg_valid_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_6_D_IN = 4'd0;
    default: v_reg_valid_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d989 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1439 ;

  // register v_reg_valid_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_60_D_IN = 4'd0;
    default: v_reg_valid_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1097 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1547 ;

  // register v_reg_valid_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_61_D_IN = 4'd0;
    default: v_reg_valid_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1099 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1549 ;

  // register v_reg_valid_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_62_D_IN = 4'd0;
    default: v_reg_valid_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1101 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1551 ;

  // register v_reg_valid_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_63_D_IN = 4'd0;
    default: v_reg_valid_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1103 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1553 ;

  // register v_reg_valid_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_7_D_IN = 4'd0;
    default: v_reg_valid_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_7_ETC___d991 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1441 ;

  // register v_reg_valid_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_8_D_IN = 4'd0;
    default: v_reg_valid_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_8_ETC___d993 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1443 ;

  // register v_reg_valid_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_9_D_IN = 4'd0;
    default: v_reg_valid_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_first__1_BITS_50_TO_45_53_EQ_9_ETC___d995 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1445 ;

  // submodule ff_core_request
  assign ff_core_request_D_IN = put_core_req_put ;
  assign ff_core_request_ENQ = EN_put_core_req_put ;
  assign ff_core_request_DEQ =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core ;
  assign ff_core_request_CLR = 1'b0 ;

  // submodule ff_pending_req
  assign ff_pending_req_D_IN =
	     { ff_core_request_D_OUT[44:41],
	       m_fillbuffer_mav_allocate_line,
	       !ma_cache_enable_c ||
	       ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 } ;
  assign ff_pending_req_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_pending_req_DEQ =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_read_mem_response_rv_port1__read[1] ||
	     WILL_FIRE_RL_rl_capture_io_response ;
  assign ff_pending_req_CLR = 1'b0 ;

  // submodule ff_read_mem_request
  assign ff_read_mem_request_D_IN =
	     { phyaddr__h89383,
	       x_burst_len__h89405,
	       burst_size__h89379,
	       !ma_cache_enable_c ||
	       ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 } ;
  assign ff_read_mem_request_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_read_mem_request_DEQ = EN_get_read_mem_req_get ;
  assign ff_read_mem_request_CLR = 1'b0 ;

  // submodule ff_write_mem_request
  always@(MUX_ff_write_mem_request_enq_1__SEL_1 or
	  MUX_ff_write_mem_request_enq_1__VAL_1 or
	  MUX_ff_write_mem_request_enq_1__SEL_2 or
	  MUX_ff_write_mem_request_enq_1__VAL_2 or
	  MUX_ff_write_mem_request_enq_1__SEL_3 or
	  MUX_ff_write_mem_request_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_write_mem_request_enq_1__SEL_1:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_1;
      MUX_ff_write_mem_request_enq_1__SEL_2:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_2;
      MUX_ff_write_mem_request_enq_1__SEL_3:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_3;
      default: ff_write_mem_request_D_IN =
		   556'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ff_write_mem_request_ENQ =
	     WILL_FIRE_RL_rl_fence_operation &&
	     SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 &&
	     SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ||
	     EN_ma_perform_store &&
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 ;
  assign ff_write_mem_request_DEQ = EN_ma_write_mem_req_deq ;
  assign ff_write_mem_request_CLR = 1'b0 ;

  // submodule m_data
  assign m_data_ma_request_banks = 16'd65535 ;
  assign m_data_ma_request_dataline = m_fillbuffer_mv_release_info[545:34] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  m_fillbuffer_mv_release_info or
	  MUX_m_data_ma_request_1__SEL_2 or
	  set_index__h108005 or
	  rg_performing_replay or
	  rg_recent_core_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21510)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      MUX_m_data_ma_request_1__SEL_2:
	  m_data_ma_request_index = set_index__h108005;
      rg_performing_replay: m_data_ma_request_index = rg_recent_core_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_index = _theResult____h21510[5:0];
      default: m_data_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_1 &&
	     MUX_m_data_ma_request_1__VAL_1 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  v__h90935 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1: m_data_ma_request_way = v__h90935;
      MUX_m_data_ma_request_1__SEL_2:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      rg_performing_replay:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_data_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  ff_core_request_D_OUT or
	  WILL_FIRE_RL_rl_fence_operation or
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_data_mv_read_response_blocknum = ff_core_request_D_OUT[44:41];
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_mv_read_response_blocknum = 4'bxxxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_data_mv_read_response_blocknum = 4'bxxxx /* unspecified value */ ;
      default: m_data_mv_read_response_blocknum =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  lv_hitmask__h33463 or
	  WILL_FIRE_RL_rl_fence_operation or
	  MUX_m_data_mv_read_response_2__VAL_2 or
	  WILL_FIRE_RL_rl_release_from_fillbuffer or wayselect__h94358)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_data_mv_read_response_wayselect = lv_hitmask__h33463;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_mv_read_response_wayselect =
	      MUX_m_data_mv_read_response_2__VAL_2;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_data_mv_read_response_wayselect = wayselect__h94358;
      default: m_data_mv_read_response_wayselect =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_EN_ma_request =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     EN_put_core_req_put && ma_cache_enable_c &&
	     !rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643 ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // submodule m_fillbuffer
  assign m_fillbuffer_ma_fill_from_memory_fbindex =
	     ff_pending_req_D_OUT[3:1] ;
  assign m_fillbuffer_ma_fill_from_memory_init_bank =
	     ff_pending_req_D_OUT[7:4] ;
  assign m_fillbuffer_ma_fill_from_memory_mem_resp =
	     ff_read_mem_response_rv_port1__read[33:0] ;
  assign m_fillbuffer_ma_from_storebuffer_address =
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746 ;
  assign m_fillbuffer_ma_from_storebuffer_dataword = value__h109714 ;
  assign m_fillbuffer_ma_from_storebuffer_fbindex =
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_37_T_ETC___d1752 ;
  assign m_fillbuffer_ma_from_storebuffer_mask = value__h109720 ;
  assign m_fillbuffer_mav_allocate_line_address =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       ff_core_request_D_OUT[70:39] :
	       phyaddr__h89383 ;
  assign m_fillbuffer_mav_allocate_line_dataline =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       m_data_mv_read_response[543:32] :
	       512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_dirty =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 :
	       1'bx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_from_ram =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ;
  assign m_fillbuffer_mav_polling_response_address = phyaddr__h33288 ;
  assign m_fillbuffer_mav_polling_response_fbindex =
	     ff_pending_req_D_OUT[3:1] ;
  assign m_fillbuffer_mav_polling_response_fill = ff_pending_req_EMPTY_N ;
  assign m_fillbuffer_EN_mav_allocate_line =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign m_fillbuffer_EN_ma_fill_from_memory =
	     CAN_FIRE_RL_rl_fill_from_memory ;
  assign m_fillbuffer_EN_ma_from_storebuffer =
	     MUX_rg_globaldirty_write_1__SEL_2 ;
  assign m_fillbuffer_EN_ma_perform_release =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     (m_fillbuffer_mv_release_info[1] ||
	      !SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_EN_mav_polling_response =
	     CAN_FIRE_RL_rl_fillbuffer_check ;

  // submodule m_tag
  assign m_tag_ma_request_address = m_fillbuffer_mv_release_info[33:2] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  m_fillbuffer_mv_release_info or
	  MUX_m_data_ma_request_1__SEL_2 or
	  set_index__h108005 or
	  rg_performing_replay or
	  rg_recent_core_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21510)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      MUX_m_data_ma_request_1__SEL_2:
	  m_tag_ma_request_index = set_index__h108005;
      rg_performing_replay: m_tag_ma_request_index = rg_recent_core_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_index = _theResult____h21510[5:0];
      default: m_tag_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_1 &&
	     MUX_m_data_ma_request_1__VAL_1 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  v__h90935 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1: m_tag_ma_request_way = v__h90935;
      MUX_m_data_ma_request_1__SEL_2:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      rg_performing_replay:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  ff_core_request_D_OUT or
	  WILL_FIRE_RL_rl_fence_operation or
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_tag_mv_read_response_address_in = ff_core_request_D_OUT[70:39];
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_mv_read_response_address_in =
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_tag_mv_read_response_address_in =
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      default: m_tag_mv_read_response_address_in =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  WILL_FIRE_RL_rl_fence_operation or
	  rg_fence_way or
	  WILL_FIRE_RL_rl_release_from_fillbuffer or v__h90935)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_tag_mv_read_response_wayselect = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_mv_read_response_wayselect = rg_fence_way;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_tag_mv_read_response_wayselect = v__h90935;
      default: m_tag_mv_read_response_wayselect =
		   2'bxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_EN_ma_request =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     EN_put_core_req_put && ma_cache_enable_c &&
	     !rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643 ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // remaining internal signals
  module_fn_pmp_lookup instance_fn_pmp_lookup_0(.fn_pmp_lookup_req({ phyaddr__h33288,
								     pmp_access__h33291 }),
						.fn_pmp_lookup_priv(ma_curr_priv_c),
						.fn_pmp_lookup_pmpcfg({ { pmp_cfg_3,
									  pmp_cfg_2 },
									pmp_cfg_1,
									pmp_cfg_0 }),
						.fn_pmp_lookup_pmpaddr({ { pmp_addr_3,
									   pmp_addr_2 },
									 pmp_addr_1,
									 pmp_addr_0 }),
						.fn_pmp_lookup(fn_pmp_lookup___d272));
  assign IF_ff_core_request_first__1_BITS_33_TO_32_67_E_ETC___d882 =
	     lv_sign__h47751 & y__h77882 ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 =
	     CAN_FIRE_RL_rl_fillbuffer_check ? wr_fb_state_wget : 2'd2 ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d583 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[7] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d596 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[39] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d604 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[38] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d613 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[37] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d621 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[36] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d630 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[35] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d638 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[34] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d647 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[33] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d655 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[32] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d664 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[31] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d672 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[30] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d681 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[29] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d689 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[28] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d698 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[27] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d706 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[26] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d715 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[25] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d723 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[24] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d732 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[23] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d740 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[22] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d749 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[21] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d757 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[20] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d766 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[19] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d774 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[18] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d783 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[17] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d791 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[16] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d800 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[15] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d808 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[14] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d817 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[13] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d825 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[12] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d834 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[11] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d842 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[10] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d851 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[9] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d859 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[8] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d905 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[6] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d913 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[5] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d922 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[4] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d930 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[3] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d939 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[2] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d947 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[1] ;
  assign IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d956 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[0] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 =
	     CAN_FIRE_RL_rl_capture_io_response ? 2'd1 : 2'd2 ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d578 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[7] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d590 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d578 ||
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d583 ||
	     b__h46861 && wr_ram_response_wget[7] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d594 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[39] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d602 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[38] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d611 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[37] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d619 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[36] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d628 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[35] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d636 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[34] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d645 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[33] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d653 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[32] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d662 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[31] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d670 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[30] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d679 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[29] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d687 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[28] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d696 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[27] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d704 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[26] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d713 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[25] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d721 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[24] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d730 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[23] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d738 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[22] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d747 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[21] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d755 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[20] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d764 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[19] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d772 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[18] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d781 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[17] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d789 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[16] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d798 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[15] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d806 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[14] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d815 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[13] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d823 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[12] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d832 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[11] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d840 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[10] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d849 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[9] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d857 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[8] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d903 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[6] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d911 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[5] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d920 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[4] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d928 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[3] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d937 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[2] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d945 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[1] ;
  assign IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d954 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 &&
	     !wr_fault_whas &&
	     wr_nc_response_wget[0] ;
  assign IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d1179 =
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd0 &&
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	     2'd0 &&
	     !m_fillbuffer_mv_fbfull &&
	     !wr_fault_whas &&
	     !rg_handling_miss &&
	     !ff_core_request_D_OUT[38] &&
	     ff_pending_req_FULL_N ;
  assign IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 =
	     wr_ram_state_whas ? wr_ram_state_wget : 2'd2 ;
  assign NOT_0_CONCAT_m_tag_mv_read_response_ff_core_re_ETC___d303 =
	     x__h35422 + y__h35423 > 3'd1 ;
  assign NOT_IF_wr_fb_state_whas__32_THEN_wr_fb_state_w_ETC___d1118 =
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_fb_response_wget[7] ;
  assign NOT_IF_wr_nc_state_whas__22_THEN_wr_nc_state_w_ETC___d1114 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 !=
	     2'd1 ||
	     wr_fault_whas ||
	     !wr_nc_response_wget[7] ;
  assign NOT_IF_wr_ram_state_whas__27_THEN_wr_ram_state_ETC___d1122 =
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 !=
	     2'd1 &&
	     !wr_fault_whas ||
	     !wr_ram_response_wget[7] ;
  assign NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1570 =
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) &&
	     valid__h90938 == 4'd15 &&
	     (dirty__h90939 == 4'd15 || dirty__h90939 == 4'd0) ;
  assign NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 =
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     NOT_IF_wr_nc_state_whas__22_THEN_wr_nc_state_w_ETC___d1114 &&
	     NOT_IF_wr_fb_state_whas__32_THEN_wr_fb_state_w_ETC___d1118 &&
	     NOT_IF_wr_ram_state_whas__27_THEN_wr_ram_state_ETC___d1122 ;
  assign NOT_ff_core_request_notEmpty__258_259_AND_NOT__ETC___d1269 =
	     !ff_core_request_EMPTY_N && !EN_put_core_req_put &&
	     !m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1267 ;
  assign NOT_m_fillbuffer_mv_release_info__98_BIT_1_391_ETC___d1569 =
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) &&
	     (rg_release_readphase ||
	      m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1267) ;
  assign SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 =
	     SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1750 ==
	     ma_perform_store_currepoch ;
  assign SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d1390 =
	     dirty__h90939[v__h90935] ;
  assign SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 =
	     bs__h19139[rg_fence_way] ;
  assign SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110 =
	     bs__h17113[rg_fence_way] ;
  assign SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1389 =
	     valid__h90938[v__h90935] ;
  assign SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 =
	     SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1389 &
	     SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d1390 ;
  assign _theResult____h21510 =
	     (rg_fence_way == 2'd3) ?
	       { 1'd0, rg_fence_set } + 7'd1 :
	       { 1'd0, rg_fence_set } ;
  assign b__h46861 =
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 ||
	     wr_fault_whas ;
  assign burst_size__h89379 =
	     (!ma_cache_enable_c ||
	      ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) ?
	       { 1'd0, ff_core_request_D_OUT[33:32] } :
	       3'd2 ;
  assign fbindex__h87521 =
	     (IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	      2'd1 &&
	      !wr_fault_whas) ?
	       x__h36162[2:0] :
	       m_fillbuffer_mav_allocate_line ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_0_ETC___d974 =
	     ff_core_request_D_OUT[50:45] == 6'd0 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1001 =
	     ff_core_request_D_OUT[50:45] == 6'd12 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1003 =
	     ff_core_request_D_OUT[50:45] == 6'd13 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1005 =
	     ff_core_request_D_OUT[50:45] == 6'd14 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1007 =
	     ff_core_request_D_OUT[50:45] == 6'd15 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1009 =
	     ff_core_request_D_OUT[50:45] == 6'd16 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1011 =
	     ff_core_request_D_OUT[50:45] == 6'd17 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1013 =
	     ff_core_request_D_OUT[50:45] == 6'd18 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d1015 =
	     ff_core_request_D_OUT[50:45] == 6'd19 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d979 =
	     ff_core_request_D_OUT[50:45] == 6'd1 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d997 =
	     ff_core_request_D_OUT[50:45] == 6'd10 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_1_ETC___d999 =
	     ff_core_request_D_OUT[50:45] == 6'd11 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1017 =
	     ff_core_request_D_OUT[50:45] == 6'd20 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1019 =
	     ff_core_request_D_OUT[50:45] == 6'd21 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1021 =
	     ff_core_request_D_OUT[50:45] == 6'd22 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1023 =
	     ff_core_request_D_OUT[50:45] == 6'd23 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1025 =
	     ff_core_request_D_OUT[50:45] == 6'd24 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1027 =
	     ff_core_request_D_OUT[50:45] == 6'd25 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1029 =
	     ff_core_request_D_OUT[50:45] == 6'd26 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1031 =
	     ff_core_request_D_OUT[50:45] == 6'd27 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1033 =
	     ff_core_request_D_OUT[50:45] == 6'd28 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d1035 =
	     ff_core_request_D_OUT[50:45] == 6'd29 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_2_ETC___d981 =
	     ff_core_request_D_OUT[50:45] == 6'd2 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1037 =
	     ff_core_request_D_OUT[50:45] == 6'd30 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1039 =
	     ff_core_request_D_OUT[50:45] == 6'd31 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1041 =
	     ff_core_request_D_OUT[50:45] == 6'd32 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1043 =
	     ff_core_request_D_OUT[50:45] == 6'd33 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1045 =
	     ff_core_request_D_OUT[50:45] == 6'd34 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1047 =
	     ff_core_request_D_OUT[50:45] == 6'd35 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1049 =
	     ff_core_request_D_OUT[50:45] == 6'd36 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1051 =
	     ff_core_request_D_OUT[50:45] == 6'd37 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1053 =
	     ff_core_request_D_OUT[50:45] == 6'd38 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d1055 =
	     ff_core_request_D_OUT[50:45] == 6'd39 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_3_ETC___d983 =
	     ff_core_request_D_OUT[50:45] == 6'd3 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1057 =
	     ff_core_request_D_OUT[50:45] == 6'd40 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1059 =
	     ff_core_request_D_OUT[50:45] == 6'd41 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1061 =
	     ff_core_request_D_OUT[50:45] == 6'd42 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1063 =
	     ff_core_request_D_OUT[50:45] == 6'd43 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1065 =
	     ff_core_request_D_OUT[50:45] == 6'd44 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1067 =
	     ff_core_request_D_OUT[50:45] == 6'd45 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1069 =
	     ff_core_request_D_OUT[50:45] == 6'd46 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1071 =
	     ff_core_request_D_OUT[50:45] == 6'd47 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1073 =
	     ff_core_request_D_OUT[50:45] == 6'd48 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d1075 =
	     ff_core_request_D_OUT[50:45] == 6'd49 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_4_ETC___d985 =
	     ff_core_request_D_OUT[50:45] == 6'd4 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1077 =
	     ff_core_request_D_OUT[50:45] == 6'd50 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1079 =
	     ff_core_request_D_OUT[50:45] == 6'd51 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1081 =
	     ff_core_request_D_OUT[50:45] == 6'd52 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1083 =
	     ff_core_request_D_OUT[50:45] == 6'd53 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1085 =
	     ff_core_request_D_OUT[50:45] == 6'd54 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1087 =
	     ff_core_request_D_OUT[50:45] == 6'd55 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1089 =
	     ff_core_request_D_OUT[50:45] == 6'd56 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1091 =
	     ff_core_request_D_OUT[50:45] == 6'd57 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1093 =
	     ff_core_request_D_OUT[50:45] == 6'd58 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d1095 =
	     ff_core_request_D_OUT[50:45] == 6'd59 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_5_ETC___d987 =
	     ff_core_request_D_OUT[50:45] == 6'd5 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1097 =
	     ff_core_request_D_OUT[50:45] == 6'd60 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1099 =
	     ff_core_request_D_OUT[50:45] == 6'd61 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1101 =
	     ff_core_request_D_OUT[50:45] == 6'd62 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d1103 =
	     ff_core_request_D_OUT[50:45] == 6'd63 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_6_ETC___d989 =
	     ff_core_request_D_OUT[50:45] == 6'd6 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_7_ETC___d991 =
	     ff_core_request_D_OUT[50:45] == 6'd7 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_8_ETC___d993 =
	     ff_core_request_D_OUT[50:45] == 6'd8 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_50_TO_45_53_EQ_9_ETC___d995 =
	     ff_core_request_D_OUT[50:45] == 6'd9 &&
	     ff_core_request_D_OUT[36:35] != 2'd0 &&
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 &&
	     !wr_fault_whas ;
  assign ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 =
	     ff_core_request_D_OUT[70:39] < 32'h80000000 ;
  assign ff_core_request_first__1_BIT_38_2_AND_rg_fence_ETC___d22 =
	     ff_core_request_D_OUT[38] && rg_fence_stall &&
	     m_fillbuffer_mv_fbempty &&
	     !m_storebuffer_v_sb_valid_0 &&
	     !m_storebuffer_v_sb_valid_1 ;
  assign final_address__h16980 =
	     { m_tag_mv_read_response[31:12], rg_fence_set, 6'd0 } ;
  assign i__h79453 = CAN_FIRE_RL_rl_ram_check ? x__h34838[1:0] : 2'd0 ;
  assign lv_cause__h33290 =
	     (ff_core_request_D_OUT[36:35] == 2'd0) ? 6'd5 : 6'd7 ;
  assign lv_evict_address__h94162 =
	     { m_tag_mv_read_response[31:12],
	       m_fillbuffer_mv_release_info[13:8],
	       6'd0 } ;
  assign lv_hitmask__h33463 =
	     m_tag_mv_read_response[35:32] &
	     SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 ;
  assign lv_response_cause__h33749 =
	     fn_pmp_lookup___d272[6] ?
	       fn_pmp_lookup___d272[5:0] :
	       lv_cause__h33290 ;
  assign lv_response_cause__h47822 =
	     { IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d903 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d905 ||
	       b__h46861 && wr_ram_response_wget[6],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d911 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d913 ||
	       b__h46861 && wr_ram_response_wget[5],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d920 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d922 ||
	       b__h46861 && wr_ram_response_wget[4],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d928 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d930 ||
	       b__h46861 && wr_ram_response_wget[3],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d937 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d939 ||
	       b__h46861 && wr_ram_response_wget[2],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d945 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d947 ||
	       b__h46861 && wr_ram_response_wget[1] } ;
  assign lv_response_epochs__h47823 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d954 ||
	     IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d956 ||
	     b__h46861 && wr_ram_response_wget[0] ;
  assign lv_response_word__h36138 =
	     m_fillbuffer_mav_polling_response[41:10] >> x__h33753 ;
  assign lv_response_word__h47820 =
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d590 ?
	       ff_core_request_D_OUT[70:39] :
	       lv_response_word__h47824 ;
  assign lv_response_word__h47824 = x__h75109 | y__h75110 ;
  assign m_fillbuffer_mv_fbfull__29_OR_rg_fence_stall_3_ETC___d1276 =
	     m_fillbuffer_mv_fbfull || rg_fence_stall ||
	     NOT_ff_core_request_notEmpty__258_259_AND_NOT__ETC___d1269 &&
	     !wr_store_in_progress_whas ;
  assign m_fillbuffer_mv_fbfull__29_OR_rg_fence_stall_3_ETC___d1287 =
	     m_fillbuffer_mv_fbfull__29_OR_rg_fence_stall_3_ETC___d1276 &&
	     !m_storebuffer_v_sb_valid_0 &&
	     !m_storebuffer_v_sb_valid_1 &&
	     !m_fillbuffer_mv_fbempty &&
	     !wr_store_in_progress_whas &&
	     m_fillbuffer_mv_fbhead_valid ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1267 =
	     m_fillbuffer_mv_release_info[13:8] == rg_recent_core_req ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1426 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1429 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1431 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1433 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1435 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1437 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1439 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1441 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1443 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1445 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1447 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1449 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1451 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1453 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1455 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1457 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1459 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1461 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1463 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1465 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1467 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1469 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1471 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1473 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1475 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1477 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1479 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1481 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1483 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1485 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1487 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1489 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1491 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1493 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1495 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1497 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1499 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1501 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1503 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1505 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1507 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1509 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1511 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1513 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1515 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1517 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1519 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1521 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1523 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1525 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1527 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1529 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1531 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1533 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1535 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1537 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1539 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1541 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1543 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1545 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1547 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1549 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1551 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1553 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	      rg_release_readphase) ;
  assign m_storebuffer_v_sb_meta_0_45_BITS_102_TO_73_80_ETC___d482 =
	     m_storebuffer_v_sb_meta_0[102:73] ==
	     ff_core_request_D_OUT[70:41] ;
  assign m_storebuffer_v_sb_meta_0_45_BITS_34_TO_3_50_A_ETC___d499 =
	     m_storebuffer_v_sb_meta_0[34:3] &
	     {32{m_storebuffer_v_sb_meta_0_45_BITS_102_TO_73_80_ETC___d482}} ;
  assign m_storebuffer_v_sb_meta_1_62_BITS_102_TO_73_00_ETC___d501 =
	     m_storebuffer_v_sb_meta_1[102:73] ==
	     ff_core_request_D_OUT[70:41] ;
  assign m_storebuffer_v_sb_meta_1_62_BITS_34_TO_3_67_A_ETC___d518 =
	     m_storebuffer_v_sb_meta_1[34:3] &
	     {32{m_storebuffer_v_sb_meta_1_62_BITS_102_TO_73_00_ETC___d501}} ;
  assign n__h38459 = x__h38608 & y__h38609 ;
  assign phyaddr__h33288 = ff_core_request_D_OUT[70:39] ;
  assign phyaddr__h89383 =
	     (!ma_cache_enable_c ||
	      ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) ?
	       ff_core_request_D_OUT[70:39] :
	       { ff_core_request_D_OUT[70:41], 2'd0 } ;
  assign pmp_access__h33291 =
	     (ff_core_request_D_OUT[36:35] == 2'd0) ?
	       ff_core_request_D_OUT[36:35] :
	       2'd1 ;
  assign response_word__h33733 = m_data_mv_read_response[31:0] >> x__h33753 ;
  assign response_word__h90421 =
	     ff_read_mem_response_rv_port1__read[33:2] >> x__h33753 ;
  assign rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643 =
	     rg_recent_index == set_index__h108005 ;
  assign set_index__h108005 =
	     put_core_req_put[38] ? 6'd0 : put_core_req_put[50:45] ;
  assign storedata__h38313 = x__h46507 >> x__h33753 ;
  assign storemask__h38312 = x__h38450 >> x__h33753 ;
  assign v__h90935 =
	     (valid__h90938 == 4'd15 &&
	      (dirty__h90939 == 4'd15 || dirty__h90939 == 4'd0)) ?
	       SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 :
	       ((valid__h90938 == 4'd15 && dirty__h90939 != 4'd15) ?
		  (dirty__h90939[3] ?
		     (dirty__h90939[2] ?
			(dirty__h90939[1] ?
			   (dirty__h90939[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3) :
		  (valid__h90938[3] ?
		     (valid__h90938[2] ?
			(valid__h90938[1] ?
			   (valid__h90938[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3)) ;
  assign wayselect__h94358 = 4'd1 << v__h90935 ;
  assign wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d369 =
	     (ma_cache_enable_c &&
	      !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	      ff_core_request_D_OUT[36:35] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] ;
  assign wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d380 =
	     (ma_cache_enable_c &&
	      !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	      ff_core_request_D_OUT[36:35] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] &&
	     m_fillbuffer_mav_polling_response[0] ;
  assign wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d395 =
	     (ma_cache_enable_c &&
	      !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	      ff_core_request_D_OUT[36:35] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d406 =
	     (ma_cache_enable_c &&
	      !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	      ff_core_request_D_OUT[36:35] == 2'd0) &&
	     !m_fillbuffer_mav_polling_response[1] ;
  assign wr_fault_whas__19_AND_wr_fault_wget__20_21_OR__ETC___d431 =
	     wr_fault_whas ||
	     IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	     2'd1 ||
	     IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 ==
	     2'd1 ;
  assign x__h28195 = rg_fence_way + 2'd1 ;
  assign x__h33753 = { ff_core_request_D_OUT[40:39], 3'b0 } ;
  assign x__h34838 =
	     lv_hitmask__h33463[0] ?
	       3'd0 :
	       (lv_hitmask__h33463[1] ?
		  3'd1 :
		  (lv_hitmask__h33463[2] ?
		     3'd2 :
		     (lv_hitmask__h33463[3] ? 3'd3 : 3'd4))) ;
  assign x__h35422 = x__h35434 + y__h35435 ;
  assign x__h35434 = x__h35446 + y__h35447 ;
  assign x__h35446 = { 2'd0, lv_hitmask__h33463[3] } ;
  assign x__h36162 =
	     m_fillbuffer_mav_polling_response[2] ?
	       4'd0 :
	       (m_fillbuffer_mav_polling_response[3] ?
		  4'd1 :
		  (m_fillbuffer_mav_polling_response[4] ?
		     4'd2 :
		     (m_fillbuffer_mav_polling_response[5] ?
			4'd3 :
			(m_fillbuffer_mav_polling_response[6] ?
			   4'd4 :
			   (m_fillbuffer_mav_polling_response[7] ?
			      4'd5 :
			      (m_fillbuffer_mav_polling_response[8] ?
				 4'd6 :
				 (m_fillbuffer_mav_polling_response[9] ?
				    4'd7 :
				    4'd8))))))) ;
  assign x__h38450 = x__h46445 | y__h46446 ;
  assign x__h38608 = ~x__h38610 ;
  assign x__h38612 = m_storebuffer_rg_tail - 1'd1 ;
  assign x__h46445 =
	     m_storebuffer_rg_tail ?
	       m_storebuffer_v_sb_meta_0_45_BITS_34_TO_3_50_A_ETC___d499 :
	       n__h38459 ;
  assign x__h46507 = x__h46701 | y__h46702 ;
  assign x__h46701 = x__h46445 & m_storebuffer_v_sb_meta_0[70:39] ;
  assign x__h46841 = x__h46853 + y__h46854 ;
  assign x__h46853 = { 1'd0, b__h46861 } ;
  assign x__h75109 = x__h75111 & y__h75112 ;
  assign x__h75111 = x__h75124 | y__h75125 ;
  assign x__h75124 = storemask__h38312 & storedata__h38313 ;
  assign x__h75126 = ~storemask__h38312 ;
  assign x__h80874 = 4'd1 << i__h79453 ;
  assign x__h88937 = y__h75112 << x__h33753 ;
  assign x__read__h3224 = wr_total_io_reads_whas && x_wget__h3213 ;
  assign x__read__h3294 = wr_total_io_reads_whas && x_wget__h3283 ;
  assign x__read__h3364 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 && x_wget__h3353 ;
  assign x__read__h3434 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 && x_wget__h3423 ;
  assign x_burst_len__h89405 =
	     (!ma_cache_enable_c ||
	      ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) ?
	       8'd0 :
	       8'd15 ;
  assign x_burst_size__h110080 =
	     { 1'd0,
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_1_TO_ETC___d1756 } ;
  assign x_data__h110078 = {16{value__h109714}} ;
  assign x_wget__h3213 = ff_core_request_D_OUT[36:35] == 2'd0 ;
  assign x_wget__h3283 = ff_core_request_D_OUT[36:35] == 2'd1 ;
  assign x_wget__h3353 = x_wget__h3213 ;
  assign x_wget__h3423 = x_wget__h3283 ;
  assign y__h35423 = { 2'd0, lv_hitmask__h33463[0] } ;
  assign y__h35435 = { 2'd0, lv_hitmask__h33463[1] } ;
  assign y__h35447 = { 2'd0, lv_hitmask__h33463[2] } ;
  assign y__h46446 =
	     m_storebuffer_rg_tail ?
	       n__h38459 :
	       m_storebuffer_v_sb_meta_1_62_BITS_34_TO_3_67_A_ETC___d518 ;
  assign y__h46702 = y__h46446 & m_storebuffer_v_sb_meta_1[70:39] ;
  assign y__h46842 =
	     { 1'd0,
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 ==
	       2'd1 &&
	       !wr_fault_whas } ;
  assign y__h46854 =
	     { 1'd0,
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 ==
	       2'd1 &&
	       !wr_fault_whas } ;
  assign y__h75110 = x__h75224 & y__h75225 ;
  assign y__h75125 = x__h75126 & y__h75127 ;
  assign y__h75127 =
	     { IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d594 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d596 ||
	       b__h46861 && wr_ram_response_wget[39],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d602 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d604 ||
	       b__h46861 && wr_ram_response_wget[38],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d611 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d613 ||
	       b__h46861 && wr_ram_response_wget[37],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d619 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d621 ||
	       b__h46861 && wr_ram_response_wget[36],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d628 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d630 ||
	       b__h46861 && wr_ram_response_wget[35],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d636 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d638 ||
	       b__h46861 && wr_ram_response_wget[34],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d645 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d647 ||
	       b__h46861 && wr_ram_response_wget[33],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d653 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d655 ||
	       b__h46861 && wr_ram_response_wget[32],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d662 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d664 ||
	       b__h46861 && wr_ram_response_wget[31],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d670 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d672 ||
	       b__h46861 && wr_ram_response_wget[30],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d679 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d681 ||
	       b__h46861 && wr_ram_response_wget[29],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d687 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d689 ||
	       b__h46861 && wr_ram_response_wget[28],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d696 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d698 ||
	       b__h46861 && wr_ram_response_wget[27],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d704 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d706 ||
	       b__h46861 && wr_ram_response_wget[26],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d713 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d715 ||
	       b__h46861 && wr_ram_response_wget[25],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d721 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d723 ||
	       b__h46861 && wr_ram_response_wget[24],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d730 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d732 ||
	       b__h46861 && wr_ram_response_wget[23],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d738 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d740 ||
	       b__h46861 && wr_ram_response_wget[22],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d747 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d749 ||
	       b__h46861 && wr_ram_response_wget[21],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d755 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d757 ||
	       b__h46861 && wr_ram_response_wget[20],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d764 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d766 ||
	       b__h46861 && wr_ram_response_wget[19],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d772 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d774 ||
	       b__h46861 && wr_ram_response_wget[18],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d781 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d783 ||
	       b__h46861 && wr_ram_response_wget[17],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d789 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d791 ||
	       b__h46861 && wr_ram_response_wget[16],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d798 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d800 ||
	       b__h46861 && wr_ram_response_wget[15],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d806 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d808 ||
	       b__h46861 && wr_ram_response_wget[14],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d815 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d817 ||
	       b__h46861 && wr_ram_response_wget[13],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d823 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d825 ||
	       b__h46861 && wr_ram_response_wget[12],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d832 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d834 ||
	       b__h46861 && wr_ram_response_wget[11],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d840 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d842 ||
	       b__h46861 && wr_ram_response_wget[10],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d849 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d851 ||
	       b__h46861 && wr_ram_response_wget[9],
	       IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d857 ||
	       IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d859 ||
	       b__h46861 && wr_ram_response_wget[8] } ;
  assign y__h75225 =
	     {32{IF_ff_core_request_first__1_BITS_33_TO_32_67_E_ETC___d882}} ;
  assign y__h77882 = ~ff_core_request_D_OUT[34] ;
  assign y__h80890 = ~x__h80874 ;
  assign y__h99783 = ~wayselect__h94358 ;
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[33:32])
      2'b0: x__h87787 = {4{ff_core_request_D_OUT[7:0]}};
      2'b01: x__h87787 = {2{ff_core_request_D_OUT[15:0]}};
      default: x__h87787 = ff_core_request_D_OUT[31:0];
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0: value__h109714 = m_storebuffer_v_sb_meta_0[70:39];
      1'd1: value__h109714 = m_storebuffer_v_sb_meta_1[70:39];
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0: value__h109720 = m_storebuffer_v_sb_meta_0[34:3];
      1'd1: value__h109720 = m_storebuffer_v_sb_meta_1[34:3];
    endcase
  end
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[33:32])
      2'b0: y__h75112 = 32'h000000FF;
      2'b01: y__h75112 = 32'h0000FFFF;
      default: y__h75112 = 32'hFFFFFFFF;
    endcase
  end
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[33:32])
      2'b0: x__h75224 = 32'hFFFFFF00;
      2'b01: x__h75224 = 32'hFFFF0000;
      default: x__h75224 = 32'd0;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: dirty__h90939 = v_reg_dirty_0;
      6'd1: dirty__h90939 = v_reg_dirty_1;
      6'd2: dirty__h90939 = v_reg_dirty_2;
      6'd3: dirty__h90939 = v_reg_dirty_3;
      6'd4: dirty__h90939 = v_reg_dirty_4;
      6'd5: dirty__h90939 = v_reg_dirty_5;
      6'd6: dirty__h90939 = v_reg_dirty_6;
      6'd7: dirty__h90939 = v_reg_dirty_7;
      6'd8: dirty__h90939 = v_reg_dirty_8;
      6'd9: dirty__h90939 = v_reg_dirty_9;
      6'd10: dirty__h90939 = v_reg_dirty_10;
      6'd11: dirty__h90939 = v_reg_dirty_11;
      6'd12: dirty__h90939 = v_reg_dirty_12;
      6'd13: dirty__h90939 = v_reg_dirty_13;
      6'd14: dirty__h90939 = v_reg_dirty_14;
      6'd15: dirty__h90939 = v_reg_dirty_15;
      6'd16: dirty__h90939 = v_reg_dirty_16;
      6'd17: dirty__h90939 = v_reg_dirty_17;
      6'd18: dirty__h90939 = v_reg_dirty_18;
      6'd19: dirty__h90939 = v_reg_dirty_19;
      6'd20: dirty__h90939 = v_reg_dirty_20;
      6'd21: dirty__h90939 = v_reg_dirty_21;
      6'd22: dirty__h90939 = v_reg_dirty_22;
      6'd23: dirty__h90939 = v_reg_dirty_23;
      6'd24: dirty__h90939 = v_reg_dirty_24;
      6'd25: dirty__h90939 = v_reg_dirty_25;
      6'd26: dirty__h90939 = v_reg_dirty_26;
      6'd27: dirty__h90939 = v_reg_dirty_27;
      6'd28: dirty__h90939 = v_reg_dirty_28;
      6'd29: dirty__h90939 = v_reg_dirty_29;
      6'd30: dirty__h90939 = v_reg_dirty_30;
      6'd31: dirty__h90939 = v_reg_dirty_31;
      6'd32: dirty__h90939 = v_reg_dirty_32;
      6'd33: dirty__h90939 = v_reg_dirty_33;
      6'd34: dirty__h90939 = v_reg_dirty_34;
      6'd35: dirty__h90939 = v_reg_dirty_35;
      6'd36: dirty__h90939 = v_reg_dirty_36;
      6'd37: dirty__h90939 = v_reg_dirty_37;
      6'd38: dirty__h90939 = v_reg_dirty_38;
      6'd39: dirty__h90939 = v_reg_dirty_39;
      6'd40: dirty__h90939 = v_reg_dirty_40;
      6'd41: dirty__h90939 = v_reg_dirty_41;
      6'd42: dirty__h90939 = v_reg_dirty_42;
      6'd43: dirty__h90939 = v_reg_dirty_43;
      6'd44: dirty__h90939 = v_reg_dirty_44;
      6'd45: dirty__h90939 = v_reg_dirty_45;
      6'd46: dirty__h90939 = v_reg_dirty_46;
      6'd47: dirty__h90939 = v_reg_dirty_47;
      6'd48: dirty__h90939 = v_reg_dirty_48;
      6'd49: dirty__h90939 = v_reg_dirty_49;
      6'd50: dirty__h90939 = v_reg_dirty_50;
      6'd51: dirty__h90939 = v_reg_dirty_51;
      6'd52: dirty__h90939 = v_reg_dirty_52;
      6'd53: dirty__h90939 = v_reg_dirty_53;
      6'd54: dirty__h90939 = v_reg_dirty_54;
      6'd55: dirty__h90939 = v_reg_dirty_55;
      6'd56: dirty__h90939 = v_reg_dirty_56;
      6'd57: dirty__h90939 = v_reg_dirty_57;
      6'd58: dirty__h90939 = v_reg_dirty_58;
      6'd59: dirty__h90939 = v_reg_dirty_59;
      6'd60: dirty__h90939 = v_reg_dirty_60;
      6'd61: dirty__h90939 = v_reg_dirty_61;
      6'd62: dirty__h90939 = v_reg_dirty_62;
      6'd63: dirty__h90939 = v_reg_dirty_63;
    endcase
  end
  always@(ff_core_request_D_OUT or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (ff_core_request_D_OUT[50:45])
      6'd0: bs__h79452 = v_reg_dirty_0;
      6'd1: bs__h79452 = v_reg_dirty_1;
      6'd2: bs__h79452 = v_reg_dirty_2;
      6'd3: bs__h79452 = v_reg_dirty_3;
      6'd4: bs__h79452 = v_reg_dirty_4;
      6'd5: bs__h79452 = v_reg_dirty_5;
      6'd6: bs__h79452 = v_reg_dirty_6;
      6'd7: bs__h79452 = v_reg_dirty_7;
      6'd8: bs__h79452 = v_reg_dirty_8;
      6'd9: bs__h79452 = v_reg_dirty_9;
      6'd10: bs__h79452 = v_reg_dirty_10;
      6'd11: bs__h79452 = v_reg_dirty_11;
      6'd12: bs__h79452 = v_reg_dirty_12;
      6'd13: bs__h79452 = v_reg_dirty_13;
      6'd14: bs__h79452 = v_reg_dirty_14;
      6'd15: bs__h79452 = v_reg_dirty_15;
      6'd16: bs__h79452 = v_reg_dirty_16;
      6'd17: bs__h79452 = v_reg_dirty_17;
      6'd18: bs__h79452 = v_reg_dirty_18;
      6'd19: bs__h79452 = v_reg_dirty_19;
      6'd20: bs__h79452 = v_reg_dirty_20;
      6'd21: bs__h79452 = v_reg_dirty_21;
      6'd22: bs__h79452 = v_reg_dirty_22;
      6'd23: bs__h79452 = v_reg_dirty_23;
      6'd24: bs__h79452 = v_reg_dirty_24;
      6'd25: bs__h79452 = v_reg_dirty_25;
      6'd26: bs__h79452 = v_reg_dirty_26;
      6'd27: bs__h79452 = v_reg_dirty_27;
      6'd28: bs__h79452 = v_reg_dirty_28;
      6'd29: bs__h79452 = v_reg_dirty_29;
      6'd30: bs__h79452 = v_reg_dirty_30;
      6'd31: bs__h79452 = v_reg_dirty_31;
      6'd32: bs__h79452 = v_reg_dirty_32;
      6'd33: bs__h79452 = v_reg_dirty_33;
      6'd34: bs__h79452 = v_reg_dirty_34;
      6'd35: bs__h79452 = v_reg_dirty_35;
      6'd36: bs__h79452 = v_reg_dirty_36;
      6'd37: bs__h79452 = v_reg_dirty_37;
      6'd38: bs__h79452 = v_reg_dirty_38;
      6'd39: bs__h79452 = v_reg_dirty_39;
      6'd40: bs__h79452 = v_reg_dirty_40;
      6'd41: bs__h79452 = v_reg_dirty_41;
      6'd42: bs__h79452 = v_reg_dirty_42;
      6'd43: bs__h79452 = v_reg_dirty_43;
      6'd44: bs__h79452 = v_reg_dirty_44;
      6'd45: bs__h79452 = v_reg_dirty_45;
      6'd46: bs__h79452 = v_reg_dirty_46;
      6'd47: bs__h79452 = v_reg_dirty_47;
      6'd48: bs__h79452 = v_reg_dirty_48;
      6'd49: bs__h79452 = v_reg_dirty_49;
      6'd50: bs__h79452 = v_reg_dirty_50;
      6'd51: bs__h79452 = v_reg_dirty_51;
      6'd52: bs__h79452 = v_reg_dirty_52;
      6'd53: bs__h79452 = v_reg_dirty_53;
      6'd54: bs__h79452 = v_reg_dirty_54;
      6'd55: bs__h79452 = v_reg_dirty_55;
      6'd56: bs__h79452 = v_reg_dirty_56;
      6'd57: bs__h79452 = v_reg_dirty_57;
      6'd58: bs__h79452 = v_reg_dirty_58;
      6'd59: bs__h79452 = v_reg_dirty_59;
      6'd60: bs__h79452 = v_reg_dirty_60;
      6'd61: bs__h79452 = v_reg_dirty_61;
      6'd62: bs__h79452 = v_reg_dirty_62;
      6'd63: bs__h79452 = v_reg_dirty_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: valid__h90938 = v_reg_valid_0;
      6'd1: valid__h90938 = v_reg_valid_1;
      6'd2: valid__h90938 = v_reg_valid_2;
      6'd3: valid__h90938 = v_reg_valid_3;
      6'd4: valid__h90938 = v_reg_valid_4;
      6'd5: valid__h90938 = v_reg_valid_5;
      6'd6: valid__h90938 = v_reg_valid_6;
      6'd7: valid__h90938 = v_reg_valid_7;
      6'd8: valid__h90938 = v_reg_valid_8;
      6'd9: valid__h90938 = v_reg_valid_9;
      6'd10: valid__h90938 = v_reg_valid_10;
      6'd11: valid__h90938 = v_reg_valid_11;
      6'd12: valid__h90938 = v_reg_valid_12;
      6'd13: valid__h90938 = v_reg_valid_13;
      6'd14: valid__h90938 = v_reg_valid_14;
      6'd15: valid__h90938 = v_reg_valid_15;
      6'd16: valid__h90938 = v_reg_valid_16;
      6'd17: valid__h90938 = v_reg_valid_17;
      6'd18: valid__h90938 = v_reg_valid_18;
      6'd19: valid__h90938 = v_reg_valid_19;
      6'd20: valid__h90938 = v_reg_valid_20;
      6'd21: valid__h90938 = v_reg_valid_21;
      6'd22: valid__h90938 = v_reg_valid_22;
      6'd23: valid__h90938 = v_reg_valid_23;
      6'd24: valid__h90938 = v_reg_valid_24;
      6'd25: valid__h90938 = v_reg_valid_25;
      6'd26: valid__h90938 = v_reg_valid_26;
      6'd27: valid__h90938 = v_reg_valid_27;
      6'd28: valid__h90938 = v_reg_valid_28;
      6'd29: valid__h90938 = v_reg_valid_29;
      6'd30: valid__h90938 = v_reg_valid_30;
      6'd31: valid__h90938 = v_reg_valid_31;
      6'd32: valid__h90938 = v_reg_valid_32;
      6'd33: valid__h90938 = v_reg_valid_33;
      6'd34: valid__h90938 = v_reg_valid_34;
      6'd35: valid__h90938 = v_reg_valid_35;
      6'd36: valid__h90938 = v_reg_valid_36;
      6'd37: valid__h90938 = v_reg_valid_37;
      6'd38: valid__h90938 = v_reg_valid_38;
      6'd39: valid__h90938 = v_reg_valid_39;
      6'd40: valid__h90938 = v_reg_valid_40;
      6'd41: valid__h90938 = v_reg_valid_41;
      6'd42: valid__h90938 = v_reg_valid_42;
      6'd43: valid__h90938 = v_reg_valid_43;
      6'd44: valid__h90938 = v_reg_valid_44;
      6'd45: valid__h90938 = v_reg_valid_45;
      6'd46: valid__h90938 = v_reg_valid_46;
      6'd47: valid__h90938 = v_reg_valid_47;
      6'd48: valid__h90938 = v_reg_valid_48;
      6'd49: valid__h90938 = v_reg_valid_49;
      6'd50: valid__h90938 = v_reg_valid_50;
      6'd51: valid__h90938 = v_reg_valid_51;
      6'd52: valid__h90938 = v_reg_valid_52;
      6'd53: valid__h90938 = v_reg_valid_53;
      6'd54: valid__h90938 = v_reg_valid_54;
      6'd55: valid__h90938 = v_reg_valid_55;
      6'd56: valid__h90938 = v_reg_valid_56;
      6'd57: valid__h90938 = v_reg_valid_57;
      6'd58: valid__h90938 = v_reg_valid_58;
      6'd59: valid__h90938 = v_reg_valid_59;
      6'd60: valid__h90938 = v_reg_valid_60;
      6'd61: valid__h90938 = v_reg_valid_61;
      6'd62: valid__h90938 = v_reg_valid_62;
      6'd63: valid__h90938 = v_reg_valid_63;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h17113 = v_reg_valid_0;
      6'd1: bs__h17113 = v_reg_valid_1;
      6'd2: bs__h17113 = v_reg_valid_2;
      6'd3: bs__h17113 = v_reg_valid_3;
      6'd4: bs__h17113 = v_reg_valid_4;
      6'd5: bs__h17113 = v_reg_valid_5;
      6'd6: bs__h17113 = v_reg_valid_6;
      6'd7: bs__h17113 = v_reg_valid_7;
      6'd8: bs__h17113 = v_reg_valid_8;
      6'd9: bs__h17113 = v_reg_valid_9;
      6'd10: bs__h17113 = v_reg_valid_10;
      6'd11: bs__h17113 = v_reg_valid_11;
      6'd12: bs__h17113 = v_reg_valid_12;
      6'd13: bs__h17113 = v_reg_valid_13;
      6'd14: bs__h17113 = v_reg_valid_14;
      6'd15: bs__h17113 = v_reg_valid_15;
      6'd16: bs__h17113 = v_reg_valid_16;
      6'd17: bs__h17113 = v_reg_valid_17;
      6'd18: bs__h17113 = v_reg_valid_18;
      6'd19: bs__h17113 = v_reg_valid_19;
      6'd20: bs__h17113 = v_reg_valid_20;
      6'd21: bs__h17113 = v_reg_valid_21;
      6'd22: bs__h17113 = v_reg_valid_22;
      6'd23: bs__h17113 = v_reg_valid_23;
      6'd24: bs__h17113 = v_reg_valid_24;
      6'd25: bs__h17113 = v_reg_valid_25;
      6'd26: bs__h17113 = v_reg_valid_26;
      6'd27: bs__h17113 = v_reg_valid_27;
      6'd28: bs__h17113 = v_reg_valid_28;
      6'd29: bs__h17113 = v_reg_valid_29;
      6'd30: bs__h17113 = v_reg_valid_30;
      6'd31: bs__h17113 = v_reg_valid_31;
      6'd32: bs__h17113 = v_reg_valid_32;
      6'd33: bs__h17113 = v_reg_valid_33;
      6'd34: bs__h17113 = v_reg_valid_34;
      6'd35: bs__h17113 = v_reg_valid_35;
      6'd36: bs__h17113 = v_reg_valid_36;
      6'd37: bs__h17113 = v_reg_valid_37;
      6'd38: bs__h17113 = v_reg_valid_38;
      6'd39: bs__h17113 = v_reg_valid_39;
      6'd40: bs__h17113 = v_reg_valid_40;
      6'd41: bs__h17113 = v_reg_valid_41;
      6'd42: bs__h17113 = v_reg_valid_42;
      6'd43: bs__h17113 = v_reg_valid_43;
      6'd44: bs__h17113 = v_reg_valid_44;
      6'd45: bs__h17113 = v_reg_valid_45;
      6'd46: bs__h17113 = v_reg_valid_46;
      6'd47: bs__h17113 = v_reg_valid_47;
      6'd48: bs__h17113 = v_reg_valid_48;
      6'd49: bs__h17113 = v_reg_valid_49;
      6'd50: bs__h17113 = v_reg_valid_50;
      6'd51: bs__h17113 = v_reg_valid_51;
      6'd52: bs__h17113 = v_reg_valid_52;
      6'd53: bs__h17113 = v_reg_valid_53;
      6'd54: bs__h17113 = v_reg_valid_54;
      6'd55: bs__h17113 = v_reg_valid_55;
      6'd56: bs__h17113 = v_reg_valid_56;
      6'd57: bs__h17113 = v_reg_valid_57;
      6'd58: bs__h17113 = v_reg_valid_58;
      6'd59: bs__h17113 = v_reg_valid_59;
      6'd60: bs__h17113 = v_reg_valid_60;
      6'd61: bs__h17113 = v_reg_valid_61;
      6'd62: bs__h17113 = v_reg_valid_62;
      6'd63: bs__h17113 = v_reg_valid_63;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h19139 = v_reg_dirty_0;
      6'd1: bs__h19139 = v_reg_dirty_1;
      6'd2: bs__h19139 = v_reg_dirty_2;
      6'd3: bs__h19139 = v_reg_dirty_3;
      6'd4: bs__h19139 = v_reg_dirty_4;
      6'd5: bs__h19139 = v_reg_dirty_5;
      6'd6: bs__h19139 = v_reg_dirty_6;
      6'd7: bs__h19139 = v_reg_dirty_7;
      6'd8: bs__h19139 = v_reg_dirty_8;
      6'd9: bs__h19139 = v_reg_dirty_9;
      6'd10: bs__h19139 = v_reg_dirty_10;
      6'd11: bs__h19139 = v_reg_dirty_11;
      6'd12: bs__h19139 = v_reg_dirty_12;
      6'd13: bs__h19139 = v_reg_dirty_13;
      6'd14: bs__h19139 = v_reg_dirty_14;
      6'd15: bs__h19139 = v_reg_dirty_15;
      6'd16: bs__h19139 = v_reg_dirty_16;
      6'd17: bs__h19139 = v_reg_dirty_17;
      6'd18: bs__h19139 = v_reg_dirty_18;
      6'd19: bs__h19139 = v_reg_dirty_19;
      6'd20: bs__h19139 = v_reg_dirty_20;
      6'd21: bs__h19139 = v_reg_dirty_21;
      6'd22: bs__h19139 = v_reg_dirty_22;
      6'd23: bs__h19139 = v_reg_dirty_23;
      6'd24: bs__h19139 = v_reg_dirty_24;
      6'd25: bs__h19139 = v_reg_dirty_25;
      6'd26: bs__h19139 = v_reg_dirty_26;
      6'd27: bs__h19139 = v_reg_dirty_27;
      6'd28: bs__h19139 = v_reg_dirty_28;
      6'd29: bs__h19139 = v_reg_dirty_29;
      6'd30: bs__h19139 = v_reg_dirty_30;
      6'd31: bs__h19139 = v_reg_dirty_31;
      6'd32: bs__h19139 = v_reg_dirty_32;
      6'd33: bs__h19139 = v_reg_dirty_33;
      6'd34: bs__h19139 = v_reg_dirty_34;
      6'd35: bs__h19139 = v_reg_dirty_35;
      6'd36: bs__h19139 = v_reg_dirty_36;
      6'd37: bs__h19139 = v_reg_dirty_37;
      6'd38: bs__h19139 = v_reg_dirty_38;
      6'd39: bs__h19139 = v_reg_dirty_39;
      6'd40: bs__h19139 = v_reg_dirty_40;
      6'd41: bs__h19139 = v_reg_dirty_41;
      6'd42: bs__h19139 = v_reg_dirty_42;
      6'd43: bs__h19139 = v_reg_dirty_43;
      6'd44: bs__h19139 = v_reg_dirty_44;
      6'd45: bs__h19139 = v_reg_dirty_45;
      6'd46: bs__h19139 = v_reg_dirty_46;
      6'd47: bs__h19139 = v_reg_dirty_47;
      6'd48: bs__h19139 = v_reg_dirty_48;
      6'd49: bs__h19139 = v_reg_dirty_49;
      6'd50: bs__h19139 = v_reg_dirty_50;
      6'd51: bs__h19139 = v_reg_dirty_51;
      6'd52: bs__h19139 = v_reg_dirty_52;
      6'd53: bs__h19139 = v_reg_dirty_53;
      6'd54: bs__h19139 = v_reg_dirty_54;
      6'd55: bs__h19139 = v_reg_dirty_55;
      6'd56: bs__h19139 = v_reg_dirty_56;
      6'd57: bs__h19139 = v_reg_dirty_57;
      6'd58: bs__h19139 = v_reg_dirty_58;
      6'd59: bs__h19139 = v_reg_dirty_59;
      6'd60: bs__h19139 = v_reg_dirty_60;
      6'd61: bs__h19139 = v_reg_dirty_61;
      6'd62: bs__h19139 = v_reg_dirty_62;
      6'd63: bs__h19139 = v_reg_dirty_63;
    endcase
  end
  always@(ff_core_request_D_OUT or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (ff_core_request_D_OUT[50:45])
      6'd0:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_0;
      6'd1:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_1;
      6'd2:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_2;
      6'd3:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_3;
      6'd4:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_4;
      6'd5:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_5;
      6'd6:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_6;
      6'd7:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_7;
      6'd8:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_8;
      6'd9:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_9;
      6'd10:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_10;
      6'd11:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_11;
      6'd12:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_12;
      6'd13:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_13;
      6'd14:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_14;
      6'd15:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_15;
      6'd16:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_16;
      6'd17:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_17;
      6'd18:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_18;
      6'd19:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_19;
      6'd20:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_20;
      6'd21:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_21;
      6'd22:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_22;
      6'd23:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_23;
      6'd24:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_24;
      6'd25:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_25;
      6'd26:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_26;
      6'd27:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_27;
      6'd28:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_28;
      6'd29:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_29;
      6'd30:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_30;
      6'd31:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_31;
      6'd32:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_32;
      6'd33:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_33;
      6'd34:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_34;
      6'd35:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_35;
      6'd36:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_36;
      6'd37:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_37;
      6'd38:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_38;
      6'd39:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_39;
      6'd40:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_40;
      6'd41:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_41;
      6'd42:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_42;
      6'd43:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_43;
      6'd44:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_44;
      6'd45:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_45;
      6'd46:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_46;
      6'd47:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_47;
      6'd48:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_48;
      6'd49:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_49;
      6'd50:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_50;
      6'd51:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_51;
      6'd52:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_52;
      6'd53:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_53;
      6'd54:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_54;
      6'd55:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_55;
      6'd56:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_56;
      6'd57:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_57;
      6'd58:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_58;
      6'd59:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_59;
      6'd60:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_60;
      6'd61:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_61;
      6'd62:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_62;
      6'd63:
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d254 =
	      v_reg_valid_63;
    endcase
  end
  always@(m_storebuffer_rg_tail or
	  m_storebuffer_v_sb_meta_0_45_BITS_34_TO_3_50_A_ETC___d499 or
	  m_storebuffer_v_sb_meta_1_62_BITS_34_TO_3_67_A_ETC___d518)
  begin
    case (m_storebuffer_rg_tail)
      1'd0:
	  y__h38609 =
	      m_storebuffer_v_sb_meta_0_45_BITS_34_TO_3_50_A_ETC___d499;
      1'd1:
	  y__h38609 =
	      m_storebuffer_v_sb_meta_1_62_BITS_34_TO_3_67_A_ETC___d518;
    endcase
  end
  always@(x__h38612 or
	  m_storebuffer_v_sb_meta_0_45_BITS_34_TO_3_50_A_ETC___d499 or
	  m_storebuffer_v_sb_meta_1_62_BITS_34_TO_3_67_A_ETC___d518)
  begin
    case (x__h38612)
      1'd0:
	  x__h38610 =
	      m_storebuffer_v_sb_meta_0_45_BITS_34_TO_3_50_A_ETC___d499;
      1'd1:
	  x__h38610 =
	      m_storebuffer_v_sb_meta_1_62_BITS_34_TO_3_67_A_ETC___d518;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  replacement_v_count_0 or
	  replacement_v_count_1 or
	  replacement_v_count_2 or
	  replacement_v_count_3 or
	  replacement_v_count_4 or
	  replacement_v_count_5 or
	  replacement_v_count_6 or
	  replacement_v_count_7 or
	  replacement_v_count_8 or
	  replacement_v_count_9 or
	  replacement_v_count_10 or
	  replacement_v_count_11 or
	  replacement_v_count_12 or
	  replacement_v_count_13 or
	  replacement_v_count_14 or
	  replacement_v_count_15 or
	  replacement_v_count_16 or
	  replacement_v_count_17 or
	  replacement_v_count_18 or
	  replacement_v_count_19 or
	  replacement_v_count_20 or
	  replacement_v_count_21 or
	  replacement_v_count_22 or
	  replacement_v_count_23 or
	  replacement_v_count_24 or
	  replacement_v_count_25 or
	  replacement_v_count_26 or
	  replacement_v_count_27 or
	  replacement_v_count_28 or
	  replacement_v_count_29 or
	  replacement_v_count_30 or
	  replacement_v_count_31 or
	  replacement_v_count_32 or
	  replacement_v_count_33 or
	  replacement_v_count_34 or
	  replacement_v_count_35 or
	  replacement_v_count_36 or
	  replacement_v_count_37 or
	  replacement_v_count_38 or
	  replacement_v_count_39 or
	  replacement_v_count_40 or
	  replacement_v_count_41 or
	  replacement_v_count_42 or
	  replacement_v_count_43 or
	  replacement_v_count_44 or
	  replacement_v_count_45 or
	  replacement_v_count_46 or
	  replacement_v_count_47 or
	  replacement_v_count_48 or
	  replacement_v_count_49 or
	  replacement_v_count_50 or
	  replacement_v_count_51 or
	  replacement_v_count_52 or
	  replacement_v_count_53 or
	  replacement_v_count_54 or
	  replacement_v_count_55 or
	  replacement_v_count_56 or
	  replacement_v_count_57 or
	  replacement_v_count_58 or
	  replacement_v_count_59 or
	  replacement_v_count_60 or
	  replacement_v_count_61 or
	  replacement_v_count_62 or replacement_v_count_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_0;
      6'd1:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_1;
      6'd2:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_2;
      6'd3:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_3;
      6'd4:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_4;
      6'd5:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_5;
      6'd6:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_6;
      6'd7:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_7;
      6'd8:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_8;
      6'd9:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_9;
      6'd10:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_10;
      6'd11:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_11;
      6'd12:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_12;
      6'd13:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_13;
      6'd14:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_14;
      6'd15:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_15;
      6'd16:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_16;
      6'd17:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_17;
      6'd18:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_18;
      6'd19:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_19;
      6'd20:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_20;
      6'd21:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_21;
      6'd22:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_22;
      6'd23:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_23;
      6'd24:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_24;
      6'd25:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_25;
      6'd26:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_26;
      6'd27:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_27;
      6'd28:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_28;
      6'd29:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_29;
      6'd30:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_30;
      6'd31:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_31;
      6'd32:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_32;
      6'd33:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_33;
      6'd34:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_34;
      6'd35:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_35;
      6'd36:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_36;
      6'd37:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_37;
      6'd38:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_38;
      6'd39:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_39;
      6'd40:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_40;
      6'd41:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_41;
      6'd42:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_42;
      6'd43:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_43;
      6'd44:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_44;
      6'd45:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_45;
      6'd46:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_46;
      6'd47:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_47;
      6'd48:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_48;
      6'd49:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_49;
      6'd50:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_50;
      6'd51:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_51;
      6'd52:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_52;
      6'd53:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_53;
      6'd54:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_54;
      6'd55:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_55;
      6'd56:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_56;
      6'd57:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_57;
      6'd58:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_58;
      6'd59:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_59;
      6'd60:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_60;
      6'd61:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_61;
      6'd62:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_62;
      6'd63:
	  SEL_ARR_replacement_v_count_0_303_replacement__ETC___d1368 =
	      replacement_v_count_63;
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0:
	  SEL_ARR_NOT_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1743 =
	      !m_storebuffer_v_sb_meta_0[2];
      1'd1:
	  SEL_ARR_NOT_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1743 =
	      !m_storebuffer_v_sb_meta_1[2];
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1750 =
	      m_storebuffer_v_sb_meta_0[38];
      1'd1:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1750 =
	      m_storebuffer_v_sb_meta_1[38];
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 =
	      m_storebuffer_v_sb_meta_0[2];
      1'd1:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 =
	      m_storebuffer_v_sb_meta_1[2];
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_1_TO_ETC___d1756 =
	      m_storebuffer_v_sb_meta_0[1:0];
      1'd1:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_1_TO_ETC___d1756 =
	      m_storebuffer_v_sb_meta_1[1:0];
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746 =
	      m_storebuffer_v_sb_meta_0[102:71];
      1'd1:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746 =
	      m_storebuffer_v_sb_meta_1[102:71];
    endcase
  end
  always@(m_storebuffer_rg_head or
	  m_storebuffer_v_sb_meta_0 or m_storebuffer_v_sb_meta_1)
  begin
    case (m_storebuffer_rg_head)
      1'd0:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_37_T_ETC___d1752 =
	      m_storebuffer_v_sb_meta_0[37:35];
      1'd1:
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_37_T_ETC___d1752 =
	      m_storebuffer_v_sb_meta_1[37:35];
    endcase
  end
  always@(ff_core_request_D_OUT or x__h75111)
  begin
    case (ff_core_request_D_OUT[33:32])
      2'b0: lv_sign__h47751 = x__h75111[7];
      2'b01: lv_sign__h47751 = x__h75111[15];
      default: lv_sign__h47751 = x__h75111[31];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      71'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      34'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	m_storebuffer_rg_head <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_storebuffer_rg_sb_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_storebuffer_rg_tail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_storebuffer_v_sb_meta_0 <= `BSV_ASSIGNMENT_DELAY 103'd0;
	m_storebuffer_v_sb_meta_1 <= `BSV_ASSIGNMENT_DELAY 103'd0;
	m_storebuffer_v_sb_valid_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_storebuffer_v_sb_valid_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_fence_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_set <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_fence_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_way <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_globaldirty <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_handling_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_performing_replay <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_polling_mode <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_recent_core_req <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_recent_index <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_release_readphase <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (ff_core_response_rv_EN)
	  ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_core_response_rv_D_IN;
	if (ff_hold_request_rv_EN)
	  ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY ff_hold_request_rv_D_IN;
	if (ff_read_mem_response_rv_EN)
	  ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_read_mem_response_rv_D_IN;
	if (ff_write_mem_response_rv_EN)
	  ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_write_mem_response_rv_D_IN;
	if (m_storebuffer_rg_head_EN)
	  m_storebuffer_rg_head <= `BSV_ASSIGNMENT_DELAY
	      m_storebuffer_rg_head_D_IN;
	if (m_storebuffer_rg_sb_busy_EN)
	  m_storebuffer_rg_sb_busy <= `BSV_ASSIGNMENT_DELAY
	      m_storebuffer_rg_sb_busy_D_IN;
	if (m_storebuffer_rg_tail_EN)
	  m_storebuffer_rg_tail <= `BSV_ASSIGNMENT_DELAY
	      m_storebuffer_rg_tail_D_IN;
	if (m_storebuffer_v_sb_meta_0_EN)
	  m_storebuffer_v_sb_meta_0 <= `BSV_ASSIGNMENT_DELAY
	      m_storebuffer_v_sb_meta_0_D_IN;
	if (m_storebuffer_v_sb_meta_1_EN)
	  m_storebuffer_v_sb_meta_1 <= `BSV_ASSIGNMENT_DELAY
	      m_storebuffer_v_sb_meta_1_D_IN;
	if (m_storebuffer_v_sb_valid_0_EN)
	  m_storebuffer_v_sb_valid_0 <= `BSV_ASSIGNMENT_DELAY
	      m_storebuffer_v_sb_valid_0_D_IN;
	if (m_storebuffer_v_sb_valid_1_EN)
	  m_storebuffer_v_sb_valid_1 <= `BSV_ASSIGNMENT_DELAY
	      m_storebuffer_v_sb_valid_1_D_IN;
	if (replacement_v_count_0_EN)
	  replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_0_D_IN;
	if (replacement_v_count_1_EN)
	  replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_1_D_IN;
	if (replacement_v_count_10_EN)
	  replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_10_D_IN;
	if (replacement_v_count_11_EN)
	  replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_11_D_IN;
	if (replacement_v_count_12_EN)
	  replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_12_D_IN;
	if (replacement_v_count_13_EN)
	  replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_13_D_IN;
	if (replacement_v_count_14_EN)
	  replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_14_D_IN;
	if (replacement_v_count_15_EN)
	  replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_15_D_IN;
	if (replacement_v_count_16_EN)
	  replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_16_D_IN;
	if (replacement_v_count_17_EN)
	  replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_17_D_IN;
	if (replacement_v_count_18_EN)
	  replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_18_D_IN;
	if (replacement_v_count_19_EN)
	  replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_19_D_IN;
	if (replacement_v_count_2_EN)
	  replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_2_D_IN;
	if (replacement_v_count_20_EN)
	  replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_20_D_IN;
	if (replacement_v_count_21_EN)
	  replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_21_D_IN;
	if (replacement_v_count_22_EN)
	  replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_22_D_IN;
	if (replacement_v_count_23_EN)
	  replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_23_D_IN;
	if (replacement_v_count_24_EN)
	  replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_24_D_IN;
	if (replacement_v_count_25_EN)
	  replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_25_D_IN;
	if (replacement_v_count_26_EN)
	  replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_26_D_IN;
	if (replacement_v_count_27_EN)
	  replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_27_D_IN;
	if (replacement_v_count_28_EN)
	  replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_28_D_IN;
	if (replacement_v_count_29_EN)
	  replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_29_D_IN;
	if (replacement_v_count_3_EN)
	  replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_3_D_IN;
	if (replacement_v_count_30_EN)
	  replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_30_D_IN;
	if (replacement_v_count_31_EN)
	  replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_31_D_IN;
	if (replacement_v_count_32_EN)
	  replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_32_D_IN;
	if (replacement_v_count_33_EN)
	  replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_33_D_IN;
	if (replacement_v_count_34_EN)
	  replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_34_D_IN;
	if (replacement_v_count_35_EN)
	  replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_35_D_IN;
	if (replacement_v_count_36_EN)
	  replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_36_D_IN;
	if (replacement_v_count_37_EN)
	  replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_37_D_IN;
	if (replacement_v_count_38_EN)
	  replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_38_D_IN;
	if (replacement_v_count_39_EN)
	  replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_39_D_IN;
	if (replacement_v_count_4_EN)
	  replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_4_D_IN;
	if (replacement_v_count_40_EN)
	  replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_40_D_IN;
	if (replacement_v_count_41_EN)
	  replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_41_D_IN;
	if (replacement_v_count_42_EN)
	  replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_42_D_IN;
	if (replacement_v_count_43_EN)
	  replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_43_D_IN;
	if (replacement_v_count_44_EN)
	  replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_44_D_IN;
	if (replacement_v_count_45_EN)
	  replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_45_D_IN;
	if (replacement_v_count_46_EN)
	  replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_46_D_IN;
	if (replacement_v_count_47_EN)
	  replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_47_D_IN;
	if (replacement_v_count_48_EN)
	  replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_48_D_IN;
	if (replacement_v_count_49_EN)
	  replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_49_D_IN;
	if (replacement_v_count_5_EN)
	  replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_5_D_IN;
	if (replacement_v_count_50_EN)
	  replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_50_D_IN;
	if (replacement_v_count_51_EN)
	  replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_51_D_IN;
	if (replacement_v_count_52_EN)
	  replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_52_D_IN;
	if (replacement_v_count_53_EN)
	  replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_53_D_IN;
	if (replacement_v_count_54_EN)
	  replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_54_D_IN;
	if (replacement_v_count_55_EN)
	  replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_55_D_IN;
	if (replacement_v_count_56_EN)
	  replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_56_D_IN;
	if (replacement_v_count_57_EN)
	  replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_57_D_IN;
	if (replacement_v_count_58_EN)
	  replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_58_D_IN;
	if (replacement_v_count_59_EN)
	  replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_59_D_IN;
	if (replacement_v_count_6_EN)
	  replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_6_D_IN;
	if (replacement_v_count_60_EN)
	  replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_60_D_IN;
	if (replacement_v_count_61_EN)
	  replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_61_D_IN;
	if (replacement_v_count_62_EN)
	  replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_62_D_IN;
	if (replacement_v_count_63_EN)
	  replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_63_D_IN;
	if (replacement_v_count_7_EN)
	  replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_7_D_IN;
	if (replacement_v_count_8_EN)
	  replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_8_D_IN;
	if (replacement_v_count_9_EN)
	  replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_9_D_IN;
	if (rg_fence_pending_EN)
	  rg_fence_pending <= `BSV_ASSIGNMENT_DELAY rg_fence_pending_D_IN;
	if (rg_fence_set_EN)
	  rg_fence_set <= `BSV_ASSIGNMENT_DELAY rg_fence_set_D_IN;
	if (rg_fence_stall_EN)
	  rg_fence_stall <= `BSV_ASSIGNMENT_DELAY rg_fence_stall_D_IN;
	if (rg_fence_way_EN)
	  rg_fence_way <= `BSV_ASSIGNMENT_DELAY rg_fence_way_D_IN;
	if (rg_globaldirty_EN)
	  rg_globaldirty <= `BSV_ASSIGNMENT_DELAY rg_globaldirty_D_IN;
	if (rg_handling_miss_EN)
	  rg_handling_miss <= `BSV_ASSIGNMENT_DELAY rg_handling_miss_D_IN;
	if (rg_performing_replay_EN)
	  rg_performing_replay <= `BSV_ASSIGNMENT_DELAY
	      rg_performing_replay_D_IN;
	if (rg_polling_mode_EN)
	  rg_polling_mode <= `BSV_ASSIGNMENT_DELAY rg_polling_mode_D_IN;
	if (rg_recent_core_req_EN)
	  rg_recent_core_req <= `BSV_ASSIGNMENT_DELAY rg_recent_core_req_D_IN;
	if (rg_recent_index_EN)
	  rg_recent_index <= `BSV_ASSIGNMENT_DELAY rg_recent_index_D_IN;
	if (rg_release_readphase_EN)
	  rg_release_readphase <= `BSV_ASSIGNMENT_DELAY
	      rg_release_readphase_D_IN;
	if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
	if (v_reg_dirty_0_EN)
	  v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_0_D_IN;
	if (v_reg_dirty_1_EN)
	  v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_1_D_IN;
	if (v_reg_dirty_10_EN)
	  v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_10_D_IN;
	if (v_reg_dirty_11_EN)
	  v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_11_D_IN;
	if (v_reg_dirty_12_EN)
	  v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_12_D_IN;
	if (v_reg_dirty_13_EN)
	  v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_13_D_IN;
	if (v_reg_dirty_14_EN)
	  v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_14_D_IN;
	if (v_reg_dirty_15_EN)
	  v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_15_D_IN;
	if (v_reg_dirty_16_EN)
	  v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_16_D_IN;
	if (v_reg_dirty_17_EN)
	  v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_17_D_IN;
	if (v_reg_dirty_18_EN)
	  v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_18_D_IN;
	if (v_reg_dirty_19_EN)
	  v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_19_D_IN;
	if (v_reg_dirty_2_EN)
	  v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_2_D_IN;
	if (v_reg_dirty_20_EN)
	  v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_20_D_IN;
	if (v_reg_dirty_21_EN)
	  v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_21_D_IN;
	if (v_reg_dirty_22_EN)
	  v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_22_D_IN;
	if (v_reg_dirty_23_EN)
	  v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_23_D_IN;
	if (v_reg_dirty_24_EN)
	  v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_24_D_IN;
	if (v_reg_dirty_25_EN)
	  v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_25_D_IN;
	if (v_reg_dirty_26_EN)
	  v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_26_D_IN;
	if (v_reg_dirty_27_EN)
	  v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_27_D_IN;
	if (v_reg_dirty_28_EN)
	  v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_28_D_IN;
	if (v_reg_dirty_29_EN)
	  v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_29_D_IN;
	if (v_reg_dirty_3_EN)
	  v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_3_D_IN;
	if (v_reg_dirty_30_EN)
	  v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_30_D_IN;
	if (v_reg_dirty_31_EN)
	  v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_31_D_IN;
	if (v_reg_dirty_32_EN)
	  v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_32_D_IN;
	if (v_reg_dirty_33_EN)
	  v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_33_D_IN;
	if (v_reg_dirty_34_EN)
	  v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_34_D_IN;
	if (v_reg_dirty_35_EN)
	  v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_35_D_IN;
	if (v_reg_dirty_36_EN)
	  v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_36_D_IN;
	if (v_reg_dirty_37_EN)
	  v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_37_D_IN;
	if (v_reg_dirty_38_EN)
	  v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_38_D_IN;
	if (v_reg_dirty_39_EN)
	  v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_39_D_IN;
	if (v_reg_dirty_4_EN)
	  v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_4_D_IN;
	if (v_reg_dirty_40_EN)
	  v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_40_D_IN;
	if (v_reg_dirty_41_EN)
	  v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_41_D_IN;
	if (v_reg_dirty_42_EN)
	  v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_42_D_IN;
	if (v_reg_dirty_43_EN)
	  v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_43_D_IN;
	if (v_reg_dirty_44_EN)
	  v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_44_D_IN;
	if (v_reg_dirty_45_EN)
	  v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_45_D_IN;
	if (v_reg_dirty_46_EN)
	  v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_46_D_IN;
	if (v_reg_dirty_47_EN)
	  v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_47_D_IN;
	if (v_reg_dirty_48_EN)
	  v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_48_D_IN;
	if (v_reg_dirty_49_EN)
	  v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_49_D_IN;
	if (v_reg_dirty_5_EN)
	  v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_5_D_IN;
	if (v_reg_dirty_50_EN)
	  v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_50_D_IN;
	if (v_reg_dirty_51_EN)
	  v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_51_D_IN;
	if (v_reg_dirty_52_EN)
	  v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_52_D_IN;
	if (v_reg_dirty_53_EN)
	  v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_53_D_IN;
	if (v_reg_dirty_54_EN)
	  v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_54_D_IN;
	if (v_reg_dirty_55_EN)
	  v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_55_D_IN;
	if (v_reg_dirty_56_EN)
	  v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_56_D_IN;
	if (v_reg_dirty_57_EN)
	  v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_57_D_IN;
	if (v_reg_dirty_58_EN)
	  v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_58_D_IN;
	if (v_reg_dirty_59_EN)
	  v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_59_D_IN;
	if (v_reg_dirty_6_EN)
	  v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_6_D_IN;
	if (v_reg_dirty_60_EN)
	  v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_60_D_IN;
	if (v_reg_dirty_61_EN)
	  v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_61_D_IN;
	if (v_reg_dirty_62_EN)
	  v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_62_D_IN;
	if (v_reg_dirty_63_EN)
	  v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_63_D_IN;
	if (v_reg_dirty_7_EN)
	  v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_7_D_IN;
	if (v_reg_dirty_8_EN)
	  v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_8_D_IN;
	if (v_reg_dirty_9_EN)
	  v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_9_D_IN;
	if (v_reg_valid_0_EN)
	  v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_0_D_IN;
	if (v_reg_valid_1_EN)
	  v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_1_D_IN;
	if (v_reg_valid_10_EN)
	  v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_10_D_IN;
	if (v_reg_valid_11_EN)
	  v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_11_D_IN;
	if (v_reg_valid_12_EN)
	  v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_12_D_IN;
	if (v_reg_valid_13_EN)
	  v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_13_D_IN;
	if (v_reg_valid_14_EN)
	  v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_14_D_IN;
	if (v_reg_valid_15_EN)
	  v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_15_D_IN;
	if (v_reg_valid_16_EN)
	  v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_16_D_IN;
	if (v_reg_valid_17_EN)
	  v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_17_D_IN;
	if (v_reg_valid_18_EN)
	  v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_18_D_IN;
	if (v_reg_valid_19_EN)
	  v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_19_D_IN;
	if (v_reg_valid_2_EN)
	  v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_2_D_IN;
	if (v_reg_valid_20_EN)
	  v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_20_D_IN;
	if (v_reg_valid_21_EN)
	  v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_21_D_IN;
	if (v_reg_valid_22_EN)
	  v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_22_D_IN;
	if (v_reg_valid_23_EN)
	  v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_23_D_IN;
	if (v_reg_valid_24_EN)
	  v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_24_D_IN;
	if (v_reg_valid_25_EN)
	  v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_25_D_IN;
	if (v_reg_valid_26_EN)
	  v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_26_D_IN;
	if (v_reg_valid_27_EN)
	  v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_27_D_IN;
	if (v_reg_valid_28_EN)
	  v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_28_D_IN;
	if (v_reg_valid_29_EN)
	  v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_29_D_IN;
	if (v_reg_valid_3_EN)
	  v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_3_D_IN;
	if (v_reg_valid_30_EN)
	  v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_30_D_IN;
	if (v_reg_valid_31_EN)
	  v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_31_D_IN;
	if (v_reg_valid_32_EN)
	  v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_32_D_IN;
	if (v_reg_valid_33_EN)
	  v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_33_D_IN;
	if (v_reg_valid_34_EN)
	  v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_34_D_IN;
	if (v_reg_valid_35_EN)
	  v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_35_D_IN;
	if (v_reg_valid_36_EN)
	  v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_36_D_IN;
	if (v_reg_valid_37_EN)
	  v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_37_D_IN;
	if (v_reg_valid_38_EN)
	  v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_38_D_IN;
	if (v_reg_valid_39_EN)
	  v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_39_D_IN;
	if (v_reg_valid_4_EN)
	  v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_4_D_IN;
	if (v_reg_valid_40_EN)
	  v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_40_D_IN;
	if (v_reg_valid_41_EN)
	  v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_41_D_IN;
	if (v_reg_valid_42_EN)
	  v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_42_D_IN;
	if (v_reg_valid_43_EN)
	  v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_43_D_IN;
	if (v_reg_valid_44_EN)
	  v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_44_D_IN;
	if (v_reg_valid_45_EN)
	  v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_45_D_IN;
	if (v_reg_valid_46_EN)
	  v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_46_D_IN;
	if (v_reg_valid_47_EN)
	  v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_47_D_IN;
	if (v_reg_valid_48_EN)
	  v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_48_D_IN;
	if (v_reg_valid_49_EN)
	  v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_49_D_IN;
	if (v_reg_valid_5_EN)
	  v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_5_D_IN;
	if (v_reg_valid_50_EN)
	  v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_50_D_IN;
	if (v_reg_valid_51_EN)
	  v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_51_D_IN;
	if (v_reg_valid_52_EN)
	  v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_52_D_IN;
	if (v_reg_valid_53_EN)
	  v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_53_D_IN;
	if (v_reg_valid_54_EN)
	  v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_54_D_IN;
	if (v_reg_valid_55_EN)
	  v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_55_D_IN;
	if (v_reg_valid_56_EN)
	  v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_56_D_IN;
	if (v_reg_valid_57_EN)
	  v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_57_D_IN;
	if (v_reg_valid_58_EN)
	  v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_58_D_IN;
	if (v_reg_valid_59_EN)
	  v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_59_D_IN;
	if (v_reg_valid_6_EN)
	  v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_6_D_IN;
	if (v_reg_valid_60_EN)
	  v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_60_D_IN;
	if (v_reg_valid_61_EN)
	  v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_61_D_IN;
	if (v_reg_valid_62_EN)
	  v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_62_D_IN;
	if (v_reg_valid_63_EN)
	  v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_63_D_IN;
	if (v_reg_valid_7_EN)
	  v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_7_D_IN;
	if (v_reg_valid_8_EN)
	  v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_8_D_IN;
	if (v_reg_valid_9_EN)
	  v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_core_response_rv = 41'h0AAAAAAAAAA;
    ff_hold_request_rv = 72'hAAAAAAAAAAAAAAAAAA;
    ff_read_mem_response_rv = 35'h2AAAAAAAA;
    ff_write_mem_response_rv = 2'h2;
    m_storebuffer_rg_head = 1'h0;
    m_storebuffer_rg_sb_busy = 1'h0;
    m_storebuffer_rg_tail = 1'h0;
    m_storebuffer_v_sb_meta_0 = 103'h2AAAAAAAAAAAAAAAAAAAAAAAAA;
    m_storebuffer_v_sb_meta_1 = 103'h2AAAAAAAAAAAAAAAAAAAAAAAAA;
    m_storebuffer_v_sb_valid_0 = 1'h0;
    m_storebuffer_v_sb_valid_1 = 1'h0;
    replacement_v_count_0 = 2'h2;
    replacement_v_count_1 = 2'h2;
    replacement_v_count_10 = 2'h2;
    replacement_v_count_11 = 2'h2;
    replacement_v_count_12 = 2'h2;
    replacement_v_count_13 = 2'h2;
    replacement_v_count_14 = 2'h2;
    replacement_v_count_15 = 2'h2;
    replacement_v_count_16 = 2'h2;
    replacement_v_count_17 = 2'h2;
    replacement_v_count_18 = 2'h2;
    replacement_v_count_19 = 2'h2;
    replacement_v_count_2 = 2'h2;
    replacement_v_count_20 = 2'h2;
    replacement_v_count_21 = 2'h2;
    replacement_v_count_22 = 2'h2;
    replacement_v_count_23 = 2'h2;
    replacement_v_count_24 = 2'h2;
    replacement_v_count_25 = 2'h2;
    replacement_v_count_26 = 2'h2;
    replacement_v_count_27 = 2'h2;
    replacement_v_count_28 = 2'h2;
    replacement_v_count_29 = 2'h2;
    replacement_v_count_3 = 2'h2;
    replacement_v_count_30 = 2'h2;
    replacement_v_count_31 = 2'h2;
    replacement_v_count_32 = 2'h2;
    replacement_v_count_33 = 2'h2;
    replacement_v_count_34 = 2'h2;
    replacement_v_count_35 = 2'h2;
    replacement_v_count_36 = 2'h2;
    replacement_v_count_37 = 2'h2;
    replacement_v_count_38 = 2'h2;
    replacement_v_count_39 = 2'h2;
    replacement_v_count_4 = 2'h2;
    replacement_v_count_40 = 2'h2;
    replacement_v_count_41 = 2'h2;
    replacement_v_count_42 = 2'h2;
    replacement_v_count_43 = 2'h2;
    replacement_v_count_44 = 2'h2;
    replacement_v_count_45 = 2'h2;
    replacement_v_count_46 = 2'h2;
    replacement_v_count_47 = 2'h2;
    replacement_v_count_48 = 2'h2;
    replacement_v_count_49 = 2'h2;
    replacement_v_count_5 = 2'h2;
    replacement_v_count_50 = 2'h2;
    replacement_v_count_51 = 2'h2;
    replacement_v_count_52 = 2'h2;
    replacement_v_count_53 = 2'h2;
    replacement_v_count_54 = 2'h2;
    replacement_v_count_55 = 2'h2;
    replacement_v_count_56 = 2'h2;
    replacement_v_count_57 = 2'h2;
    replacement_v_count_58 = 2'h2;
    replacement_v_count_59 = 2'h2;
    replacement_v_count_6 = 2'h2;
    replacement_v_count_60 = 2'h2;
    replacement_v_count_61 = 2'h2;
    replacement_v_count_62 = 2'h2;
    replacement_v_count_63 = 2'h2;
    replacement_v_count_7 = 2'h2;
    replacement_v_count_8 = 2'h2;
    replacement_v_count_9 = 2'h2;
    rg_fence_pending = 1'h0;
    rg_fence_set = 6'h2A;
    rg_fence_stall = 1'h0;
    rg_fence_way = 2'h2;
    rg_globaldirty = 1'h0;
    rg_handling_miss = 1'h0;
    rg_performing_replay = 1'h0;
    rg_polling_mode = 1'h0;
    rg_recent_core_req = 6'h2A;
    rg_recent_index = 6'h2A;
    rg_release_readphase = 1'h0;
    rg_wEpoch = 1'h0;
    v_reg_dirty_0 = 4'hA;
    v_reg_dirty_1 = 4'hA;
    v_reg_dirty_10 = 4'hA;
    v_reg_dirty_11 = 4'hA;
    v_reg_dirty_12 = 4'hA;
    v_reg_dirty_13 = 4'hA;
    v_reg_dirty_14 = 4'hA;
    v_reg_dirty_15 = 4'hA;
    v_reg_dirty_16 = 4'hA;
    v_reg_dirty_17 = 4'hA;
    v_reg_dirty_18 = 4'hA;
    v_reg_dirty_19 = 4'hA;
    v_reg_dirty_2 = 4'hA;
    v_reg_dirty_20 = 4'hA;
    v_reg_dirty_21 = 4'hA;
    v_reg_dirty_22 = 4'hA;
    v_reg_dirty_23 = 4'hA;
    v_reg_dirty_24 = 4'hA;
    v_reg_dirty_25 = 4'hA;
    v_reg_dirty_26 = 4'hA;
    v_reg_dirty_27 = 4'hA;
    v_reg_dirty_28 = 4'hA;
    v_reg_dirty_29 = 4'hA;
    v_reg_dirty_3 = 4'hA;
    v_reg_dirty_30 = 4'hA;
    v_reg_dirty_31 = 4'hA;
    v_reg_dirty_32 = 4'hA;
    v_reg_dirty_33 = 4'hA;
    v_reg_dirty_34 = 4'hA;
    v_reg_dirty_35 = 4'hA;
    v_reg_dirty_36 = 4'hA;
    v_reg_dirty_37 = 4'hA;
    v_reg_dirty_38 = 4'hA;
    v_reg_dirty_39 = 4'hA;
    v_reg_dirty_4 = 4'hA;
    v_reg_dirty_40 = 4'hA;
    v_reg_dirty_41 = 4'hA;
    v_reg_dirty_42 = 4'hA;
    v_reg_dirty_43 = 4'hA;
    v_reg_dirty_44 = 4'hA;
    v_reg_dirty_45 = 4'hA;
    v_reg_dirty_46 = 4'hA;
    v_reg_dirty_47 = 4'hA;
    v_reg_dirty_48 = 4'hA;
    v_reg_dirty_49 = 4'hA;
    v_reg_dirty_5 = 4'hA;
    v_reg_dirty_50 = 4'hA;
    v_reg_dirty_51 = 4'hA;
    v_reg_dirty_52 = 4'hA;
    v_reg_dirty_53 = 4'hA;
    v_reg_dirty_54 = 4'hA;
    v_reg_dirty_55 = 4'hA;
    v_reg_dirty_56 = 4'hA;
    v_reg_dirty_57 = 4'hA;
    v_reg_dirty_58 = 4'hA;
    v_reg_dirty_59 = 4'hA;
    v_reg_dirty_6 = 4'hA;
    v_reg_dirty_60 = 4'hA;
    v_reg_dirty_61 = 4'hA;
    v_reg_dirty_62 = 4'hA;
    v_reg_dirty_63 = 4'hA;
    v_reg_dirty_7 = 4'hA;
    v_reg_dirty_8 = 4'hA;
    v_reg_dirty_9 = 4'hA;
    v_reg_valid_0 = 4'hA;
    v_reg_valid_1 = 4'hA;
    v_reg_valid_10 = 4'hA;
    v_reg_valid_11 = 4'hA;
    v_reg_valid_12 = 4'hA;
    v_reg_valid_13 = 4'hA;
    v_reg_valid_14 = 4'hA;
    v_reg_valid_15 = 4'hA;
    v_reg_valid_16 = 4'hA;
    v_reg_valid_17 = 4'hA;
    v_reg_valid_18 = 4'hA;
    v_reg_valid_19 = 4'hA;
    v_reg_valid_2 = 4'hA;
    v_reg_valid_20 = 4'hA;
    v_reg_valid_21 = 4'hA;
    v_reg_valid_22 = 4'hA;
    v_reg_valid_23 = 4'hA;
    v_reg_valid_24 = 4'hA;
    v_reg_valid_25 = 4'hA;
    v_reg_valid_26 = 4'hA;
    v_reg_valid_27 = 4'hA;
    v_reg_valid_28 = 4'hA;
    v_reg_valid_29 = 4'hA;
    v_reg_valid_3 = 4'hA;
    v_reg_valid_30 = 4'hA;
    v_reg_valid_31 = 4'hA;
    v_reg_valid_32 = 4'hA;
    v_reg_valid_33 = 4'hA;
    v_reg_valid_34 = 4'hA;
    v_reg_valid_35 = 4'hA;
    v_reg_valid_36 = 4'hA;
    v_reg_valid_37 = 4'hA;
    v_reg_valid_38 = 4'hA;
    v_reg_valid_39 = 4'hA;
    v_reg_valid_4 = 4'hA;
    v_reg_valid_40 = 4'hA;
    v_reg_valid_41 = 4'hA;
    v_reg_valid_42 = 4'hA;
    v_reg_valid_43 = 4'hA;
    v_reg_valid_44 = 4'hA;
    v_reg_valid_45 = 4'hA;
    v_reg_valid_46 = 4'hA;
    v_reg_valid_47 = 4'hA;
    v_reg_valid_48 = 4'hA;
    v_reg_valid_49 = 4'hA;
    v_reg_valid_5 = 4'hA;
    v_reg_valid_50 = 4'hA;
    v_reg_valid_51 = 4'hA;
    v_reg_valid_52 = 4'hA;
    v_reg_valid_53 = 4'hA;
    v_reg_valid_54 = 4'hA;
    v_reg_valid_55 = 4'hA;
    v_reg_valid_56 = 4'hA;
    v_reg_valid_57 = 4'hA;
    v_reg_valid_58 = 4'hA;
    v_reg_valid_59 = 4'hA;
    v_reg_valid_6 = 4'hA;
    v_reg_valid_60 = 4'hA;
    v_reg_valid_61 = 4'hA;
    v_reg_valid_62 = 4'hA;
    v_reg_valid_63 = 4'hA;
    v_reg_valid_7 = 4'hA;
    v_reg_valid_8 = 4'hA;
    v_reg_valid_9 = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (!ma_cache_enable_c ||
	   rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643))
	begin
	  TASK_testplusargs___d1647 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (!ma_cache_enable_c ||
	   rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643))
	begin
	  TASK_testplusargs___d1648 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (!ma_cache_enable_c ||
	   rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643))
	begin
	  TASK_testplusargs___d1649 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_cache_enable_wget__92_47_OR_rg_recent_i_ETC___d1652 =
	(!ma_cache_enable_c ||
	 rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643) &&
	(TASK_testplusargs___d1647 ||
	 TASK_testplusargs___d1648 && TASK_testplusargs___d1649);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (!ma_cache_enable_c ||
	   rg_recent_index_250_EQ_IF_put_core_req_put_BIT_ETC___d1643))
	begin
	  v__h108299 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  NOT_wr_cache_enable_wget__92_47_OR_rg_recent_i_ETC___d1652)
	$write("[%10d", v__h108299, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  NOT_wr_cache_enable_wget__92_47_OR_rg_recent_i_ETC___d1652)
	$write("[%2d]DCACHE: Skipping RAM Access", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  NOT_wr_cache_enable_wget__92_47_OR_rg_recent_i_ETC___d1652)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1654 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1655 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1656 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_654_OR_TASK_testplusargs_655_ETC___d1661 =
	(TASK_testplusargs___d1654 ||
	 TASK_testplusargs___d1655 && TASK_testplusargs___d1656) &&
	put_core_req_put[38];
    TASK_testplusargs_654_OR_TASK_testplusargs_655_ETC___d1663 =
	(TASK_testplusargs___d1654 ||
	 TASK_testplusargs___d1655 && TASK_testplusargs___d1656) &&
	!put_core_req_put[38];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h108451 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("[%10d", v__h108451, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("[%2d]DCACHE: Receiving request: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("'h%h", put_core_req_put[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_654_OR_TASK_testplusargs_655_ETC___d1661)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_654_OR_TASK_testplusargs_655_ETC___d1663)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("'h%h", put_core_req_put[37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("'h%h", put_core_req_put[36:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("'h%h", put_core_req_put[34:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("'h%h", put_core_req_put[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1654 ||
	   TASK_testplusargs___d1655 && TASK_testplusargs___d1656))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1667 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1668 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1669 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h108613 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1667 ||
	   TASK_testplusargs___d1668 && TASK_testplusargs___d1669))
	$write("[%10d", v__h108613, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1667 ||
	   TASK_testplusargs___d1668 && TASK_testplusargs___d1669))
	$write("[%2d]DCACHE: set:%d", id, set_index__h108005);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1667 ||
	   TASK_testplusargs___d1668 && TASK_testplusargs___d1669))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1736 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1737 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1738 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_736_OR_TASK_testplusargs_737_ETC___d1744 =
	(TASK_testplusargs___d1736 ||
	 TASK_testplusargs___d1737 && TASK_testplusargs___d1738) &&
	SEL_ARR_NOT_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1743;
    TASK_testplusargs_736_OR_TASK_testplusargs_737_ETC___d1758 =
	(TASK_testplusargs___d1736 ||
	 TASK_testplusargs___d1737 && TASK_testplusargs___d1738) &&
	!SEL_ARR_NOT_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1743;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  v__h109456 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1736 ||
	   TASK_testplusargs___d1737 && TASK_testplusargs___d1738))
	$write("[%10d", v__h109456, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_736_OR_TASK_testplusargs_737_ETC___d1744)
	$write("[%2d]SB: Committing store sbindex:%d with ",
	       id,
	       m_storebuffer_rg_head,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746,
	       ", ",
	       "data: ",
	       "'h%h",
	       value__h109714,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1750,
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_37_T_ETC___d1752,
	       ", ",
	       "mask: ",
	       "'h%h",
	       value__h109720,
	       ", ",
	       "io: ",
	       "False",
	       ", ",
	       "size: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_1_TO_ETC___d1756,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_736_OR_TASK_testplusargs_737_ETC___d1758)
	$write("[%2d]SB: Committing store sbindex:%d with ",
	       id,
	       m_storebuffer_rg_head,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746,
	       ", ",
	       "data: ",
	       "'h%h",
	       value__h109714,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1750,
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_37_T_ETC___d1752,
	       ", ",
	       "mask: ",
	       "'h%h",
	       value__h109720,
	       ", ",
	       "io: ",
	       "True",
	       ", ",
	       "size: ",
	       "'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_1_TO_ETC___d1756,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1736 ||
	   TASK_testplusargs___d1737 && TASK_testplusargs___d1738))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1759 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1760 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1761 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_759_OR_TASK_testplusargs_760_ETC___d1765 =
	(TASK_testplusargs___d1759 ||
	 TASK_testplusargs___d1760 && TASK_testplusargs___d1761) &&
	SEL_ARR_NOT_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1743;
    TASK_testplusargs_759_OR_TASK_testplusargs_760_ETC___d1766 =
	(TASK_testplusargs___d1759 ||
	 TASK_testplusargs___d1760 && TASK_testplusargs___d1761) &&
	!SEL_ARR_NOT_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1743;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  v__h109644 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("[%10d", v__h109644, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("[%2d]DCACHE: Commit Store entry:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("Storebuffer { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("'h%h", value__h109714);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1750);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write(", ", "fbindex: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_37_T_ETC___d1752);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write(", ", "mask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("'h%h", value__h109720);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_759_OR_TASK_testplusargs_760_ETC___d1765)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_759_OR_TASK_testplusargs_760_ETC___d1766)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("'h%h",
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_1_TO_ETC___d1756,
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1759 ||
	   TASK_testplusargs___d1760 && TASK_testplusargs___d1761))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  TASK_testplusargs___d1771 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  TASK_testplusargs___d1772 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  TASK_testplusargs___d1773 = $test$plusargs("l0");
	  #0;
	end
    SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1776 =
	SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 &&
	(TASK_testplusargs___d1771 ||
	 TASK_testplusargs___d1772 && TASK_testplusargs___d1773);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  v__h109840 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1776)
	$write("[%10d", v__h109840, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1776)
	$write("[%2d]DCACHE: Store to NC Addr:%h",
	       id,
	       SEL_ARR_m_storebuffer_v_sb_meta_0_45_BITS_102__ETC___d1746);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1776)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  TASK_testplusargs___d1792 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  TASK_testplusargs___d1793 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  TASK_testplusargs___d1794 = $test$plusargs("l0");
	  #0;
	end
    NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1797 =
	!SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769 &&
	(TASK_testplusargs___d1792 ||
	 TASK_testplusargs___d1793 && TASK_testplusargs___d1794);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_51__ETC___d1769)
	begin
	  v__h109978 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1797)
	$write("[%10d", v__h109978, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1797)
	$write("[%2d]DCACHE: Store to Available line", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	  NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_2_ETC___d1797)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767)
	begin
	  TASK_testplusargs___d1801 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767)
	begin
	  TASK_testplusargs___d1802 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767)
	begin
	  TASK_testplusargs___d1803 = $test$plusargs("l0");
	  #0;
	end
    NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_3_ETC___d1806 =
	!SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767 &&
	(TASK_testplusargs___d1801 ||
	 TASK_testplusargs___d1802 && TASK_testplusargs___d1803);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_38_48_ETC___d1767)
	begin
	  v__h112125 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_3_ETC___d1806)
	$write("[%10d", v__h112125, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_3_ETC___d1806)
	$write("[%2d]DCACHE: Store is being dropped- epoch mismatch", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_SEL_ARR_m_storebuffer_v_sb_meta_0_45_BIT_3_ETC___d1806)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d236 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d237 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d238 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h33369 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d236 ||
	   TASK_testplusargs___d237 && TASK_testplusargs___d238))
	$write("[%10d", v__h33369, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d236 ||
	   TASK_testplusargs___d237 && TASK_testplusargs___d238))
	$write("[%2d]DCACHE: lv_tag_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d236 ||
	   TASK_testplusargs___d237 && TASK_testplusargs___d238))
	$write("TagResponse { ", "waymask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d236 ||
	   TASK_testplusargs___d237 && TASK_testplusargs___d238))
	$write("'h%h", m_tag_mv_read_response[35:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d236 ||
	   TASK_testplusargs___d237 && TASK_testplusargs___d238))
	$write(", ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d236 ||
	   TASK_testplusargs___d237 && TASK_testplusargs___d238))
	$write("'h%h", m_tag_mv_read_response[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d236 ||
	   TASK_testplusargs___d237 && TASK_testplusargs___d238))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d246 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d247 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d248 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h33531 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("[%10d", v__h33531, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("[%2d]DCACHE: lv_data_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("DataResponse { ", "line: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("'h%h", m_data_mv_read_response[543:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("'h%h", m_data_mv_read_response[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d246 ||
	   TASK_testplusargs___d247 && TASK_testplusargs___d248))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_core_re_ETC___d303)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache1rw.bsv\", line 681, column 48\nDCACHE: More than one way is a hit in the cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_core_re_ETC___d303)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d304 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d305 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d306 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h35709 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("[%10d", v__h35709, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("[%2d]DCACHE: RAM Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("'h%h", ff_core_request_D_OUT[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("'h%h", ff_core_request_D_OUT[37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("'h%h", ff_core_request_D_OUT[36:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("'h%h", ff_core_request_D_OUT[34:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("'h%h", ff_core_request_D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d304 ||
	   TASK_testplusargs___d305 && TASK_testplusargs___d306))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d312 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d314 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h35870 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d312 ||
	   TASK_testplusargs___d313 && TASK_testplusargs___d314))
	$write("[%10d", v__h35870, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d312 ||
	   TASK_testplusargs___d313 && TASK_testplusargs___d314))
	$write("[%2d]DCACHE: RAM Hit:%b ", id, lv_hitmask__h33463);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d312 ||
	   TASK_testplusargs___d313 && TASK_testplusargs___d314))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d320 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d321 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d322 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  v__h35977 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("[%10d", v__h35977, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("[%2d]DCACHE: FB Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("'h%h", ff_core_request_D_OUT[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("'h%h", ff_core_request_D_OUT[37]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("'h%h", ff_core_request_D_OUT[36:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("'h%h", ff_core_request_D_OUT[34:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("'h%h", ff_core_request_D_OUT[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d320 ||
	   TASK_testplusargs___d321 && TASK_testplusargs___d322))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) &&
	  ff_core_request_D_OUT[36:35] != 2'd0)
	begin
	  TASK_testplusargs___d357 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) &&
	  ff_core_request_D_OUT[36:35] != 2'd0)
	begin
	  TASK_testplusargs___d358 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) &&
	  ff_core_request_D_OUT[36:35] != 2'd0)
	begin
	  TASK_testplusargs___d359 = $test$plusargs("l1");
	  #0;
	end
    NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d362 =
	(!ma_cache_enable_c ||
	 ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) &&
	ff_core_request_D_OUT[36:35] != 2'd0 &&
	(TASK_testplusargs___d357 ||
	 TASK_testplusargs___d358 && TASK_testplusargs___d359);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) &&
	  ff_core_request_D_OUT[36:35] != 2'd0)
	begin
	  v__h37164 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d362)
	$write("[%10d", v__h37164, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d362)
	$write("[%2d]DCACHE: FB: Detected NC Write", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d362)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d369)
	begin
	  TASK_testplusargs___d370 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d369)
	begin
	  TASK_testplusargs___d371 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d369)
	begin
	  TASK_testplusargs___d372 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_29_BIT_1_52__ETC___d375 =
	m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d370 ||
	 TASK_testplusargs___d371 && TASK_testplusargs___d372);
    wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d376 =
	(ma_cache_enable_c &&
	 !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	 ff_core_request_D_OUT[36:35] == 2'd0) &&
	m_fillbuffer_mav_polling_response_29_BIT_1_52__ETC___d375;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d369)
	begin
	  v__h37014 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d376)
	$write("[%10d", v__h37014, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d376)
	$write("[%2d]DCACHE: FB: Hit in Line:%b for Addr:%h",
	       id,
	       m_fillbuffer_mav_polling_response[9:2],
	       ff_core_request_D_OUT[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d376)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d380)
	begin
	  TASK_testplusargs___d386 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d380)
	begin
	  TASK_testplusargs___d387 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d380)
	begin
	  TASK_testplusargs___d388 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_29_BIT_0_53__ETC___d391 =
	m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d386 ||
	 TASK_testplusargs___d387 && TASK_testplusargs___d388);
    wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d393 =
	(ma_cache_enable_c &&
	 !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	 ff_core_request_D_OUT[36:35] == 2'd0) &&
	m_fillbuffer_mav_polling_response[1] &&
	m_fillbuffer_mav_polling_response_29_BIT_0_53__ETC___d391;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d380)
	begin
	  v__h37360 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d393)
	$write("[%10d", v__h37360, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d393)
	$write("[%2d]DCACHE: FB: Required Word found", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d393)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d395)
	begin
	  TASK_testplusargs___d396 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d395)
	begin
	  TASK_testplusargs___d397 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d395)
	begin
	  TASK_testplusargs___d398 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_29_BIT_0_ETC___d401 =
	!m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d396 ||
	 TASK_testplusargs___d397 && TASK_testplusargs___d398);
    wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d403 =
	(ma_cache_enable_c &&
	 !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	 ff_core_request_D_OUT[36:35] == 2'd0) &&
	m_fillbuffer_mav_polling_response[1] &&
	NOT_m_fillbuffer_mav_polling_response_29_BIT_0_ETC___d401;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d395)
	begin
	  v__h37533 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d403)
	$write("[%10d", v__h37533, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d403)
	$write("[%2d]DCACHE: FB: Required word not available yet", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d403)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d406)
	begin
	  TASK_testplusargs___d407 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d406)
	begin
	  TASK_testplusargs___d408 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d406)
	begin
	  TASK_testplusargs___d409 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_29_BIT_1_ETC___d412 =
	!m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d407 ||
	 TASK_testplusargs___d408 && TASK_testplusargs___d409);
    wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d413 =
	(ma_cache_enable_c &&
	 !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 ||
	 ff_core_request_D_OUT[36:35] == 2'd0) &&
	NOT_m_fillbuffer_mav_polling_response_29_BIT_1_ETC___d412;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d406)
	begin
	  v__h37657 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d413)
	$write("[%10d", v__h37657, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d413)
	$write("[%2d]DCACHE: FB: Miss", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d413)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1219 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1220 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1221 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1227 =
	(TASK_testplusargs___d1219 ||
	 TASK_testplusargs___d1220 && TASK_testplusargs___d1221) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1229 =
	(TASK_testplusargs___d1219 ||
	 TASK_testplusargs___d1220 && TASK_testplusargs___d1221) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1231 =
	(TASK_testplusargs___d1219 ||
	 TASK_testplusargs___d1220 && TASK_testplusargs___d1221) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1233 =
	(TASK_testplusargs___d1219 ||
	 TASK_testplusargs___d1220 && TASK_testplusargs___d1221) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  v__h90292 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write("[%10d", v__h90292, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write("[%2d]DCACHE: FILL: Response from Memory:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write("'h%h", ff_read_mem_response_rv_port1__read[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1227)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1229)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1231)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_219_OR_TASK_testplusargs_220_ETC___d1233)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1219 ||
	   TASK_testplusargs___d1220 && TASK_testplusargs___d1221))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  TASK_testplusargs___d1188 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  TASK_testplusargs___d1189 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  TASK_testplusargs___d1190 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1193 =
	ma_cache_enable_c &&
	!ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 &&
	(TASK_testplusargs___d1188 ||
	 TASK_testplusargs___d1189 && TASK_testplusargs___d1190);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  v__h89595 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1193)
	$write("[%10d", v__h89595, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1193)
	$write("[%2d]DCACHE: MemReq: Allocating Fbindex:%d",
	       id,
	       m_fillbuffer_mav_allocate_line);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1193)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348))
	begin
	  TASK_testplusargs___d1196 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348))
	begin
	  TASK_testplusargs___d1197 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348))
	begin
	  TASK_testplusargs___d1198 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d1201 =
	(!ma_cache_enable_c ||
	 ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348) &&
	(TASK_testplusargs___d1196 ||
	 TASK_testplusargs___d1197 && TASK_testplusargs___d1198);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348))
	begin
	  v__h89808 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d1201)
	$write("[%10d", v__h89808, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d1201)
	$write("[%2d]DCACHE: MemReq: Sending NC Request for Addr:%h",
	       id,
	       phyaddr__h89383);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__92_47_OR_ff_core_req_ETC___d1201)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  TASK_testplusargs___d1203 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  TASK_testplusargs___d1204 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  TASK_testplusargs___d1205 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1208 =
	ma_cache_enable_c &&
	!ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348 &&
	(TASK_testplusargs___d1203 ||
	 TASK_testplusargs___d1204 && TASK_testplusargs___d1205);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348)
	begin
	  v__h90021 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1208)
	$write("[%10d", v__h90021, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1208)
	$write("[%2d]DCACHE: MemReq: Sending Line Request for Addr:%h",
	       id,
	       phyaddr__h89383);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__92_AND_NOT_ff_core_reque_ETC___d1208)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1239 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1240 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1241 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1245 =
	(TASK_testplusargs___d1239 ||
	 TASK_testplusargs___d1240 && TASK_testplusargs___d1241) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1246 =
	(TASK_testplusargs___d1239 ||
	 TASK_testplusargs___d1240 && TASK_testplusargs___d1241) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1247 =
	(TASK_testplusargs___d1239 ||
	 TASK_testplusargs___d1240 && TASK_testplusargs___d1241) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1248 =
	(TASK_testplusargs___d1239 ||
	 TASK_testplusargs___d1240 && TASK_testplusargs___d1241) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  v__h90589 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write("[%10d", v__h90589, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write("[%2d]DCACHE: NC Response from Memory: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write("'h%h", ff_read_mem_response_rv_port1__read[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1245)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1246)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1247)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_239_OR_TASK_testplusargs_240_ETC___d1248)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1239 ||
	   TASK_testplusargs___d1240 && TASK_testplusargs___d1241))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d31 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d32 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h16894 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("[%10d", v__h16894, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("[%2d]DCACHE : Fence operation in progress", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d30 ||
	   TASK_testplusargs___d31 && TASK_testplusargs___d32))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d36 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d37 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d38 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h17049 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d36 ||
	   TASK_testplusargs___d37 && TASK_testplusargs___d38))
	$write("[%10d", v__h17049, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d36 ||
	   TASK_testplusargs___d37 && TASK_testplusargs___d38))
	$write("[%2d]DCACHE: Fence: CurrWay:%2d CurrSet:%2d Valid:%b Dirty:%b Addr:%h Data:%h",
	       id,
	       rg_fence_way,
	       rg_fence_set,
	       SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110,
	       SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177,
	       final_address__h16980,
	       m_data_mv_read_response[543:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d36 ||
	   TASK_testplusargs___d37 && TASK_testplusargs___d38))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110)
	begin
	  TASK_testplusargs___d186 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110)
	begin
	  TASK_testplusargs___d187 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110)
	begin
	  TASK_testplusargs___d188 = $test$plusargs("l2");
	  #0;
	end
    SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191 =
	SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 &&
	SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110 &&
	(TASK_testplusargs___d186 ||
	 TASK_testplusargs___d187 && TASK_testplusargs___d188);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d177 &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d110)
	begin
	  v__h21413 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("[%10d", v__h21413, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("[%2d]DCACHE: Fence: Evicting to Memory:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("DCache_mem_writereq { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("'h%h", final_address__h16980);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("'h%h", m_data_mv_read_response[543:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write(", ", "burst_len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("'h%h", 8'd15);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write(", ", "burst_size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("'h%h", 3'd2);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("False", " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d191)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d439 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d440 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d441 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d452 =
	(TASK_testplusargs___d439 ||
	 TASK_testplusargs___d440 && TASK_testplusargs___d441) &&
	m_storebuffer_v_sb_meta_0[2];
    TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d454 =
	(TASK_testplusargs___d439 ||
	 TASK_testplusargs___d440 && TASK_testplusargs___d441) &&
	!m_storebuffer_v_sb_meta_0[2];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  v__h37865 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("[%10d", v__h37865, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("[%2d]SB: Lookup:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("Storebuffer { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("'h%h", m_storebuffer_v_sb_meta_0[102:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("'h%h", m_storebuffer_v_sb_meta_0[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("'h%h", m_storebuffer_v_sb_meta_0[38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write(", ", "fbindex: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("'h%h", m_storebuffer_v_sb_meta_0[37:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write(", ", "mask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("'h%h", m_storebuffer_v_sb_meta_0[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d452)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_39_OR_TASK_testplusargs_40_A_ETC___d454)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("'h%h", m_storebuffer_v_sb_meta_0[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d439 ||
	   TASK_testplusargs___d440 && TASK_testplusargs___d441))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d456 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d457 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d458 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d469 =
	(TASK_testplusargs___d456 ||
	 TASK_testplusargs___d457 && TASK_testplusargs___d458) &&
	m_storebuffer_v_sb_meta_1[2];
    TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d471 =
	(TASK_testplusargs___d456 ||
	 TASK_testplusargs___d457 && TASK_testplusargs___d458) &&
	!m_storebuffer_v_sb_meta_1[2];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  v__h38153 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("[%10d", v__h38153, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("[%2d]SB: Lookup:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("Storebuffer { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("'h%h", m_storebuffer_v_sb_meta_1[102:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("'h%h", m_storebuffer_v_sb_meta_1[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("'h%h", m_storebuffer_v_sb_meta_1[38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write(", ", "fbindex: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("'h%h", m_storebuffer_v_sb_meta_1[37:35]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write(", ", "mask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("'h%h", m_storebuffer_v_sb_meta_1[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d469)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d471)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("'h%h", m_storebuffer_v_sb_meta_1[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d456 ||
	   TASK_testplusargs___d457 && TASK_testplusargs___d458))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d473 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d474 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d475 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  v__h38380 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d473 ||
	   TASK_testplusargs___d474 && TASK_testplusargs___d475))
	$write("[%10d", v__h38380, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d473 ||
	   TASK_testplusargs___d474 && TASK_testplusargs___d475))
	$write("[%2d]DCACHE: Response: Storemask:%h Storedata:%h",
	       id,
	       storemask__h38312,
	       storedata__h38313);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d473 ||
	   TASK_testplusargs___d474 && TASK_testplusargs___d475))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h46841 + y__h46842 != 2'd1)
	$display("Dynamic assertion failed: \"cache_subsystem/src/dcache/dcache1rw.bsv\", line 777, column 51\nMore than one data structure shows a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h46841 + y__h46842 != 2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d548 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d549 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d550 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d553 =
	IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d548 ||
	 TASK_testplusargs___d549 && TASK_testplusargs___d550);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h47152 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d553)
	$write("[%10d", v__h47152, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d553)
	$write("[%2d]DCACHE: Response: Hit from SRAM", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d553)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d555 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d556 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d557 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d560 =
	IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d555 ||
	 TASK_testplusargs___d556 && TASK_testplusargs___d557);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h47351 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d560)
	$write("[%10d", v__h47351, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d560)
	$write("[%2d]DCACHE: Response: Hit from Fillbuffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d560)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d567 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d568 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d569 = $test$plusargs("l0");
	  #0;
	end
    IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d572 =
	IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d567 ||
	 TASK_testplusargs___d568 && TASK_testplusargs___d569);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d424 == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h47660 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d572)
	$write("[%10d", v__h47660, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d572)
	$write("[%2d]DCACHE: Response: Hit from NC", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d572)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d1105 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d1106 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d1107 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_105_OR_TASK_testplusargs_106_ETC___d1125 =
	(TASK_testplusargs___d1105 ||
	 TASK_testplusargs___d1106 && TASK_testplusargs___d1107) &&
	NOT_IF_wr_nc_state_whas__22_THEN_wr_nc_state_w_ETC___d1114 &&
	NOT_IF_wr_fb_state_whas__32_THEN_wr_fb_state_w_ETC___d1118 &&
	NOT_IF_wr_ram_state_whas__27_THEN_wr_ram_state_ETC___d1122;
    TASK_testplusargs_105_OR_TASK_testplusargs_106_ETC___d1126 =
	(TASK_testplusargs___d1105 ||
	 TASK_testplusargs___d1106 && TASK_testplusargs___d1107) &&
	IF_wr_nc_state_whas__22_THEN_wr_nc_state_wget__ETC___d590;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  v__h87387 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write("[%10d", v__h87387, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write("[%2d]DCACHE: Responding to Core:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write("DMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write("'h%h", lv_response_word__h47820);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_105_OR_TASK_testplusargs_106_ETC___d1125)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  TASK_testplusargs_105_OR_TASK_testplusargs_106_ETC___d1126)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write("'h%h", lv_response_cause__h47822);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write("'h%h", lv_response_epochs__h47823, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d1105 ||
	   TASK_testplusargs___d1106 && TASK_testplusargs___d1107))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  TASK_testplusargs___d1150 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  TASK_testplusargs___d1151 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  TASK_testplusargs___d1152 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_150_OR_TASK_testplusargs_151_ETC___d1157 =
	(TASK_testplusargs___d1150 ||
	 TASK_testplusargs___d1151 && TASK_testplusargs___d1152) &&
	ma_cache_enable_c &&
	!ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348;
    TASK_testplusargs_150_OR_TASK_testplusargs_151_ETC___d1159 =
	(TASK_testplusargs___d1150 ||
	 TASK_testplusargs___d1151 && TASK_testplusargs___d1152) &&
	(!ma_cache_enable_c ||
	 ff_core_request_first__1_BITS_70_TO_39_42_ULT__ETC___d348);
    NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1155 =
	NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 &&
	(TASK_testplusargs___d1150 ||
	 TASK_testplusargs___d1151 && TASK_testplusargs___d1152);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  v__h89120 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1155)
	$write("[%10d", v__h89120, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 &&
	  TASK_testplusargs_150_OR_TASK_testplusargs_151_ETC___d1157)
	$write("[%2d]SB: Allocating sbindex:%d with ",
	       id,
	       m_storebuffer_rg_tail,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       ff_core_request_D_OUT[70:39],
	       ", ",
	       "data: ",
	       "'h%h",
	       x__h87787,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       ff_core_request_D_OUT[37],
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       fbindex__h87521,
	       ", ",
	       "mask: ",
	       "'h%h",
	       x__h88937,
	       ", ",
	       "io: ",
	       "False",
	       ", ",
	       "size: ",
	       "'h%h",
	       ff_core_request_D_OUT[33:32],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 &&
	  TASK_testplusargs_150_OR_TASK_testplusargs_151_ETC___d1159)
	$write("[%2d]SB: Allocating sbindex:%d with ",
	       id,
	       m_storebuffer_rg_tail,
	       "Storebuffer { ",
	       "addr: ",
	       "'h%h",
	       ff_core_request_D_OUT[70:39],
	       ", ",
	       "data: ",
	       "'h%h",
	       x__h87787,
	       ", ",
	       "epoch: ",
	       "'h%h",
	       ff_core_request_D_OUT[37],
	       ", ",
	       "fbindex: ",
	       "'h%h",
	       fbindex__h87521,
	       ", ",
	       "mask: ",
	       "'h%h",
	       x__h88937,
	       ", ",
	       "io: ",
	       "True",
	       ", ",
	       "size: ",
	       "'h%h",
	       ff_core_request_D_OUT[33:32],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1155)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  TASK_testplusargs___d1161 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  TASK_testplusargs___d1162 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  TASK_testplusargs___d1163 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1166 =
	NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127 &&
	(TASK_testplusargs___d1161 ||
	 TASK_testplusargs___d1162 && TASK_testplusargs___d1163);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1127)
	begin
	  v__h89260 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1166)
	$write("[%10d", v__h89260, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1166)
	$write("[%2d]DCACHE: Response: Allocating Store Buffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_36_TO_35_62__ETC___d1166)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  ff_core_request_D_OUT[36:35] != 2'd0 &&
	  IF_wr_ram_state_whas__27_THEN_wr_ram_state_wge_ETC___d429 == 2'd1 &&
	  !wr_fault_whas &&
	  _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget)
	$display("Error: \"cache_subsystem/src/dcache/dcache1rw.bsv\", line 744, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods mav_allocate_line and mav_allocate_line of module\n  instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  IF_wr_fb_state_whas__32_THEN_wr_fb_state_wget__ETC___d434 == 2'd1 &&
	  !wr_fault_whas &&
	  (ff_core_request_D_OUT[36:35] == 2'd1 ||
	   ff_core_request_D_OUT[36:35] == 2'd0))
	$display("Error: \"cache_subsystem/src/dcache/dcache1rw.bsv\", line 744, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods read and write of module instance\n  rg_handling_miss.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1251 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1252 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1253 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  v__h90831 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1251 ||
	   TASK_testplusargs___d1252 && TASK_testplusargs___d1253))
	$write("[%10d", v__h90831, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1251 ||
	   TASK_testplusargs___d1252 && TASK_testplusargs___d1253))
	$write("[%2d]DCACHE: Replaying Req. Index:%d",
	       id,
	       rg_recent_core_req);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1251 ||
	   TASK_testplusargs___d1252 && TASK_testplusargs___d1253))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1290 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1291 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1292 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  v__h93580 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1290 ||
	   TASK_testplusargs___d1291 && TASK_testplusargs___d1292))
	$write("[%10d", v__h93580, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1290 ||
	   TASK_testplusargs___d1291 && TASK_testplusargs___d1292))
	$write("[%2d]DCACHE: Release: set%d way:%d valid:%b dirty:%b",
	       id,
	       m_fillbuffer_mv_release_info[13:8],
	       v__h90935,
	       SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1389,
	       SEL_ARR_v_reg_dirty_0_11_v_reg_dirty_1_12_v_re_ETC___d1390);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1290 ||
	   TASK_testplusargs___d1291 && TASK_testplusargs___d1292))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1400 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1401 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1402 = $test$plusargs("l0");
	  #0;
	end
    SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1405 =
	SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 &&
	!rg_release_readphase &&
	(TASK_testplusargs___d1400 ||
	 TASK_testplusargs___d1401 && TASK_testplusargs___d1402);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 &&
	  !rg_release_readphase)
	begin
	  v__h94602 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1405)
	$write("[%10d", v__h94602, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1405)
	$write("[%2d]DCACHE: Release: Reading dirty set:%d way:%d",
	       id,
	       m_fillbuffer_mv_release_info[13:8],
	       v__h90935);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1405)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1409 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1410 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1411 = $test$plusargs("l0");
	  #0;
	end
    rg_release_readphase_32_AND_TASK_testplusargs__ETC___d1414 =
	rg_release_readphase &&
	(TASK_testplusargs___d1409 ||
	 TASK_testplusargs___d1410 && TASK_testplusargs___d1411);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  v__h94281 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_32_AND_TASK_testplusargs__ETC___d1414)
	$write("[%10d", v__h94281, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_32_AND_TASK_testplusargs__ETC___d1414)
	$write("[%2d]DCACHE: Evicting Addr:%h set_index:%d tag:%h data:%h",
	       id,
	       lv_evict_address__h94162,
	       m_fillbuffer_mv_release_info[13:8],
	       m_tag_mv_read_response[31:12],
	       m_data_mv_read_response[543:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_32_AND_TASK_testplusargs__ETC___d1414)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1559 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1560 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1561 = $test$plusargs("l0");
	  #0;
	end
    NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1564 =
	(!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	 rg_release_readphase) &&
	(TASK_testplusargs___d1559 ||
	 TASK_testplusargs___d1560 && TASK_testplusargs___d1561);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v_reg__ETC___d1392 ||
	   rg_release_readphase))
	begin
	  v__h102622 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1564)
	$write("[%10d", v__h102622, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1564)
	$write("[%2d]DCACHE: Release: Upd Addr:%h set:%d way:%d dirty:%b data:%h",
	       id,
	       m_fillbuffer_mv_release_info[33:2],
	       m_fillbuffer_mv_release_info[13:8],
	       v__h90935,
	       m_fillbuffer_mv_release_info[0],
	       m_fillbuffer_mv_release_info[545:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_4_v_reg_valid_1_5_v__ETC___d1564)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  WILL_FIRE_RL_rl_response_to_core &&
	  !m_fillbuffer_mv_fbfull &&
	  !rg_fence_stall &&
	  !m_fillbuffer_mv_release_info__98_BITS_13_TO_8__ETC___d1267 &&
	  !rg_performing_replay &&
	  !m_fillbuffer_mv_fbempty &&
	  !m_storebuffer_v_sb_valid_1 &&
	  !m_storebuffer_v_sb_valid_0 &&
	  m_fillbuffer_mv_fbhead_valid &&
	  !wr_store_in_progress_whas &&
	  !wr_store_in_progress_whas &&
	  ff_write_mem_request_FULL_N &&
	  !EN_put_core_req_put)
	$display("Error: \"cache_subsystem/src/dcache/dcache1rw.bsv\", line 977, column 10: (R0002)\n  Conflict-free rules RL_rl_release_from_fillbuffer and RL_rl_response_to_core\n  called conflicting methods notEmpty and deq of module instance\n  ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
	$display("Error: \"cache_subsystem/src/dcache/dcache1rw.bsv\", line 216, column 53: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_ram_check] and\n  [RL_rl_release_from_fillbuffer] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkdcache

