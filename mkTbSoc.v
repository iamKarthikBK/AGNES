//
// Generated by Bluespec Compiler, version 2021.07-3-g8227dc97 (build 8227dc97)
//
// On Fri Sep  3 12:10:06 PDT 2021
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTbSoc(CLK,
	       RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [31 : 0] uart_ifc_wr_status_x_wget;
  wire [3 : 0] uart_ifc_uart_err_status_reg_port0__write_1;
  wire rg_read_rx_1_whas,
       uart_ifc_uart_fifoRecv_r_enq_whas,
       uart_ifc_uart_pwRecvCellCountReset_whas,
       uart_ifc_uart_pwRecvResetBitCount_whas,
       uart_ifc_uart_pwXmitCellCountReset_whas,
       uart_ifc_uart_pwXmitEnableBitCount_whas,
       uart_ifc_uart_pwXmitLoadBuffer_whas;

  // register dump
  reg [31 : 0] dump;
  wire [31 : 0] dump_D_IN;
  wire dump_EN;

  // register dump1
  reg [31 : 0] dump1;
  wire [31 : 0] dump1_D_IN;
  wire dump1_EN;

  // register rg_cnt
  reg [4 : 0] rg_cnt;
  wire [4 : 0] rg_cnt_D_IN;
  wire rg_cnt_EN;

  // register rg_read_rx
  reg rg_read_rx;
  wire rg_read_rx_D_IN, rg_read_rx_EN;

  // register uart_ifc_dummy
  reg uart_ifc_dummy;
  wire uart_ifc_dummy_D_IN, uart_ifc_dummy_EN;

  // register uart_ifc_rg_baud_val_inner_reg
  reg [15 : 0] uart_ifc_rg_baud_val_inner_reg;
  wire [15 : 0] uart_ifc_rg_baud_val_inner_reg_D_IN;
  wire uart_ifc_rg_baud_val_inner_reg_EN;

  // register uart_ifc_rg_control_inner_reg
  reg [31 : 0] uart_ifc_rg_control_inner_reg;
  wire [31 : 0] uart_ifc_rg_control_inner_reg_D_IN;
  wire uart_ifc_rg_control_inner_reg_EN;

  // register uart_ifc_rg_intr_en_inner_reg
  reg [31 : 0] uart_ifc_rg_intr_en_inner_reg;
  wire [31 : 0] uart_ifc_rg_intr_en_inner_reg_D_IN;
  wire uart_ifc_rg_intr_en_inner_reg_EN;

  // register uart_ifc_uart_err_status_reg
  reg [3 : 0] uart_ifc_uart_err_status_reg;
  wire [3 : 0] uart_ifc_uart_err_status_reg_D_IN;
  wire uart_ifc_uart_err_status_reg_EN;

  // register uart_ifc_uart_fifoRecv_countReg
  reg [4 : 0] uart_ifc_uart_fifoRecv_countReg;
  wire [4 : 0] uart_ifc_uart_fifoRecv_countReg_D_IN;
  wire uart_ifc_uart_fifoRecv_countReg_EN;

  // register uart_ifc_uart_fifoXmit_countReg
  reg [4 : 0] uart_ifc_uart_fifoXmit_countReg;
  wire [4 : 0] uart_ifc_uart_fifoXmit_countReg_D_IN;
  wire uart_ifc_uart_fifoXmit_countReg_EN;

  // register uart_ifc_uart_rRecvBitCount
  reg [3 : 0] uart_ifc_uart_rRecvBitCount;
  wire [3 : 0] uart_ifc_uart_rRecvBitCount_D_IN;
  wire uart_ifc_uart_rRecvBitCount_EN;

  // register uart_ifc_uart_rRecvCellCount
  reg [3 : 0] uart_ifc_uart_rRecvCellCount;
  wire [3 : 0] uart_ifc_uart_rRecvCellCount_D_IN;
  wire uart_ifc_uart_rRecvCellCount_EN;

  // register uart_ifc_uart_rRecvData
  reg uart_ifc_uart_rRecvData;
  wire uart_ifc_uart_rRecvData_D_IN, uart_ifc_uart_rRecvData_EN;

  // register uart_ifc_uart_rRecvParity
  reg uart_ifc_uart_rRecvParity;
  wire uart_ifc_uart_rRecvParity_D_IN, uart_ifc_uart_rRecvParity_EN;

  // register uart_ifc_uart_rRecvState
  reg [2 : 0] uart_ifc_uart_rRecvState;
  reg [2 : 0] uart_ifc_uart_rRecvState_D_IN;
  wire uart_ifc_uart_rRecvState_EN;

  // register uart_ifc_uart_rXmitBitCount
  reg [3 : 0] uart_ifc_uart_rXmitBitCount;
  wire [3 : 0] uart_ifc_uart_rXmitBitCount_D_IN;
  wire uart_ifc_uart_rXmitBitCount_EN;

  // register uart_ifc_uart_rXmitCellCount
  reg [3 : 0] uart_ifc_uart_rXmitCellCount;
  wire [3 : 0] uart_ifc_uart_rXmitCellCount_D_IN;
  wire uart_ifc_uart_rXmitCellCount_EN;

  // register uart_ifc_uart_rXmitDataOut
  reg uart_ifc_uart_rXmitDataOut;
  reg uart_ifc_uart_rXmitDataOut_D_IN;
  wire uart_ifc_uart_rXmitDataOut_EN;

  // register uart_ifc_uart_rXmitParity
  reg uart_ifc_uart_rXmitParity;
  wire uart_ifc_uart_rXmitParity_D_IN, uart_ifc_uart_rXmitParity_EN;

  // register uart_ifc_uart_rXmitState
  reg [2 : 0] uart_ifc_uart_rXmitState;
  reg [2 : 0] uart_ifc_uart_rXmitState_D_IN;
  wire uart_ifc_uart_rXmitState_EN;

  // register uart_ifc_uart_rg_stop_error
  reg uart_ifc_uart_rg_stop_error;
  wire uart_ifc_uart_rg_stop_error_D_IN, uart_ifc_uart_rg_stop_error_EN;

  // register uart_ifc_uart_rx_thld_triggered
  reg uart_ifc_uart_rx_thld_triggered;
  wire uart_ifc_uart_rx_thld_triggered_D_IN,
       uart_ifc_uart_rx_thld_triggered_EN;

  // register uart_ifc_uart_tx_thld_triggered
  reg uart_ifc_uart_tx_thld_triggered;
  wire uart_ifc_uart_tx_thld_triggered_D_IN,
       uart_ifc_uart_tx_thld_triggered_EN;

  // register uart_ifc_uart_vrRecvBuffer
  reg uart_ifc_uart_vrRecvBuffer;
  wire uart_ifc_uart_vrRecvBuffer_D_IN, uart_ifc_uart_vrRecvBuffer_EN;

  // register uart_ifc_uart_vrRecvBuffer_1
  reg uart_ifc_uart_vrRecvBuffer_1;
  wire uart_ifc_uart_vrRecvBuffer_1_D_IN, uart_ifc_uart_vrRecvBuffer_1_EN;

  // register uart_ifc_uart_vrRecvBuffer_2
  reg uart_ifc_uart_vrRecvBuffer_2;
  wire uart_ifc_uart_vrRecvBuffer_2_D_IN, uart_ifc_uart_vrRecvBuffer_2_EN;

  // register uart_ifc_uart_vrRecvBuffer_3
  reg uart_ifc_uart_vrRecvBuffer_3;
  wire uart_ifc_uart_vrRecvBuffer_3_D_IN, uart_ifc_uart_vrRecvBuffer_3_EN;

  // register uart_ifc_uart_vrRecvBuffer_4
  reg uart_ifc_uart_vrRecvBuffer_4;
  wire uart_ifc_uart_vrRecvBuffer_4_D_IN, uart_ifc_uart_vrRecvBuffer_4_EN;

  // register uart_ifc_uart_vrRecvBuffer_5
  reg uart_ifc_uart_vrRecvBuffer_5;
  wire uart_ifc_uart_vrRecvBuffer_5_D_IN, uart_ifc_uart_vrRecvBuffer_5_EN;

  // register uart_ifc_uart_vrRecvBuffer_6
  reg uart_ifc_uart_vrRecvBuffer_6;
  wire uart_ifc_uart_vrRecvBuffer_6_D_IN, uart_ifc_uart_vrRecvBuffer_6_EN;

  // register uart_ifc_uart_vrRecvBuffer_7
  reg uart_ifc_uart_vrRecvBuffer_7;
  wire uart_ifc_uart_vrRecvBuffer_7_D_IN, uart_ifc_uart_vrRecvBuffer_7_EN;

  // register uart_ifc_uart_vrXmitBuffer
  reg uart_ifc_uart_vrXmitBuffer;
  wire uart_ifc_uart_vrXmitBuffer_D_IN, uart_ifc_uart_vrXmitBuffer_EN;

  // register uart_ifc_uart_vrXmitBuffer_1
  reg uart_ifc_uart_vrXmitBuffer_1;
  wire uart_ifc_uart_vrXmitBuffer_1_D_IN, uart_ifc_uart_vrXmitBuffer_1_EN;

  // register uart_ifc_uart_vrXmitBuffer_2
  reg uart_ifc_uart_vrXmitBuffer_2;
  wire uart_ifc_uart_vrXmitBuffer_2_D_IN, uart_ifc_uart_vrXmitBuffer_2_EN;

  // register uart_ifc_uart_vrXmitBuffer_3
  reg uart_ifc_uart_vrXmitBuffer_3;
  wire uart_ifc_uart_vrXmitBuffer_3_D_IN, uart_ifc_uart_vrXmitBuffer_3_EN;

  // register uart_ifc_uart_vrXmitBuffer_4
  reg uart_ifc_uart_vrXmitBuffer_4;
  wire uart_ifc_uart_vrXmitBuffer_4_D_IN, uart_ifc_uart_vrXmitBuffer_4_EN;

  // register uart_ifc_uart_vrXmitBuffer_5
  reg uart_ifc_uart_vrXmitBuffer_5;
  wire uart_ifc_uart_vrXmitBuffer_5_D_IN, uart_ifc_uart_vrXmitBuffer_5_EN;

  // register uart_ifc_uart_vrXmitBuffer_6
  reg uart_ifc_uart_vrXmitBuffer_6;
  wire uart_ifc_uart_vrXmitBuffer_6_D_IN, uart_ifc_uart_vrXmitBuffer_6_EN;

  // register uart_ifc_uart_vrXmitBuffer_7
  reg uart_ifc_uart_vrXmitBuffer_7;
  wire uart_ifc_uart_vrXmitBuffer_7_D_IN, uart_ifc_uart_vrXmitBuffer_7_EN;

  // register uart_ifc_uart_wr_rx_thld_clear
  reg uart_ifc_uart_wr_rx_thld_clear;
  wire uart_ifc_uart_wr_rx_thld_clear_D_IN, uart_ifc_uart_wr_rx_thld_clear_EN;

  // register uart_ifc_uart_wr_tx_thld_clear
  reg uart_ifc_uart_wr_tx_thld_clear;
  wire uart_ifc_uart_wr_tx_thld_clear_D_IN, uart_ifc_uart_wr_tx_thld_clear_EN;

  // ports of submodule soc
  wire [103 : 0] soc_io_dump_get;
  wire soc_EN_io_dump_get,
       soc_RDY_io_dump_get,
       soc_uart_io_SIN,
       soc_uart_io_SOUT;

  // ports of submodule tck_clk
  wire tck_clk_CLK_IN, tck_clk_CLK_IN_EN, tck_clk_COND_IN, tck_clk_COND_IN_EN;

  // ports of submodule trst
  wire trst_ASSERT_IN;

  // ports of submodule uart_ifc_uart_baudGen_rBaudCounter
  wire [15 : 0] uart_ifc_uart_baudGen_rBaudCounter_DATA_A,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_B,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_C,
		uart_ifc_uart_baudGen_rBaudCounter_DATA_F,
		uart_ifc_uart_baudGen_rBaudCounter_Q_OUT;
  wire uart_ifc_uart_baudGen_rBaudCounter_ADDA,
       uart_ifc_uart_baudGen_rBaudCounter_ADDB,
       uart_ifc_uart_baudGen_rBaudCounter_SETC,
       uart_ifc_uart_baudGen_rBaudCounter_SETF;

  // ports of submodule uart_ifc_uart_baudGen_rBaudTickCounter
  wire [2 : 0] uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C,
	       uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F,
	       uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT;
  wire uart_ifc_uart_baudGen_rBaudTickCounter_ADDA,
       uart_ifc_uart_baudGen_rBaudTickCounter_ADDB,
       uart_ifc_uart_baudGen_rBaudTickCounter_SETC,
       uart_ifc_uart_baudGen_rBaudTickCounter_SETF;

  // ports of submodule uart_ifc_uart_fifoRecv
  wire [7 : 0] uart_ifc_uart_fifoRecv_D_IN, uart_ifc_uart_fifoRecv_D_OUT;
  wire uart_ifc_uart_fifoRecv_CLR,
       uart_ifc_uart_fifoRecv_DEQ,
       uart_ifc_uart_fifoRecv_EMPTY_N,
       uart_ifc_uart_fifoRecv_ENQ,
       uart_ifc_uart_fifoRecv_FULL_N;

  // ports of submodule uart_ifc_uart_fifoXmit
  wire [7 : 0] uart_ifc_uart_fifoXmit_D_IN, uart_ifc_uart_fifoXmit_D_OUT;
  wire uart_ifc_uart_fifoXmit_CLR,
       uart_ifc_uart_fifoXmit_DEQ,
       uart_ifc_uart_fifoXmit_EMPTY_N,
       uart_ifc_uart_fifoXmit_ENQ,
       uart_ifc_uart_fifoXmit_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_display_eol,
       CAN_FIRE_RL_rg_read_rx__dreg_update,
       CAN_FIRE_RL_rl_check_if_character_present,
       CAN_FIRE_RL_rl_connect_uart_in,
       CAN_FIRE_RL_rl_connect_uart_out,
       CAN_FIRE_RL_rl_open_file_app,
       CAN_FIRE_RL_rl_open_file_rtldump,
       CAN_FIRE_RL_rl_write_dump_file,
       CAN_FIRE_RL_rl_write_received_character,
       CAN_FIRE_RL_uart_ifc_rl_clear_status,
       CAN_FIRE_RL_uart_ifc_rl_connect_status,
       CAN_FIRE_RL_uart_ifc_rl_deq_rx,
       CAN_FIRE_RL_uart_ifc_rl_write_tx,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_uart_ifc_uart_receive_bit_counter,
       CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift,
       CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_sample_pin,
       CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit,
       CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear,
       CAN_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear,
       CAN_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_uart_ifc_uart_transmit_bit_counter,
       CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load,
       CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command,
       CAN_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update,
       CAN_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update,
       WILL_FIRE_RL_display_eol,
       WILL_FIRE_RL_rg_read_rx__dreg_update,
       WILL_FIRE_RL_rl_check_if_character_present,
       WILL_FIRE_RL_rl_connect_uart_in,
       WILL_FIRE_RL_rl_connect_uart_out,
       WILL_FIRE_RL_rl_open_file_app,
       WILL_FIRE_RL_rl_open_file_rtldump,
       WILL_FIRE_RL_rl_write_dump_file,
       WILL_FIRE_RL_rl_write_received_character,
       WILL_FIRE_RL_uart_ifc_rl_clear_status,
       WILL_FIRE_RL_uart_ifc_rl_connect_status,
       WILL_FIRE_RL_uart_ifc_rl_deq_rx,
       WILL_FIRE_RL_uart_ifc_rl_write_tx,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_uart_ifc_uart_receive_bit_counter,
       WILL_FIRE_RL_uart_ifc_uart_receive_buffer_shift,
       WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin,
       WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit,
       WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear,
       WILL_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear,
       WILL_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_uart_ifc_uart_transmit_bit_counter,
       WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load,
       WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command,
       WILL_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update,
       WILL_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update;

  // inputs to muxes for submodule ports
  wire [2 : 0] MUX_uart_ifc_uart_rRecvState_write_1__VAL_1,
	       MUX_uart_ifc_uart_rRecvState_write_1__VAL_2,
	       MUX_uart_ifc_uart_rRecvState_write_1__VAL_3,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_1,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_2,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_3,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_4,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_5,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_6,
	       MUX_uart_ifc_uart_rXmitState_write_1__VAL_7;
  wire MUX_uart_ifc_uart_rRecvState_write_1__SEL_5,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4,
       MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2,
       MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h17152;
  reg TASK_testplusargs___d300;
  reg TASK_testplusargs___d301;
  reg TASK_testplusargs___d302;
  reg [63 : 0] v__h17222;
  reg TASK_testplusargs___d309;
  reg [31 : 0] TASK_fopen___d310;
  reg TASK_testplusargs___d313;
  reg TASK_testplusargs___d314;
  reg TASK_testplusargs___d315;
  reg [63 : 0] v__h17512;
  reg [31 : 0] TASK_fopen___d321;
  reg TASK_testplusargs___d323;
  reg TASK_testplusargs___d324;
  reg TASK_testplusargs___d325;
  reg [63 : 0] v__h17925;
  reg TASK_testplusargs___d353;
  reg TASK_testplusargs___d99;
  reg TASK_testplusargs___d100;
  reg TASK_testplusargs___d101;
  reg [63 : 0] v__h9928;
  reg TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318;
  reg TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] data__h19375;
  wire [7 : 0] _i_receive_char__h16475, bitdata__h9851;
  wire [3 : 0] x__h11131,
	       x__h11816,
	       x__h11850,
	       x__h16654,
	       x__h7521,
	       x__h9246,
	       y__h15464,
	       y__h9534,
	       y__h9556;
  wire [2 : 0] IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88;
  wire _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset,
       _theResult_____1__h9860,
       _theResult_____2__h9859,
       _theResult_____3__h9858,
       _theResult____h9857,
       uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38,
       uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149,
       uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258,
       uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213,
       uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135,
       x__h15880,
       x__h16836,
       z__h11207,
       z__h11214,
       z__h11221,
       z__h11228,
       z__h11235,
       z__h11242,
       z__h11249,
       z__h13347,
       z__h13354,
       z__h13361,
       z__h13368,
       z__h13375,
       z__h13382;

  // submodule soc
  mkSoc soc(.CLK(CLK),
	    .RST_N(RST_N),
	    .uart_io_SIN(soc_uart_io_SIN),
	    .EN_io_dump_get(soc_EN_io_dump_get),
	    .io_dump_get(soc_io_dump_get),
	    .RDY_io_dump_get(soc_RDY_io_dump_get),
	    .uart_io_SOUT(soc_uart_io_SOUT));

  // submodule tck_clk
  MakeClock #(.initVal(1'd1), .initGate(1'd1)) tck_clk(.CLK(CLK),
						       .RST(RST_N),
						       .CLK_IN(tck_clk_CLK_IN),
						       .COND_IN(tck_clk_COND_IN),
						       .CLK_IN_EN(tck_clk_CLK_IN_EN),
						       .COND_IN_EN(tck_clk_COND_IN_EN),
						       .CLK_VAL_OUT(),
						       .COND_OUT(),
						       .CLK_GATE_OUT(),
						       .CLK_OUT());

  // submodule trst
  MakeReset0 #(.init(1'd1)) trst(.CLK(CLK),
				 .RST(RST_N),
				 .ASSERT_IN(trst_ASSERT_IN),
				 .ASSERT_OUT(),
				 .OUT_RST());

  // submodule uart_ifc_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) uart_ifc_uart_baudGen_rBaudCounter(.CLK(CLK),
							     .RST(RST_N),
							     .DATA_A(uart_ifc_uart_baudGen_rBaudCounter_DATA_A),
							     .DATA_B(uart_ifc_uart_baudGen_rBaudCounter_DATA_B),
							     .DATA_C(uart_ifc_uart_baudGen_rBaudCounter_DATA_C),
							     .DATA_F(uart_ifc_uart_baudGen_rBaudCounter_DATA_F),
							     .ADDA(uart_ifc_uart_baudGen_rBaudCounter_ADDA),
							     .ADDB(uart_ifc_uart_baudGen_rBaudCounter_ADDB),
							     .SETC(uart_ifc_uart_baudGen_rBaudCounter_SETC),
							     .SETF(uart_ifc_uart_baudGen_rBaudCounter_SETF),
							     .Q_OUT(uart_ifc_uart_baudGen_rBaudCounter_Q_OUT));

  // submodule uart_ifc_uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) uart_ifc_uart_baudGen_rBaudTickCounter(.CLK(CLK),
								.RST(RST_N),
								.DATA_A(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A),
								.DATA_B(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B),
								.DATA_C(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C),
								.DATA_F(uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F),
								.ADDA(uart_ifc_uart_baudGen_rBaudTickCounter_ADDA),
								.ADDB(uart_ifc_uart_baudGen_rBaudTickCounter_ADDB),
								.SETC(uart_ifc_uart_baudGen_rBaudTickCounter_SETC),
								.SETF(uart_ifc_uart_baudGen_rBaudTickCounter_SETF),
								.Q_OUT(uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT));

  // submodule uart_ifc_uart_fifoRecv
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_ifc_uart_fifoRecv(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(uart_ifc_uart_fifoRecv_D_IN),
						     .ENQ(uart_ifc_uart_fifoRecv_ENQ),
						     .DEQ(uart_ifc_uart_fifoRecv_DEQ),
						     .CLR(uart_ifc_uart_fifoRecv_CLR),
						     .D_OUT(uart_ifc_uart_fifoRecv_D_OUT),
						     .FULL_N(uart_ifc_uart_fifoRecv_FULL_N),
						     .EMPTY_N(uart_ifc_uart_fifoRecv_EMPTY_N));

  // submodule uart_ifc_uart_fifoXmit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) uart_ifc_uart_fifoXmit(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(uart_ifc_uart_fifoXmit_D_IN),
						     .ENQ(uart_ifc_uart_fifoXmit_ENQ),
						     .DEQ(uart_ifc_uart_fifoXmit_DEQ),
						     .CLR(uart_ifc_uart_fifoXmit_CLR),
						     .D_OUT(uart_ifc_uart_fifoXmit_D_OUT),
						     .FULL_N(uart_ifc_uart_fifoXmit_FULL_N),
						     .EMPTY_N(uart_ifc_uart_fifoXmit_EMPTY_N));

  // rule RL_display_eol
  assign CAN_FIRE_RL_display_eol = 1'd1 ;
  assign WILL_FIRE_RL_display_eol = 1'd1 ;

  // rule RL_rl_open_file_rtldump
  assign CAN_FIRE_RL_rl_open_file_rtldump = rg_cnt == 5'd0 ;
  assign WILL_FIRE_RL_rl_open_file_rtldump =
	     CAN_FIRE_RL_rl_open_file_rtldump ;

  // rule RL_rl_open_file_app
  assign CAN_FIRE_RL_rl_open_file_app = CAN_FIRE_RL_rl_open_file_rtldump ;
  assign WILL_FIRE_RL_rl_open_file_app = CAN_FIRE_RL_rl_open_file_rtldump ;

  // rule RL_rl_connect_uart_out
  assign CAN_FIRE_RL_rl_connect_uart_out = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_uart_out = 1'd1 ;

  // rule RL_rl_write_dump_file
  assign CAN_FIRE_RL_rl_write_dump_file =
	     soc_RDY_io_dump_get && rg_cnt != 5'd0 ;
  assign WILL_FIRE_RL_rl_write_dump_file = CAN_FIRE_RL_rl_write_dump_file ;

  // rule RL_uart_ifc_rl_connect_status
  assign CAN_FIRE_RL_uart_ifc_rl_connect_status = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_rl_connect_status = 1'd1 ;

  // rule RL_rl_check_if_character_present
  assign CAN_FIRE_RL_rl_check_if_character_present = !rg_read_rx ;
  assign WILL_FIRE_RL_rl_check_if_character_present =
	     CAN_FIRE_RL_rl_check_if_character_present ;

  // rule RL_rl_write_received_character
  assign CAN_FIRE_RL_rl_write_received_character =
	     CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign WILL_FIRE_RL_rl_write_received_character =
	     CAN_FIRE_RL_uart_ifc_rl_deq_rx ;

  // rule RL_uart_ifc_uart_rl_rx_thld_clear
  assign CAN_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_rl_rx_thld_clear = 1'd1 ;

  // rule RL_uart_ifc_uart_rl_tx_thld_clear
  assign CAN_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_rl_tx_thld_clear = 1'd1 ;

  // rule RL_uart_ifc_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_uart_ifc_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_uart_ifc_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit =
	     uart_ifc_uart_rRecvState == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ;

  // rule RL_uart_ifc_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell =
	     uart_ifc_uart_rRecvState == 3'd1 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell ;

  // rule RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     uart_ifc_uart_rRecvState == 3'd2 &&
	     uart_ifc_uart_rRecvCellCount == 4'hF &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_uart_ifc_uart_receive_sample_pin
  assign CAN_FIRE_RL_uart_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // rule RL_uart_ifc_uart_receive_parity_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit =
	     uart_ifc_uart_rRecvState == 3'd4 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit ;

  // rule RL_uart_ifc_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit =
	     uart_ifc_uart_rRecvState == 3'd5 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ;

  // rule RL_uart_ifc_uart_receive_bit_counter
  assign CAN_FIRE_RL_uart_ifc_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_bit_counter = 1'd1 ;

  // rule RL_uart_ifc_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit =
	     uart_ifc_uart_rRecvState == 3'd6 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ;

  // rule RL_uart_ifc_rl_clear_status
  assign CAN_FIRE_RL_uart_ifc_rl_clear_status = 1'b0 ;
  assign WILL_FIRE_RL_uart_ifc_rl_clear_status = 1'b0 ;

  // rule RL_uart_ifc_rl_deq_rx
  assign CAN_FIRE_RL_uart_ifc_rl_deq_rx = rg_cnt != 5'd0 && rg_read_rx ;
  assign WILL_FIRE_RL_uart_ifc_rl_deq_rx = CAN_FIRE_RL_uart_ifc_rl_deq_rx ;

  // rule RL_uart_ifc_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_receive_buffer_shift
  assign CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift =
	     uart_ifc_uart_rRecvState == 3'd3 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_receive_buffer_shift =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // rule RL_rl_connect_uart_in
  assign CAN_FIRE_RL_rl_connect_uart_in = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_uart_in = 1'd1 ;

  // rule RL_uart_ifc_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command =
	     uart_ifc_uart_rXmitState == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;

  // rule RL_uart_ifc_rl_write_tx
  assign CAN_FIRE_RL_uart_ifc_rl_write_tx = 1'b0 ;
  assign WILL_FIRE_RL_uart_ifc_rl_write_tx = 1'b0 ;

  // rule RL_uart_ifc_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit =
	     uart_ifc_uart_rXmitState == 3'd1 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ;

  // rule RL_uart_ifc_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time =
	     uart_ifc_uart_rXmitState == 3'd2 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_uart_ifc_uart_transmit_bit_counter
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_uart_ifc_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit =
	     uart_ifc_uart_rXmitState == 3'd3 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;

  // rule RL_uart_ifc_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift =
	     !uart_ifc_uart_pwXmitLoadBuffer_whas &&
	     CAN_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // rule RL_uart_ifc_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit =
	     uart_ifc_uart_rXmitState == 3'd7 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ;

  // rule RL_uart_ifc_uart_transmit_buffer_load
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load =
	     uart_ifc_uart_fifoXmit_EMPTY_N &&
	     uart_ifc_uart_pwXmitLoadBuffer_whas ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit =
	     uart_ifc_uart_rXmitState == 3'd4 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 =
	     uart_ifc_uart_rXmitState == 3'd5 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ;

  // rule RL_uart_ifc_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 =
	     uart_ifc_uart_rXmitState == 3'd6 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ;

  // rule RL_uart_ifc_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_ifc_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_uart_ifc_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick =
	     uart_ifc_uart_baudGen_rBaudTickCounter_Q_OUT == 3'd0 &&
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_uart_ifc_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x =
	     !uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign WILL_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_ifc_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter =
	     uart_ifc_uart_fifoRecv_r_enq_whas !=
	     CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign WILL_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter ;

  // rule RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update
  assign CAN_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_wr_rx_thld_clear__dreg_update = 1'd1 ;

  // rule RL_uart_ifc_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter =
	     1'b0 != CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter ;

  // rule RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update
  assign CAN_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_ifc_uart_wr_tx_thld_clear__dreg_update = 1'd1 ;

  // rule RL_rg_read_rx__dreg_update
  assign CAN_FIRE_RL_rg_read_rx__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_read_rx__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_uart_ifc_uart_rRecvState_write_1__SEL_5 =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4 =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;
  assign MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit &&
	     !uart_ifc_uart_rRecvData ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_1 =
	     uart_ifc_uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_2 =
	     (uart_ifc_uart_rRecvCellCount == 4'h4) ?
	       (uart_ifc_uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  assign MUX_uart_ifc_uart_rRecvState_write_1__VAL_3 =
	     (uart_ifc_uart_rRecvBitCount ==
	      uart_ifc_rg_control_inner_reg[7:4]) ?
	       ((uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ?
		  ((uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
		     3'd6 :
		     3'd5) :
		  3'd4) :
	       IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88 ;
  assign MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2 =
	     (uart_ifc_rg_control_inner_reg[3:2] == 2'd1) ?
	       uart_ifc_uart_rXmitParity :
	       uart_ifc_rg_control_inner_reg[3:2] == 2'd2 && x__h15880 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_1 =
	     uart_ifc_uart_fifoXmit_EMPTY_N ? 3'd1 : 3'd0 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_2 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd2 : 3'd1 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_3 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ?
	       ((uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 &&
		 uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ?
		  3'd4 :
		  ((uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 &&
		    uart_ifc_rg_control_inner_reg[3:2] != 2'd0) ?
		     3'd7 :
		     3'd3)) :
	       3'd2 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_4 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd4 : 3'd7 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_5 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF &&
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
	       3'd0 :
	       ((uart_ifc_uart_rXmitCellCount == 4'hF &&
		 uart_ifc_rg_control_inner_reg[1:0] == 2'd2) ?
		  3'd6 :
		  ((uart_ifc_uart_rXmitCellCount == 4'hF &&
		    uart_ifc_rg_control_inner_reg[1:0] == 2'd1) ?
		     3'd5 :
		     3'd4)) ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_6 =
	     (uart_ifc_uart_rXmitCellCount == 4'h7) ? 3'd0 : 3'd5 ;
  assign MUX_uart_ifc_uart_rXmitState_write_1__VAL_7 =
	     (uart_ifc_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd6 ;

  // inlined wires
  assign rg_read_rx_1_whas =
	     WILL_FIRE_RL_rl_check_if_character_present &&
	     uart_ifc_wr_status_x_wget[3] ;
  assign uart_ifc_uart_fifoRecv_r_enq_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	     uart_ifc_uart_rRecvData &&
	     !uart_ifc_uart_rg_stop_error ;
  assign uart_ifc_uart_pwRecvCellCountReset_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell &&
	     uart_ifc_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ;
  assign uart_ifc_uart_pwRecvResetBitCount_whas =
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit &&
	     uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_pwXmitCellCountReset_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command &&
	     uart_ifc_uart_fifoXmit_EMPTY_N ||
	     _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 &&
	     uart_ifc_uart_rXmitCellCount == 4'h7 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit &&
	     uart_ifc_uart_rXmitCellCount == 4'hF &&
	     (uart_ifc_rg_control_inner_reg[1:0] == 2'd0 ||
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd2 ||
	      uart_ifc_rg_control_inner_reg[1:0] == 2'd1) ;
  assign uart_ifc_uart_pwXmitEnableBitCount_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time &&
	     uart_ifc_uart_rXmitCellCount == 4'hF &&
	     (!uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 ||
	      uart_ifc_rg_control_inner_reg[3:2] != 2'd0) &&
	     (!uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 ||
	      uart_ifc_rg_control_inner_reg[3:2] == 2'd0) ;
  assign uart_ifc_uart_pwXmitLoadBuffer_whas =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command &&
	     uart_ifc_uart_fifoXmit_EMPTY_N ;
  assign uart_ifc_wr_status_x_wget =
	     { 20'd0,
	       uart_ifc_uart_err_status_reg,
	       2'd0,
	       uart_ifc_uart_rx_thld_triggered,
	       uart_ifc_uart_tx_thld_triggered,
	       uart_ifc_uart_fifoRecv_EMPTY_N,
	       uart_ifc_uart_fifoRecv_FULL_N,
	       uart_ifc_uart_fifoXmit_FULL_N,
	       x__h16836 } ;
  assign uart_ifc_uart_err_status_reg_port0__write_1 =
	     { _theResult_____2__h9859,
	       _theResult_____1__h9860,
	       _theResult_____3__h9858,
	       _theResult____h9857 } ;

  // register dump
  assign dump_D_IN = TASK_fopen___d310 ;
  assign dump_EN =
	     WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 ;

  // register dump1
  assign dump1_D_IN = TASK_fopen___d321 ;
  assign dump1_EN = CAN_FIRE_RL_rl_open_file_rtldump ;

  // register rg_cnt
  assign rg_cnt_D_IN = rg_cnt + 5'd1 ;
  assign rg_cnt_EN = CAN_FIRE_RL_rl_open_file_rtldump ;

  // register rg_read_rx
  assign rg_read_rx_D_IN = rg_read_rx_1_whas ;
  assign rg_read_rx_EN = 1'd1 ;

  // register uart_ifc_dummy
  assign uart_ifc_dummy_D_IN = !uart_ifc_dummy ;
  assign uart_ifc_dummy_EN =
	     WILL_FIRE_RL_rl_write_received_character ||
	     WILL_FIRE_RL_rl_check_if_character_present ;

  // register uart_ifc_rg_baud_val_inner_reg
  assign uart_ifc_rg_baud_val_inner_reg_D_IN = 16'h0 ;
  assign uart_ifc_rg_baud_val_inner_reg_EN = 1'b0 ;

  // register uart_ifc_rg_control_inner_reg
  assign uart_ifc_rg_control_inner_reg_D_IN = 32'h0 ;
  assign uart_ifc_rg_control_inner_reg_EN = 1'b0 ;

  // register uart_ifc_rg_intr_en_inner_reg
  assign uart_ifc_rg_intr_en_inner_reg_D_IN = 32'h0 ;
  assign uart_ifc_rg_intr_en_inner_reg_EN = 1'b0 ;

  // register uart_ifc_uart_err_status_reg
  assign uart_ifc_uart_err_status_reg_D_IN = x__h16654 ;
  assign uart_ifc_uart_err_status_reg_EN = 1'b1 ;

  // register uart_ifc_uart_fifoRecv_countReg
  assign uart_ifc_uart_fifoRecv_countReg_D_IN =
	     uart_ifc_uart_fifoRecv_r_enq_whas ?
	       uart_ifc_uart_fifoRecv_countReg + 5'd1 :
	       uart_ifc_uart_fifoRecv_countReg - 5'd1 ;
  assign uart_ifc_uart_fifoRecv_countReg_EN =
	     CAN_FIRE_RL_uart_ifc_uart_fifoRecv__updateLevelCounter ;

  // register uart_ifc_uart_fifoXmit_countReg
  assign uart_ifc_uart_fifoXmit_countReg_D_IN =
	     uart_ifc_uart_fifoXmit_countReg - 5'd1 ;
  assign uart_ifc_uart_fifoXmit_countReg_EN =
	     CAN_FIRE_RL_uart_ifc_uart_fifoXmit__updateLevelCounter ;

  // register uart_ifc_uart_rRecvBitCount
  assign uart_ifc_uart_rRecvBitCount_D_IN =
	     uart_ifc_uart_pwRecvResetBitCount_whas ? 4'd0 : x__h9246 ;
  assign uart_ifc_uart_rRecvBitCount_EN =
	     uart_ifc_uart_pwRecvResetBitCount_whas ||
	     MUX_uart_ifc_uart_rRecvState_write_1__SEL_5 ;

  // register uart_ifc_uart_rRecvCellCount
  assign uart_ifc_uart_rRecvCellCount_D_IN =
	     uart_ifc_uart_pwRecvCellCountReset_whas ? 4'd0 : x__h7521 ;
  assign uart_ifc_uart_rRecvCellCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // register uart_ifc_uart_rRecvData
  assign uart_ifc_uart_rRecvData_D_IN = soc_uart_io_SOUT ;
  assign uart_ifc_uart_rRecvData_EN = 1'd1 ;

  // register uart_ifc_uart_rRecvParity
  assign uart_ifc_uart_rRecvParity_D_IN = uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_rRecvParity_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_parity_bit ;

  // register uart_ifc_uart_rRecvState
  always@(WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_uart_ifc_uart_rRecvState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit or
	  MUX_uart_ifc_uart_rRecvState_write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_1;
      WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample:
	  uart_ifc_uart_rRecvState_D_IN =
	      MUX_uart_ifc_uart_rRecvState_write_1__VAL_3;
      WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit:
	  uart_ifc_uart_rRecvState_D_IN = 3'd0;
      MUX_uart_ifc_uart_rRecvState_write_1__SEL_5:
	  uart_ifc_uart_rRecvState_D_IN = 3'd2;
      default: uart_ifc_uart_rRecvState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rRecvState_EN =
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_sample_pin ;

  // register uart_ifc_uart_rXmitBitCount
  assign uart_ifc_uart_rXmitBitCount_D_IN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ?
	       4'd0 :
	       x__h11850 ;
  assign uart_ifc_uart_rXmitBitCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ||
	     uart_ifc_uart_pwXmitEnableBitCount_whas ;

  // register uart_ifc_uart_rXmitCellCount
  assign uart_ifc_uart_rXmitCellCount_D_IN =
	     uart_ifc_uart_pwXmitCellCountReset_whas ? 4'd0 : x__h11816 ;
  assign uart_ifc_uart_rXmitCellCount_EN =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // register uart_ifc_uart_rXmitDataOut
  always@(MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1 or
	  uart_ifc_uart_vrXmitBuffer or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit or
	  MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit or
	  MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_1:
	  uart_ifc_uart_rXmitDataOut_D_IN = uart_ifc_uart_vrXmitBuffer;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit:
	  uart_ifc_uart_rXmitDataOut_D_IN =
	      MUX_uart_ifc_uart_rXmitDataOut_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit:
	  uart_ifc_uart_rXmitDataOut_D_IN = 1'b0;
      MUX_uart_ifc_uart_rXmitDataOut_write_1__SEL_4:
	  uart_ifc_uart_rXmitDataOut_D_IN = 1'b1;
      default: uart_ifc_uart_rXmitDataOut_D_IN =
		   1'bx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rXmitDataOut_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ;

  // register uart_ifc_uart_rXmitParity
  assign uart_ifc_uart_rXmitParity_D_IN =
	     z__h13382 ^ uart_ifc_uart_fifoXmit_D_OUT[7] ;
  assign uart_ifc_uart_rXmitParity_EN =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;

  // register uart_ifc_uart_rXmitState
  always@(WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_5 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_6 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 or
	  MUX_uart_ifc_uart_rXmitState_write_1__VAL_7 or
	  WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_1;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_2;
      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_3;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_4;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_5;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_6;
      WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2:
	  uart_ifc_uart_rXmitState_D_IN =
	      MUX_uart_ifc_uart_rXmitState_write_1__VAL_7;
      WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit:
	  uart_ifc_uart_rXmitState_D_IN = 3'd2;
      default: uart_ifc_uart_rXmitState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign uart_ifc_uart_rXmitState_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_shift_next_bit ;

  // register uart_ifc_uart_rg_stop_error
  assign uart_ifc_uart_rg_stop_error_D_IN =
	     MUX_uart_ifc_uart_rg_stop_error_write_1__SEL_1 ;
  assign uart_ifc_uart_rg_stop_error_EN =
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_first_bit &&
	     !uart_ifc_uart_rRecvData ||
	     WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ;

  // register uart_ifc_uart_rx_thld_triggered
  assign uart_ifc_uart_rx_thld_triggered_D_IN =
	     (!uart_ifc_rg_control_inner_reg[11] ||
	      uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	      !uart_ifc_rg_control_inner_reg[13] ||
	      !uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	      uart_ifc_rg_control_inner_reg[13]) &&
	     !uart_ifc_uart_wr_rx_thld_clear ;
  assign uart_ifc_uart_rx_thld_triggered_EN =
	     uart_ifc_rg_control_inner_reg[11] ||
	     uart_ifc_uart_wr_rx_thld_clear ||
	     uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	     !uart_ifc_rg_control_inner_reg[13] ||
	     !uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 &&
	     uart_ifc_rg_control_inner_reg[13] ;

  // register uart_ifc_uart_tx_thld_triggered
  assign uart_ifc_uart_tx_thld_triggered_D_IN =
	     (!uart_ifc_rg_control_inner_reg[10] ||
	      uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	      !uart_ifc_rg_control_inner_reg[12] ||
	      !uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	      uart_ifc_rg_control_inner_reg[12]) &&
	     !uart_ifc_uart_wr_tx_thld_clear ;
  assign uart_ifc_uart_tx_thld_triggered_EN =
	     uart_ifc_rg_control_inner_reg[10] ||
	     uart_ifc_uart_wr_tx_thld_clear ||
	     uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	     !uart_ifc_rg_control_inner_reg[12] ||
	     !uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 &&
	     uart_ifc_rg_control_inner_reg[12] ;

  // register uart_ifc_uart_vrRecvBuffer
  assign uart_ifc_uart_vrRecvBuffer_D_IN = uart_ifc_uart_vrRecvBuffer_1 ;
  assign uart_ifc_uart_vrRecvBuffer_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_1
  assign uart_ifc_uart_vrRecvBuffer_1_D_IN = uart_ifc_uart_vrRecvBuffer_2 ;
  assign uart_ifc_uart_vrRecvBuffer_1_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_2
  assign uart_ifc_uart_vrRecvBuffer_2_D_IN = uart_ifc_uart_vrRecvBuffer_3 ;
  assign uart_ifc_uart_vrRecvBuffer_2_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_3
  assign uart_ifc_uart_vrRecvBuffer_3_D_IN = uart_ifc_uart_vrRecvBuffer_4 ;
  assign uart_ifc_uart_vrRecvBuffer_3_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_4
  assign uart_ifc_uart_vrRecvBuffer_4_D_IN = uart_ifc_uart_vrRecvBuffer_5 ;
  assign uart_ifc_uart_vrRecvBuffer_4_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_5
  assign uart_ifc_uart_vrRecvBuffer_5_D_IN = uart_ifc_uart_vrRecvBuffer_6 ;
  assign uart_ifc_uart_vrRecvBuffer_5_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_6
  assign uart_ifc_uart_vrRecvBuffer_6_D_IN = uart_ifc_uart_vrRecvBuffer_7 ;
  assign uart_ifc_uart_vrRecvBuffer_6_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrRecvBuffer_7
  assign uart_ifc_uart_vrRecvBuffer_7_D_IN = uart_ifc_uart_rRecvData ;
  assign uart_ifc_uart_vrRecvBuffer_7_EN =
	     CAN_FIRE_RL_uart_ifc_uart_receive_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer
  assign uart_ifc_uart_vrXmitBuffer_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[0] :
	       uart_ifc_uart_vrXmitBuffer_1 ;
  assign uart_ifc_uart_vrXmitBuffer_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_1
  assign uart_ifc_uart_vrXmitBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[1] :
	       uart_ifc_uart_vrXmitBuffer_2 ;
  assign uart_ifc_uart_vrXmitBuffer_1_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_2
  assign uart_ifc_uart_vrXmitBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[2] :
	       uart_ifc_uart_vrXmitBuffer_3 ;
  assign uart_ifc_uart_vrXmitBuffer_2_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_3
  assign uart_ifc_uart_vrXmitBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[3] :
	       uart_ifc_uart_vrXmitBuffer_4 ;
  assign uart_ifc_uart_vrXmitBuffer_3_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_4
  assign uart_ifc_uart_vrXmitBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[4] :
	       uart_ifc_uart_vrXmitBuffer_5 ;
  assign uart_ifc_uart_vrXmitBuffer_4_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_5
  assign uart_ifc_uart_vrXmitBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[5] :
	       uart_ifc_uart_vrXmitBuffer_6 ;
  assign uart_ifc_uart_vrXmitBuffer_5_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_6
  assign uart_ifc_uart_vrXmitBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ?
	       uart_ifc_uart_fifoXmit_D_OUT[6] :
	       uart_ifc_uart_vrXmitBuffer_7 ;
  assign uart_ifc_uart_vrXmitBuffer_6_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_vrXmitBuffer_7
  assign uart_ifc_uart_vrXmitBuffer_7_D_IN =
	     !WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     uart_ifc_uart_fifoXmit_D_OUT[7] ;
  assign uart_ifc_uart_vrXmitBuffer_7_EN =
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_ifc_uart_transmit_buffer_shift ;

  // register uart_ifc_uart_wr_rx_thld_clear
  assign uart_ifc_uart_wr_rx_thld_clear_D_IN = 1'b0 ;
  assign uart_ifc_uart_wr_rx_thld_clear_EN = 1'd1 ;

  // register uart_ifc_uart_wr_tx_thld_clear
  assign uart_ifc_uart_wr_tx_thld_clear_D_IN = 1'b0 ;
  assign uart_ifc_uart_wr_tx_thld_clear_EN = 1'd1 ;

  // submodule soc
  assign soc_uart_io_SIN = uart_ifc_uart_rXmitDataOut ;
  assign soc_EN_io_dump_get = CAN_FIRE_RL_rl_write_dump_file ;

  // submodule tck_clk
  assign tck_clk_CLK_IN = 1'b0 ;
  assign tck_clk_COND_IN = 1'b0 ;
  assign tck_clk_CLK_IN_EN = 1'b0 ;
  assign tck_clk_COND_IN_EN = 1'b0 ;

  // submodule trst
  assign trst_ASSERT_IN = 1'b0 ;

  // submodule uart_ifc_uart_baudGen_rBaudCounter
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_A = 16'd1 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_B = 16'h0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_C = 16'h0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_DATA_F = 16'd0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_ADDA =
	     uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_ADDB = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_SETC = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudCounter_SETF =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;

  // submodule uart_ifc_uart_baudGen_rBaudTickCounter
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_A = 3'd1 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_B = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_C = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_DATA_F = 3'h0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_ADDA =
	     CAN_FIRE_RL_uart_ifc_uart_baudGen_count_baudtick_16x ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_ADDB = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_SETC = 1'b0 ;
  assign uart_ifc_uart_baudGen_rBaudTickCounter_SETF = 1'b0 ;

  // submodule uart_ifc_uart_fifoRecv
  assign uart_ifc_uart_fifoRecv_D_IN = bitdata__h9851 ;
  assign uart_ifc_uart_fifoRecv_ENQ = uart_ifc_uart_fifoRecv_r_enq_whas ;
  assign uart_ifc_uart_fifoRecv_DEQ = CAN_FIRE_RL_uart_ifc_rl_deq_rx ;
  assign uart_ifc_uart_fifoRecv_CLR = 1'b0 ;

  // submodule uart_ifc_uart_fifoXmit
  assign uart_ifc_uart_fifoXmit_D_IN = 8'h0 ;
  assign uart_ifc_uart_fifoXmit_ENQ = 1'b0 ;
  assign uart_ifc_uart_fifoXmit_DEQ =
	     CAN_FIRE_RL_uart_ifc_uart_transmit_buffer_load ;
  assign uart_ifc_uart_fifoXmit_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_uart_ifc_uart_rRecvBitCount_6_EQ_uart_ifc_r_ETC___d88 =
	     (uart_ifc_uart_rRecvBitCount == y__h9534) ?
	       ((uart_ifc_rg_control_inner_reg[3:2] == 2'd0 ||
		 uart_ifc_rg_control_inner_reg[1:0] == 2'd0) ?
		  3'd6 :
		  3'd5) :
	       ((uart_ifc_uart_rRecvBitCount == y__h9556) ? 3'd6 : 3'd3) ;
  assign _dand2uart_ifc_uart_pwXmitCellCountReset_EN_wset =
	     (WILL_FIRE_RL_uart_ifc_uart_transmit_send_stop_bit2 ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_send_parity_bit ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_wait_1_bit_cell_time ||
	      WILL_FIRE_RL_uart_ifc_uart_transmit_send_start_bit) &&
	     uart_ifc_uart_rXmitCellCount == 4'hF ;
  assign _i_receive_char__h16475 =
	     uart_ifc_uart_fifoRecv_EMPTY_N ?
	       uart_ifc_uart_fifoRecv_D_OUT :
	       8'd0 ;
  assign _theResult_____1__h9860 =
	     !uart_ifc_uart_rRecvData || uart_ifc_uart_rg_stop_error ;
  assign _theResult_____2__h9859 =
	     bitdata__h9851 == 8'd0 && !uart_ifc_uart_rRecvData ;
  assign _theResult_____3__h9858 = !uart_ifc_uart_fifoRecv_FULL_N ;
  assign _theResult____h9857 =
	     uart_ifc_rg_control_inner_reg[3:2] == 2'd1 &&
	     !uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 ||
	     uart_ifc_rg_control_inner_reg[3:2] == 2'd2 &&
	     uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 ;
  assign bitdata__h9851 =
	     { uart_ifc_uart_vrRecvBuffer_7,
	       uart_ifc_uart_vrRecvBuffer_6,
	       uart_ifc_uart_vrRecvBuffer_5,
	       uart_ifc_uart_vrRecvBuffer_4,
	       uart_ifc_uart_vrRecvBuffer_3,
	       uart_ifc_uart_vrRecvBuffer_2,
	       uart_ifc_uart_vrRecvBuffer_1,
	       uart_ifc_uart_vrRecvBuffer } >>
	     x__h11131 ;
  assign data__h19375 =
	     { 24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       _i_receive_char__h16475 } ;
  assign uart_ifc_uart_baudGen_rBaudCounter_value_PLUS__ETC___d38 =
	     uart_ifc_uart_baudGen_rBaudCounter_Q_OUT + 16'd1 <
	     uart_ifc_rg_baud_val_inner_reg ;
  assign uart_ifc_uart_fifoRecv_countReg_2_ULE_uart_ifc_ETC___d149 =
	     uart_ifc_uart_fifoRecv_countReg <=
	     uart_ifc_rg_control_inner_reg[25:21] ;
  assign uart_ifc_uart_fifoXmit_countReg_7_ULE_uart_ifc_ETC___d258 =
	     uart_ifc_uart_fifoXmit_countReg <=
	     uart_ifc_rg_control_inner_reg[20:16] ;
  assign uart_ifc_uart_rXmitBitCount_68_EQ_uart_ifc_rg__ETC___d213 =
	     uart_ifc_uart_rXmitBitCount == y__h15464 ;
  assign uart_ifc_uart_vrRecvBuffer_7_1_CONCAT_uart_ifc_ETC___d135 =
	     z__h11249 ^ uart_ifc_uart_rRecvParity ;
  assign x__h11131 = 4'd8 - uart_ifc_rg_control_inner_reg[7:4] ;
  assign x__h11816 = uart_ifc_uart_rXmitCellCount + 4'd1 ;
  assign x__h11850 = uart_ifc_uart_rXmitBitCount + 4'd1 ;
  assign x__h15880 = ~uart_ifc_uart_rXmitParity ;
  assign x__h16654 =
	     CAN_FIRE_RL_uart_ifc_uart_receive_stop_last_bit ?
	       uart_ifc_uart_err_status_reg_port0__write_1 :
	       uart_ifc_uart_err_status_reg ;
  assign x__h16836 =
	     !uart_ifc_uart_fifoXmit_EMPTY_N &&
	     uart_ifc_uart_rXmitState == 3'd0 ;
  assign x__h7521 = uart_ifc_uart_rRecvCellCount + 4'd1 ;
  assign x__h9246 = uart_ifc_uart_rRecvBitCount + 4'd1 ;
  assign y__h15464 = uart_ifc_rg_control_inner_reg[7:4] - 4'd1 ;
  assign y__h9534 = uart_ifc_rg_control_inner_reg[7:4] + 4'd1 ;
  assign y__h9556 = uart_ifc_rg_control_inner_reg[7:4] + 4'd2 ;
  assign z__h11207 = bitdata__h9851[0] ^ bitdata__h9851[1] ;
  assign z__h11214 = z__h11207 ^ bitdata__h9851[2] ;
  assign z__h11221 = z__h11214 ^ bitdata__h9851[3] ;
  assign z__h11228 = z__h11221 ^ bitdata__h9851[4] ;
  assign z__h11235 = z__h11228 ^ bitdata__h9851[5] ;
  assign z__h11242 = z__h11235 ^ bitdata__h9851[6] ;
  assign z__h11249 = z__h11242 ^ bitdata__h9851[7] ;
  assign z__h13347 =
	     uart_ifc_uart_fifoXmit_D_OUT[0] ^
	     uart_ifc_uart_fifoXmit_D_OUT[1] ;
  assign z__h13354 = z__h13347 ^ uart_ifc_uart_fifoXmit_D_OUT[2] ;
  assign z__h13361 = z__h13354 ^ uart_ifc_uart_fifoXmit_D_OUT[3] ;
  assign z__h13368 = z__h13361 ^ uart_ifc_uart_fifoXmit_D_OUT[4] ;
  assign z__h13375 = z__h13368 ^ uart_ifc_uart_fifoXmit_D_OUT[5] ;
  assign z__h13382 = z__h13375 ^ uart_ifc_uart_fifoXmit_D_OUT[6] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        dump <= `BSV_ASSIGNMENT_DELAY 32'd0;
	dump1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_cnt <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_read_rx <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_rg_baud_val_inner_reg <= `BSV_ASSIGNMENT_DELAY 16'd5;
	uart_ifc_rg_control_inner_reg <= `BSV_ASSIGNMENT_DELAY 32'd10368;
	uart_ifc_rg_intr_en_inner_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	uart_ifc_uart_err_status_reg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
	uart_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	uart_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
	uart_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
	uart_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	uart_ifc_uart_rg_stop_error <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_rx_thld_triggered <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_tx_thld_triggered <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_wr_rx_thld_clear <= `BSV_ASSIGNMENT_DELAY 1'd0;
	uart_ifc_uart_wr_tx_thld_clear <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (dump_EN) dump <= `BSV_ASSIGNMENT_DELAY dump_D_IN;
	if (dump1_EN) dump1 <= `BSV_ASSIGNMENT_DELAY dump1_D_IN;
	if (rg_cnt_EN) rg_cnt <= `BSV_ASSIGNMENT_DELAY rg_cnt_D_IN;
	if (rg_read_rx_EN)
	  rg_read_rx <= `BSV_ASSIGNMENT_DELAY rg_read_rx_D_IN;
	if (uart_ifc_dummy_EN)
	  uart_ifc_dummy <= `BSV_ASSIGNMENT_DELAY uart_ifc_dummy_D_IN;
	if (uart_ifc_rg_baud_val_inner_reg_EN)
	  uart_ifc_rg_baud_val_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_baud_val_inner_reg_D_IN;
	if (uart_ifc_rg_control_inner_reg_EN)
	  uart_ifc_rg_control_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_control_inner_reg_D_IN;
	if (uart_ifc_rg_intr_en_inner_reg_EN)
	  uart_ifc_rg_intr_en_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_rg_intr_en_inner_reg_D_IN;
	if (uart_ifc_uart_err_status_reg_EN)
	  uart_ifc_uart_err_status_reg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_err_status_reg_D_IN;
	if (uart_ifc_uart_fifoRecv_countReg_EN)
	  uart_ifc_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_fifoRecv_countReg_D_IN;
	if (uart_ifc_uart_fifoXmit_countReg_EN)
	  uart_ifc_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_fifoXmit_countReg_D_IN;
	if (uart_ifc_uart_rRecvBitCount_EN)
	  uart_ifc_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvBitCount_D_IN;
	if (uart_ifc_uart_rRecvCellCount_EN)
	  uart_ifc_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvCellCount_D_IN;
	if (uart_ifc_uart_rRecvData_EN)
	  uart_ifc_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvData_D_IN;
	if (uart_ifc_uart_rRecvParity_EN)
	  uart_ifc_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvParity_D_IN;
	if (uart_ifc_uart_rRecvState_EN)
	  uart_ifc_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rRecvState_D_IN;
	if (uart_ifc_uart_rXmitBitCount_EN)
	  uart_ifc_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitBitCount_D_IN;
	if (uart_ifc_uart_rXmitCellCount_EN)
	  uart_ifc_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitCellCount_D_IN;
	if (uart_ifc_uart_rXmitDataOut_EN)
	  uart_ifc_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitDataOut_D_IN;
	if (uart_ifc_uart_rXmitParity_EN)
	  uart_ifc_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitParity_D_IN;
	if (uart_ifc_uart_rXmitState_EN)
	  uart_ifc_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rXmitState_D_IN;
	if (uart_ifc_uart_rg_stop_error_EN)
	  uart_ifc_uart_rg_stop_error <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rg_stop_error_D_IN;
	if (uart_ifc_uart_rx_thld_triggered_EN)
	  uart_ifc_uart_rx_thld_triggered <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_rx_thld_triggered_D_IN;
	if (uart_ifc_uart_tx_thld_triggered_EN)
	  uart_ifc_uart_tx_thld_triggered <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_tx_thld_triggered_D_IN;
	if (uart_ifc_uart_wr_rx_thld_clear_EN)
	  uart_ifc_uart_wr_rx_thld_clear <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_wr_rx_thld_clear_D_IN;
	if (uart_ifc_uart_wr_tx_thld_clear_EN)
	  uart_ifc_uart_wr_tx_thld_clear <= `BSV_ASSIGNMENT_DELAY
	      uart_ifc_uart_wr_tx_thld_clear_D_IN;
      end
    if (uart_ifc_uart_vrRecvBuffer_EN)
      uart_ifc_uart_vrRecvBuffer <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_1_EN)
      uart_ifc_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_1_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_2_EN)
      uart_ifc_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_2_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_3_EN)
      uart_ifc_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_3_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_4_EN)
      uart_ifc_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_4_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_5_EN)
      uart_ifc_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_5_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_6_EN)
      uart_ifc_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_6_D_IN;
    if (uart_ifc_uart_vrRecvBuffer_7_EN)
      uart_ifc_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrRecvBuffer_7_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_EN)
      uart_ifc_uart_vrXmitBuffer <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_1_EN)
      uart_ifc_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_1_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_2_EN)
      uart_ifc_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_2_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_3_EN)
      uart_ifc_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_3_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_4_EN)
      uart_ifc_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_4_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_5_EN)
      uart_ifc_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_5_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_6_EN)
      uart_ifc_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_6_D_IN;
    if (uart_ifc_uart_vrXmitBuffer_7_EN)
      uart_ifc_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  uart_ifc_uart_vrXmitBuffer_7_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    dump = 32'hAAAAAAAA;
    dump1 = 32'hAAAAAAAA;
    rg_cnt = 5'h0A;
    rg_read_rx = 1'h0;
    uart_ifc_dummy = 1'h0;
    uart_ifc_rg_baud_val_inner_reg = 16'hAAAA;
    uart_ifc_rg_control_inner_reg = 32'hAAAAAAAA;
    uart_ifc_rg_intr_en_inner_reg = 32'hAAAAAAAA;
    uart_ifc_uart_err_status_reg = 4'hA;
    uart_ifc_uart_fifoRecv_countReg = 5'h0A;
    uart_ifc_uart_fifoXmit_countReg = 5'h0A;
    uart_ifc_uart_rRecvBitCount = 4'hA;
    uart_ifc_uart_rRecvCellCount = 4'hA;
    uart_ifc_uart_rRecvData = 1'h0;
    uart_ifc_uart_rRecvParity = 1'h0;
    uart_ifc_uart_rRecvState = 3'h2;
    uart_ifc_uart_rXmitBitCount = 4'hA;
    uart_ifc_uart_rXmitCellCount = 4'hA;
    uart_ifc_uart_rXmitDataOut = 1'h0;
    uart_ifc_uart_rXmitParity = 1'h0;
    uart_ifc_uart_rXmitState = 3'h2;
    uart_ifc_uart_rg_stop_error = 1'h0;
    uart_ifc_uart_rx_thld_triggered = 1'h0;
    uart_ifc_uart_tx_thld_triggered = 1'h0;
    uart_ifc_uart_vrRecvBuffer = 1'h0;
    uart_ifc_uart_vrRecvBuffer_1 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_2 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_3 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_4 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_5 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_6 = 1'h0;
    uart_ifc_uart_vrRecvBuffer_7 = 1'h0;
    uart_ifc_uart_vrXmitBuffer = 1'h0;
    uart_ifc_uart_vrXmitBuffer_1 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_2 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_3 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_4 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_5 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_6 = 1'h0;
    uart_ifc_uart_vrXmitBuffer_7 = 1'h0;
    uart_ifc_uart_wr_rx_thld_clear = 1'h0;
    uart_ifc_uart_wr_tx_thld_clear = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    begin
      v__h17152 = $time;
      #0;
    end
    begin
      TASK_testplusargs___d300 = $test$plusargs("fullverbose");
      #0;
    end
    begin
      TASK_testplusargs___d301 = $test$plusargs("mtb");
      #0;
    end
    begin
      TASK_testplusargs___d302 = $test$plusargs("l0");
      #0;
    end
    begin
      v__h17222 = $time;
      #0;
    end
    if (TASK_testplusargs___d300 ||
	TASK_testplusargs___d301 && TASK_testplusargs___d302)
      $write("[%10d", v__h17222, "] ");
    if (TASK_testplusargs___d300 ||
	TASK_testplusargs___d301 && TASK_testplusargs___d302)
      $write("\n[%10d]", v__h17152);
    if (TASK_testplusargs___d300 ||
	TASK_testplusargs___d301 && TASK_testplusargs___d302)
      $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump)
	begin
	  TASK_testplusargs___d309 = $test$plusargs("rtldump");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309)
	begin
	  TASK_fopen___d310 = $fopen("rtl.dump", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  TASK_testplusargs___d314 = $test$plusargs("mtb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  TASK_testplusargs___d315 = $test$plusargs("l0");
	  #0;
	end
    TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318 =
	TASK_fopen___d310 == 32'd0 &&
	(TASK_testplusargs___d313 ||
	 TASK_testplusargs___d314 && TASK_testplusargs___d315);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	begin
	  v__h17512 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318)
	$write("[%10d", v__h17512, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318)
	$write("TB: cannot open %s", "rtl.dump");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen_10_EQ_0_11_AND_TASK_testplusargs_13_ETC___d318)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_rtldump && TASK_testplusargs___d309 &&
	  TASK_fopen___d310 == 32'd0)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app)
	begin
	  TASK_fopen___d321 = $fopen("app_log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  TASK_testplusargs___d323 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  TASK_testplusargs___d324 = $test$plusargs("mtb");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  TASK_testplusargs___d325 = $test$plusargs("l0");
	  #0;
	end
    TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328 =
	TASK_fopen___d321 == 32'd0 &&
	(TASK_testplusargs___d323 ||
	 TASK_testplusargs___d324 && TASK_testplusargs___d325);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	begin
	  v__h17925 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app &&
	  TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328)
	$write("[%10d", v__h17925, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app &&
	  TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328)
	$write("TB: cannot open %s", "app_log");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app &&
	  TASK_fopen_21_EQ_0_22_AND_TASK_testplusargs_23_ETC___d328)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_open_file_app && TASK_fopen___d321 == 32'd0)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file)
	begin
	  TASK_testplusargs___d353 = $test$plusargs("rtldump");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file &&
	  (soc_io_dump_get[69:38] == 32'h0000006F ||
	   soc_io_dump_get[69:38] == 32'h0000A001))
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file &&
	  soc_io_dump_get[69:38] != 32'h0000006F &&
	  soc_io_dump_get[69:38] != 32'h0000A001 &&
	  TASK_testplusargs___d353)
	$fwrite(dump,
		soc_io_dump_get[103:102],
		" 0x%16h",
		soc_io_dump_get[101:70],
		" (0x%8h",
		soc_io_dump_get[69:38],
		")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file &&
	  soc_io_dump_get[69:38] != 32'h0000006F &&
	  soc_io_dump_get[69:38] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  soc_io_dump_get[0])
	$fwrite(dump,
		" f%d",
		soc_io_dump_get[37:33],
		" 0x%8h",
		soc_io_dump_get[32:1],
		"\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_dump_file &&
	  soc_io_dump_get[69:38] != 32'h0000006F &&
	  soc_io_dump_get[69:38] != 32'h0000A001 &&
	  TASK_testplusargs___d353 &&
	  !soc_io_dump_get[0])
	$fwrite(dump,
		" x%d",
		soc_io_dump_get[37:33],
		" 0x%8h",
		soc_io_dump_get[32:1],
		"\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_received_character)
	$fwrite(dump1, "%c", data__h19375);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d99 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("muart");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  TASK_testplusargs___d101 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit)
	begin
	  v__h9928 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("[%10d", v__h9928, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("Received char 'h%h. break_error:%b frame_error:%b overrun:%b parity_error:%b ",
	       bitdata__h9851,
	       _theResult_____2__h9859,
	       _theResult_____1__h9860,
	       _theResult_____3__h9858,
	       _theResult____h9857);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_ifc_uart_receive_stop_last_bit &&
	  (TASK_testplusargs___d99 ||
	   TASK_testplusargs___d100 && TASK_testplusargs___d101))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkTbSoc

